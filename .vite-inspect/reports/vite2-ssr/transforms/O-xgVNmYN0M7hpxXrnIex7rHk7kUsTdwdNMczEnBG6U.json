{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/RootLayout/ui/Navigation/Reports/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Box, Button, Collapse, Divider, Group, Pill } from '@mantine/core';\nimport { useClickOutside, useDisclosure } from '@mantine/hooks';\nimport { ArrowClockwise, CaretDown } from '@phosphor-icons/react/dist/ssr';\nimport clsx from 'clsx';\nimport { useList, useUnit } from 'effector-react';\n\nimport { ROUTES } from '@/shared/config';\nimport { useIsLarge } from '@/shared/lib';\n\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\nimport { RootModel } from '@/entities/Root';\nimport { TestModel } from '@/entities/Test';\n\nimport { ReportGroupTemplate } from './ReportGroupTemplate';\nimport { ReportTemplate } from './ReportTemplate';\n\nimport s from './Reports.module.css';\n\nexport const Reports = () => {\n    const [opened, { toggle, close }] = useDisclosure(false);\n    const isLarge = useIsLarge();\n\n    const ref = useClickOutside(() => isLarge && close());\n\n    const { pending, stale } = useUnit(getSurveysInfoQuery);\n    const [allReports, freeReports, paidReports, expressReports, closeAllModals] = useUnit([\n        ReportModel.$allUserReports,\n        ReportModel.$freeUserReports,\n        ReportModel.$paidUserReports,\n        ReportModel.$expressUserReports,\n        RootModel.allMenusClosed,\n    ]);\n    const [setSplashScreenVisibility] = useUnit([TestModel.setSplashScreenVisibility]);\n\n    const isLoading = pending || stale;\n    const renderFreeReports = useList(ReportModel.$freeUserReports, (report) => (\n        <ReportTemplate onClose={close} {...report} />\n    ));\n    const renderPaidReports = useList(ReportModel.$paidUserReports, (report) => (\n        <ReportTemplate onClose={close} {...report} />\n    ));\n    const renderExpressReports = useList(ReportModel.$expressUserReports, (report) => (\n        <ReportTemplate onClose={close} {...report} />\n    ));\n\n    if (isLoading || allReports?.length < 1) return null;\n\n    return (\n        <Box ref={ref} className={s.root}>\n            <Button\n                size='md'\n                onClick={toggle}\n                variant='default'\n                loading={isLoading}\n                disabled={isLoading}\n                className={clsx(s.link, !isLoading && s.loaded)}\n                rightSection={<CaretDown className={clsx(opened && s.rotate)} weight='bold' size='16' />}\n            >\n                <Group className={s.buttonGroup}>\n                    <Pill hidden={isLoading} className={s.pill}>\n                        {allReports?.length}\n                    </Pill>\n                    Ваши отчеты\n                </Group>\n            </Button>\n            <Collapse className={s.collapse} in={opened} transitionTimingFunction='linear'>\n                <Box className={s.category}>\n                    <ReportGroupTemplate reports={freeReports} render={renderFreeReports} label='Бесплатные отчёты' />\n                    <ReportGroupTemplate reports={paidReports} render={renderPaidReports} label='Полные отчёты' />\n                    <ReportGroupTemplate\n                        reports={expressReports}\n                        render={renderExpressReports}\n                        label='Экспресс отчёты'\n                    />\n                    <Divider />\n                    <Button\n                        component='a'\n                        href={ROUTES.TEST}\n                        w='100%'\n                        my='sm'\n                        fz={14}\n                        size='md'\n                        variant='subtle'\n                        className={s.takeTestAgain}\n                        onClick={() => {\n                            setSplashScreenVisibility(true);\n                            closeAllModals(false);\n                            toggle();\n                        }}\n                        leftSection={<ArrowClockwise weight='bold' />}\n                    >\n                        Пройти тест заново\n                    </Button>\n                </Box>\n            </Collapse>\n        </Box>\n    );\n};\n",
      "start": 1746125082523,
      "end": 1746125082586,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { Box, Button, Collapse, Divider, Group, Pill } from '@mantine/core';\nimport { useClickOutside, useDisclosure } from '@mantine/hooks';\nimport { ArrowClockwise, CaretDown } from '@phosphor-icons/react/dist/ssr';\nimport clsx from 'clsx';\nimport { useList, useUnit } from 'effector-react';\nimport { ROUTES } from '@/shared/config';\nimport { useIsLarge } from '@/shared/lib';\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\nimport { RootModel } from '@/entities/Root';\nimport { TestModel } from '@/entities/Test';\nimport { ReportGroupTemplate } from './ReportGroupTemplate';\nimport { ReportTemplate } from './ReportTemplate';\nimport s from './Reports.module.css';\nexport const Reports = () => {\n  const [opened, {\n    toggle,\n    close\n  }] = useDisclosure(false);\n  const isLarge = useIsLarge();\n  const ref = useClickOutside(() => isLarge && close());\n  const {\n    pending,\n    stale\n  } = useUnit(getSurveysInfoQuery);\n  const [allReports, freeReports, paidReports, expressReports, closeAllModals] = useUnit([ReportModel.$allUserReports, ReportModel.$freeUserReports, ReportModel.$paidUserReports, ReportModel.$expressUserReports, RootModel.allMenusClosed]);\n  const [setSplashScreenVisibility] = useUnit([TestModel.setSplashScreenVisibility]);\n  const isLoading = pending || stale;\n  const renderFreeReports = useList(ReportModel.$freeUserReports, report => <ReportTemplate onClose={close} {...report} />);\n  const renderPaidReports = useList(ReportModel.$paidUserReports, report => <ReportTemplate onClose={close} {...report} />);\n  const renderExpressReports = useList(ReportModel.$expressUserReports, report => <ReportTemplate onClose={close} {...report} />);\n  if (isLoading || allReports?.length < 1) return null;\n  return <Box ref={ref} className={s.root}>\n            <Button size='md' onClick={toggle} variant='default' loading={isLoading} disabled={isLoading} className={clsx(s.link, !isLoading && s.loaded)} rightSection={<CaretDown className={clsx(opened && s.rotate)} weight='bold' size='16' />}>\n                <Group className={s.buttonGroup}>\n                    <Pill hidden={isLoading} className={s.pill}>\n                        {allReports?.length}\n                    </Pill>\n                    Ваши отчеты\n                </Group>\n            </Button>\n            <Collapse className={s.collapse} in={opened} transitionTimingFunction='linear'>\n                <Box className={s.category}>\n                    <ReportGroupTemplate reports={freeReports} render={renderFreeReports} label='Бесплатные отчёты' />\n                    <ReportGroupTemplate reports={paidReports} render={renderPaidReports} label='Полные отчёты' />\n                    <ReportGroupTemplate reports={expressReports} render={renderExpressReports} label='Экспресс отчёты' />\n                    <Divider />\n                    <Button component='a' href={ROUTES.TEST} w='100%' my='sm' fz={14} size='md' variant='subtle' className={s.takeTestAgain} onClick={() => {\n          setSplashScreenVisibility(true);\n          closeAllModals(false);\n          toggle();\n        }} leftSection={<ArrowClockwise weight='bold' />}>\n                        Пройти тест заново\n                    </Button>\n                </Box>\n            </Collapse>\n        </Box>;\n};",
      "start": 1746125082586,
      "end": 1746125082588,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "Box",
          "Button",
          "Collapse",
          "Divider",
          "Group",
          "Pill",
          "useClickOutside",
          "useDisclosure",
          "ArrowClockwise",
          "CaretDown",
          "clsx",
          "useList",
          "useUnit",
          "ROUTES",
          "useIsLarge",
          "getSurveysInfoQuery",
          "ReportModel",
          "RootModel",
          "TestModel",
          "ReportGroupTemplate",
          "ReportTemplate",
          "s",
          "Reports",
          "opened",
          "toggle",
          "close",
          "isLarge",
          "ref",
          "pending",
          "stale",
          "allReports",
          "freeReports",
          "paidReports",
          "expressReports",
          "closeAllModals",
          "$allUserReports",
          "$freeUserReports",
          "$paidUserReports",
          "$expressUserReports",
          "allMenusClosed",
          "setSplashScreenVisibility",
          "isLoading",
          "renderFreeReports",
          "report",
          "renderPaidReports",
          "renderExpressReports",
          "length",
          "root",
          "link",
          "loaded",
          "rotate",
          "buttonGroup",
          "pill",
          "collapse",
          "category",
          "TEST",
          "takeTestAgain"
        ],
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/RootLayout/ui/Navigation/Reports/index.tsx"
        ],
        "sourcesContent": [
          "import { Box, Button, Collapse, Divider, Group, Pill } from '@mantine/core';\nimport { useClickOutside, useDisclosure } from '@mantine/hooks';\nimport { ArrowClockwise, CaretDown } from '@phosphor-icons/react/dist/ssr';\nimport clsx from 'clsx';\nimport { useList, useUnit } from 'effector-react';\n\nimport { ROUTES } from '@/shared/config';\nimport { useIsLarge } from '@/shared/lib';\n\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\nimport { RootModel } from '@/entities/Root';\nimport { TestModel } from '@/entities/Test';\n\nimport { ReportGroupTemplate } from './ReportGroupTemplate';\nimport { ReportTemplate } from './ReportTemplate';\n\nimport s from './Reports.module.css';\n\nexport const Reports = () => {\n    const [opened, { toggle, close }] = useDisclosure(false);\n    const isLarge = useIsLarge();\n\n    const ref = useClickOutside(() => isLarge && close());\n\n    const { pending, stale } = useUnit(getSurveysInfoQuery);\n    const [allReports, freeReports, paidReports, expressReports, closeAllModals] = useUnit([\n        ReportModel.$allUserReports,\n        ReportModel.$freeUserReports,\n        ReportModel.$paidUserReports,\n        ReportModel.$expressUserReports,\n        RootModel.allMenusClosed,\n    ]);\n    const [setSplashScreenVisibility] = useUnit([TestModel.setSplashScreenVisibility]);\n\n    const isLoading = pending || stale;\n    const renderFreeReports = useList(ReportModel.$freeUserReports, (report) => (\n        <ReportTemplate onClose={close} {...report} />\n    ));\n    const renderPaidReports = useList(ReportModel.$paidUserReports, (report) => (\n        <ReportTemplate onClose={close} {...report} />\n    ));\n    const renderExpressReports = useList(ReportModel.$expressUserReports, (report) => (\n        <ReportTemplate onClose={close} {...report} />\n    ));\n\n    if (isLoading || allReports?.length < 1) return null;\n\n    return (\n        <Box ref={ref} className={s.root}>\n            <Button\n                size='md'\n                onClick={toggle}\n                variant='default'\n                loading={isLoading}\n                disabled={isLoading}\n                className={clsx(s.link, !isLoading && s.loaded)}\n                rightSection={<CaretDown className={clsx(opened && s.rotate)} weight='bold' size='16' />}\n            >\n                <Group className={s.buttonGroup}>\n                    <Pill hidden={isLoading} className={s.pill}>\n                        {allReports?.length}\n                    </Pill>\n                    Ваши отчеты\n                </Group>\n            </Button>\n            <Collapse className={s.collapse} in={opened} transitionTimingFunction='linear'>\n                <Box className={s.category}>\n                    <ReportGroupTemplate reports={freeReports} render={renderFreeReports} label='Бесплатные отчёты' />\n                    <ReportGroupTemplate reports={paidReports} render={renderPaidReports} label='Полные отчёты' />\n                    <ReportGroupTemplate\n                        reports={expressReports}\n                        render={renderExpressReports}\n                        label='Экспресс отчёты'\n                    />\n                    <Divider />\n                    <Button\n                        component='a'\n                        href={ROUTES.TEST}\n                        w='100%'\n                        my='sm'\n                        fz={14}\n                        size='md'\n                        variant='subtle'\n                        className={s.takeTestAgain}\n                        onClick={() => {\n                            setSplashScreenVisibility(true);\n                            closeAllModals(false);\n                            toggle();\n                        }}\n                        leftSection={<ArrowClockwise weight='bold' />}\n                    >\n                        Пройти тест заново\n                    </Button>\n                </Box>\n            </Collapse>\n        </Box>\n    );\n};\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Box, Button, Collapse, Divider, Group, Pill } from \"@mantine/core\";\nimport { useClickOutside, useDisclosure } from \"@mantine/hooks\";\nimport { ArrowClockwise, CaretDown } from \"@phosphor-icons/react/dist/ssr\";\nimport clsx from \"clsx\";\nimport { useList, useUnit } from \"effector-react\";\nimport { ROUTES } from \"@/shared/config\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { getSurveysInfoQuery, ReportModel } from \"@/entities/Report\";\nimport { RootModel } from \"@/entities/Root\";\nimport { TestModel } from \"@/entities/Test\";\nimport { ReportGroupTemplate } from \"./ReportGroupTemplate\";\nimport { ReportTemplate } from \"./ReportTemplate\";\nimport s from \"./Reports.module.css\";\nexport const Reports = () => {\n  const [opened, {\n    toggle,\n    close\n  }] = useDisclosure(false);\n  const isLarge = useIsLarge();\n  const ref = useClickOutside(() => isLarge && close());\n  const {\n    pending,\n    stale\n  } = useUnit(getSurveysInfoQuery);\n  const [allReports, freeReports, paidReports, expressReports, closeAllModals] = useUnit([ReportModel.$allUserReports, ReportModel.$freeUserReports, ReportModel.$paidUserReports, ReportModel.$expressUserReports, RootModel.allMenusClosed]);\n  const [setSplashScreenVisibility] = useUnit([TestModel.setSplashScreenVisibility]);\n  const isLoading = pending || stale;\n  const renderFreeReports = useList(ReportModel.$freeUserReports, (report) => /* @__PURE__ */ jsx(ReportTemplate, { onClose: close, ...report }));\n  const renderPaidReports = useList(ReportModel.$paidUserReports, (report) => /* @__PURE__ */ jsx(ReportTemplate, { onClose: close, ...report }));\n  const renderExpressReports = useList(ReportModel.$expressUserReports, (report) => /* @__PURE__ */ jsx(ReportTemplate, { onClose: close, ...report }));\n  if (isLoading || allReports?.length < 1) return null;\n  return /* @__PURE__ */ jsxs(Box, { ref, className: s.root, children: [\n    /* @__PURE__ */ jsx(Button, { size: \"md\", onClick: toggle, variant: \"default\", loading: isLoading, disabled: isLoading, className: clsx(s.link, !isLoading && s.loaded), rightSection: /* @__PURE__ */ jsx(CaretDown, { className: clsx(opened && s.rotate), weight: \"bold\", size: \"16\" }), children: /* @__PURE__ */ jsxs(Group, { className: s.buttonGroup, children: [\n      /* @__PURE__ */ jsx(Pill, { hidden: isLoading, className: s.pill, children: allReports?.length }),\n      \"Ваши отчеты\"\n    ] }) }),\n    /* @__PURE__ */ jsx(Collapse, { className: s.collapse, in: opened, transitionTimingFunction: \"linear\", children: /* @__PURE__ */ jsxs(Box, { className: s.category, children: [\n      /* @__PURE__ */ jsx(ReportGroupTemplate, { reports: freeReports, render: renderFreeReports, label: \"Бесплатные отчёты\" }),\n      /* @__PURE__ */ jsx(ReportGroupTemplate, { reports: paidReports, render: renderPaidReports, label: \"Полные отчёты\" }),\n      /* @__PURE__ */ jsx(ReportGroupTemplate, { reports: expressReports, render: renderExpressReports, label: \"Экспресс отчёты\" }),\n      /* @__PURE__ */ jsx(Divider, {}),\n      /* @__PURE__ */ jsx(Button, { component: \"a\", href: ROUTES.TEST, w: \"100%\", my: \"sm\", fz: 14, size: \"md\", variant: \"subtle\", className: s.takeTestAgain, onClick: () => {\n        setSplashScreenVisibility(true);\n        closeAllModals(false);\n        toggle();\n      }, leftSection: /* @__PURE__ */ jsx(ArrowClockwise, { weight: \"bold\" }), children: \"Пройти тест заново\" })\n    ] }) })\n  ] });\n};\n",
      "start": 1746125082588,
      "end": 1746125082610,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/RootLayout/ui/Navigation/Reports/index.tsx"
        ],
        "sourcesContent": [
          "import { Box, Button, Collapse, Divider, Group, Pill } from '@mantine/core';\nimport { useClickOutside, useDisclosure } from '@mantine/hooks';\nimport { ArrowClockwise, CaretDown } from '@phosphor-icons/react/dist/ssr';\nimport clsx from 'clsx';\nimport { useList, useUnit } from 'effector-react';\nimport { ROUTES } from '@/shared/config';\nimport { useIsLarge } from '@/shared/lib';\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\nimport { RootModel } from '@/entities/Root';\nimport { TestModel } from '@/entities/Test';\nimport { ReportGroupTemplate } from './ReportGroupTemplate';\nimport { ReportTemplate } from './ReportTemplate';\nimport s from './Reports.module.css';\nexport const Reports = () => {\n  const [opened, {\n    toggle,\n    close\n  }] = useDisclosure(false);\n  const isLarge = useIsLarge();\n  const ref = useClickOutside(() => isLarge && close());\n  const {\n    pending,\n    stale\n  } = useUnit(getSurveysInfoQuery);\n  const [allReports, freeReports, paidReports, expressReports, closeAllModals] = useUnit([ReportModel.$allUserReports, ReportModel.$freeUserReports, ReportModel.$paidUserReports, ReportModel.$expressUserReports, RootModel.allMenusClosed]);\n  const [setSplashScreenVisibility] = useUnit([TestModel.setSplashScreenVisibility]);\n  const isLoading = pending || stale;\n  const renderFreeReports = useList(ReportModel.$freeUserReports, report => <ReportTemplate onClose={close} {...report} />);\n  const renderPaidReports = useList(ReportModel.$paidUserReports, report => <ReportTemplate onClose={close} {...report} />);\n  const renderExpressReports = useList(ReportModel.$expressUserReports, report => <ReportTemplate onClose={close} {...report} />);\n  if (isLoading || allReports?.length < 1) return null;\n  return <Box ref={ref} className={s.root}>\n            <Button size='md' onClick={toggle} variant='default' loading={isLoading} disabled={isLoading} className={clsx(s.link, !isLoading && s.loaded)} rightSection={<CaretDown className={clsx(opened && s.rotate)} weight='bold' size='16' />}>\n                <Group className={s.buttonGroup}>\n                    <Pill hidden={isLoading} className={s.pill}>\n                        {allReports?.length}\n                    </Pill>\n                    Ваши отчеты\n                </Group>\n            </Button>\n            <Collapse className={s.collapse} in={opened} transitionTimingFunction='linear'>\n                <Box className={s.category}>\n                    <ReportGroupTemplate reports={freeReports} render={renderFreeReports} label='Бесплатные отчёты' />\n                    <ReportGroupTemplate reports={paidReports} render={renderPaidReports} label='Полные отчёты' />\n                    <ReportGroupTemplate reports={expressReports} render={renderExpressReports} label='Экспресс отчёты' />\n                    <Divider />\n                    <Button component='a' href={ROUTES.TEST} w='100%' my='sm' fz={14} size='md' variant='subtle' className={s.takeTestAgain} onClick={() => {\n          setSplashScreenVisibility(true);\n          closeAllModals(false);\n          toggle();\n        }} leftSection={<ArrowClockwise weight='bold' />}>\n                        Пройти тест заново\n                    </Button>\n                </Box>\n            </Collapse>\n        </Box>;\n};"
        ],
        "mappings": "AA2B4E,cAM5D,YAN4D;AA3B5E,SAAS,KAAK,QAAQ,UAAU,SAAS,OAAO,YAAY;AAC5D,SAAS,iBAAiB,qBAAqB;AAC/C,SAAS,gBAAgB,iBAAiB;AAC1C,OAAO,UAAU;AACjB,SAAS,SAAS,eAAe;AACjC,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAC3B,SAAS,qBAAqB,mBAAmB;AACjD,SAAS,iBAAiB;AAC1B,SAAS,iBAAiB;AAC1B,SAAS,2BAA2B;AACpC,SAAS,sBAAsB;AAC/B,OAAO,OAAO;AACP,aAAM,UAAU,MAAM;AAC3B,QAAM,CAAC,QAAQ;AAAA,IACb;AAAA,IACA;AAAA,EACF,CAAC,IAAI,cAAc,KAAK;AACxB,QAAM,UAAU,WAAW;AAC3B,QAAM,MAAM,gBAAgB,MAAM,WAAW,MAAM,CAAC;AACpD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,QAAQ,mBAAmB;AAC/B,QAAM,CAAC,YAAY,aAAa,aAAa,gBAAgB,cAAc,IAAI,QAAQ,CAAC,YAAY,iBAAiB,YAAY,kBAAkB,YAAY,kBAAkB,YAAY,qBAAqB,UAAU,cAAc,CAAC;AAC3O,QAAM,CAAC,yBAAyB,IAAI,QAAQ,CAAC,UAAU,yBAAyB,CAAC;AACjF,QAAM,YAAY,WAAW;AAC7B,QAAM,oBAAoB,QAAQ,YAAY,kBAAkB,YAAU,oBAAC,kBAAe,SAAS,OAAQ,GAAG,QAAQ,CAAE;AACxH,QAAM,oBAAoB,QAAQ,YAAY,kBAAkB,YAAU,oBAAC,kBAAe,SAAS,OAAQ,GAAG,QAAQ,CAAE;AACxH,QAAM,uBAAuB,QAAQ,YAAY,qBAAqB,YAAU,oBAAC,kBAAe,SAAS,OAAQ,GAAG,QAAQ,CAAE;AAC9H,MAAI,aAAa,YAAY,SAAS,EAAG,QAAO;AAChD,SAAO,qBAAC,OAAI,KAAU,WAAW,EAAE,MACzB;AAAA,wBAAC,UAAO,MAAK,MAAK,SAAS,QAAQ,SAAQ,WAAU,SAAS,WAAW,UAAU,WAAW,WAAW,KAAK,EAAE,MAAM,CAAC,aAAa,EAAE,MAAM,GAAG,cAAc,oBAAC,aAAU,WAAW,KAAK,UAAU,EAAE,MAAM,GAAG,QAAO,QAAO,MAAK,MAAK,GACjO,+BAAC,SAAM,WAAW,EAAE,aAChB;AAAA,0BAAC,QAAK,QAAQ,WAAW,WAAW,EAAE,MACjC,sBAAY,QACjB;AAAA,MAAO;AAAA,OAEX,GACJ;AAAA,IACA,oBAAC,YAAS,WAAW,EAAE,UAAU,IAAI,QAAQ,0BAAyB,UAClE,+BAAC,OAAI,WAAW,EAAE,UACd;AAAA,0BAAC,uBAAoB,SAAS,aAAa,QAAQ,mBAAmB,OAAM,qBAAoB;AAAA,MAChG,oBAAC,uBAAoB,SAAS,aAAa,QAAQ,mBAAmB,OAAM,iBAAgB;AAAA,MAC5F,oBAAC,uBAAoB,SAAS,gBAAgB,QAAQ,sBAAsB,OAAM,mBAAkB;AAAA,MACpG,oBAAC,WAAQ;AAAA,MACT,oBAAC,UAAO,WAAU,KAAI,MAAM,OAAO,MAAM,GAAE,QAAO,IAAG,MAAK,IAAI,IAAI,MAAK,MAAK,SAAQ,UAAS,WAAW,EAAE,eAAe,SAAS,MAAM;AAClJ,kCAA0B,IAAI;AAC9B,uBAAe,KAAK;AACpB,eAAO;AAAA,MACT,GAAG,aAAa,oBAAC,kBAAe,QAAO,QAAO,GAAI,gCAEtC;AAAA,OACJ,GACJ;AAAA,KACJ;AACR;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125082610,
      "end": 1746125082610,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/widgets/RootLayout/ui/Navigation/Reports/index.tsx [vike:pluginModuleBanner] */\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Box, Button, Collapse, Divider, Group, Pill } from \"@mantine/core\";\nimport { useClickOutside, useDisclosure } from \"@mantine/hooks\";\nimport { ArrowClockwise, CaretDown } from \"@phosphor-icons/react/dist/ssr\";\nimport clsx from \"clsx\";\nimport { useList, useUnit } from \"effector-react\";\nimport { ROUTES } from \"@/shared/config\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { getSurveysInfoQuery, ReportModel } from \"@/entities/Report\";\nimport { RootModel } from \"@/entities/Root\";\nimport { TestModel } from \"@/entities/Test\";\nimport { ReportGroupTemplate } from \"./ReportGroupTemplate\";\nimport { ReportTemplate } from \"./ReportTemplate\";\nimport s from \"./Reports.module.css\";\nexport const Reports = () => {\n  const [opened, {\n    toggle,\n    close\n  }] = useDisclosure(false);\n  const isLarge = useIsLarge();\n  const ref = useClickOutside(() => isLarge && close());\n  const {\n    pending,\n    stale\n  } = useUnit(getSurveysInfoQuery);\n  const [allReports, freeReports, paidReports, expressReports, closeAllModals] = useUnit([ReportModel.$allUserReports, ReportModel.$freeUserReports, ReportModel.$paidUserReports, ReportModel.$expressUserReports, RootModel.allMenusClosed]);\n  const [setSplashScreenVisibility] = useUnit([TestModel.setSplashScreenVisibility]);\n  const isLoading = pending || stale;\n  const renderFreeReports = useList(ReportModel.$freeUserReports, (report) => /* @__PURE__ */ jsx(ReportTemplate, { onClose: close, ...report }));\n  const renderPaidReports = useList(ReportModel.$paidUserReports, (report) => /* @__PURE__ */ jsx(ReportTemplate, { onClose: close, ...report }));\n  const renderExpressReports = useList(ReportModel.$expressUserReports, (report) => /* @__PURE__ */ jsx(ReportTemplate, { onClose: close, ...report }));\n  if (isLoading || allReports?.length < 1) return null;\n  return /* @__PURE__ */ jsxs(Box, { ref, className: s.root, children: [\n    /* @__PURE__ */ jsx(Button, { size: \"md\", onClick: toggle, variant: \"default\", loading: isLoading, disabled: isLoading, className: clsx(s.link, !isLoading && s.loaded), rightSection: /* @__PURE__ */ jsx(CaretDown, { className: clsx(opened && s.rotate), weight: \"bold\", size: \"16\" }), children: /* @__PURE__ */ jsxs(Group, { className: s.buttonGroup, children: [\n      /* @__PURE__ */ jsx(Pill, { hidden: isLoading, className: s.pill, children: allReports?.length }),\n      \"Ваши отчеты\"\n    ] }) }),\n    /* @__PURE__ */ jsx(Collapse, { className: s.collapse, in: opened, transitionTimingFunction: \"linear\", children: /* @__PURE__ */ jsxs(Box, { className: s.category, children: [\n      /* @__PURE__ */ jsx(ReportGroupTemplate, { reports: freeReports, render: renderFreeReports, label: \"Бесплатные отчёты\" }),\n      /* @__PURE__ */ jsx(ReportGroupTemplate, { reports: paidReports, render: renderPaidReports, label: \"Полные отчёты\" }),\n      /* @__PURE__ */ jsx(ReportGroupTemplate, { reports: expressReports, render: renderExpressReports, label: \"Экспресс отчёты\" }),\n      /* @__PURE__ */ jsx(Divider, {}),\n      /* @__PURE__ */ jsx(Button, { component: \"a\", href: ROUTES.TEST, w: \"100%\", my: \"sm\", fz: 14, size: \"md\", variant: \"subtle\", className: s.takeTestAgain, onClick: () => {\n        setSplashScreenVisibility(true);\n        closeAllModals(false);\n        toggle();\n      }, leftSection: /* @__PURE__ */ jsx(ArrowClockwise, { weight: \"bold\" }), children: \"Пройти тест заново\" })\n    ] }) })\n  ] });\n};\n",
      "start": 1746125082611,
      "end": 1746125082611,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/widgets/RootLayout/ui/Navigation/Reports/index.tsx"],
        "names": [],
        "mappingsvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpjJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjvJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5W,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACllnI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9K,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACh
      }
    }
  ]
}
