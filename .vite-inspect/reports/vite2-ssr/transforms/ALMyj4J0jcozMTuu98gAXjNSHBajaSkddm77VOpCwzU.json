{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { createGate } from 'effector-react';\nimport { persist } from 'effector-storage/local';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\n\nimport { getFreeResultQuery, getSurveysInfoQuery } from '../api';\nimport { $currentContentPage, $currentPage, $isFirstPage, $isLastPage } from './content';\nimport { $userOrder, $userOrderStatus } from './order';\nimport { $reportContent } from './reportContent';\nimport {\n    $allUserReports,\n    $expressUserReports,\n    $freeUserReports,\n    $isUserHasFreeReport,\n    $lastUserFreeReport,\n    $paidUserReports,\n} from './userReports';\n\nexport const ReportModel = atom(() => {\n    const ReportGate = createGate();\n    const FreeReportGate = createGate();\n    const $currentReportId = createStore<string | null>(null);\n    sample({\n        clock: delay(ReportGate.open, 500),\n        source: getSurveysInfoQuery.$data,\n        filter: (data) => data === null,\n        fn: noop,\n        target: getSurveysInfoQuery.refresh,\n    });\n\n    const ReportPageGate = createGate();\n    persist({\n        store: $currentPage,\n        pickup: ReportPageGate.open,\n    });\n    persist({\n        store: $currentContentPage,\n        pickup: ReportPageGate.open,\n    });\n    $currentContentPage.reset(ReportPageGate.close);\n    $currentPage.reset(ReportPageGate.close);\n\n    const currentPageChanged = createEvent<number>();\n\n    createAction({\n        clock: currentPageChanged,\n        target: {\n            $currentContentPage,\n            $currentPage,\n        },\n        fn: (target, clock) => {\n            target.$currentPage(clock);\n            target.$currentContentPage(clock - 1);\n        },\n    });\n\n    const $userMbtiTypes = createStore<Record<string, string>[]>([]);\n\n    sample({\n        clock: getSurveysInfoQuery.finished.success,\n        fn: ({ result }) =>\n            result?.reports.map((report) => ({\n                [report.user_report]: report.mbti_type,\n            })) ?? [],\n        target: $userMbtiTypes,\n    });\n\n    sample({\n        clock: [$currentReportId, FreeReportGate.open],\n        source: $currentReportId,\n        filter: (reportId) =>\n            getFreeResultQuery.$data === null &&\n            reportId !== null &&\n            window.location.pathname.includes('/free-report/'),\n        fn: (id) => ({ id: id ?? '' }),\n        target: getFreeResultQuery.refresh,\n    });\n\n    return {\n        ReportGate,\n        $isUserHasFreeReport,\n        $lastUserFreeReport,\n        $allUserReports,\n        $freeUserReports,\n        $paidUserReports,\n        $expressUserReports,\n        $reportContent,\n        $userOrder,\n        $userOrderStatus,\n        $isFirstPage,\n        $isLastPage,\n        $currentContentPage,\n        currentPageChanged,\n        $userMbtiTypes,\n        ReportPageGate,\n        $currentPage,\n        FreeReportGate,\n        $currentReportId,\n    };\n});\n",
      "start": 1746125696175,
      "end": 1746125696226,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { createGate } from 'effector-react';\nimport { persist } from 'effector-storage/local';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\nimport { getFreeResultQuery, getSurveysInfoQuery } from '../api';\nimport { $currentContentPage, $currentPage, $isFirstPage, $isLastPage } from './content';\nimport { $userOrder, $userOrderStatus } from './order';\nimport { $reportContent } from './reportContent';\nimport { $allUserReports, $expressUserReports, $freeUserReports, $isUserHasFreeReport, $lastUserFreeReport, $paidUserReports } from './userReports';\nexport const ReportModel = atom(() => {\n  const ReportGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportGate\",\n      sid: \"n92l44\"\n    }\n  });\n  const FreeReportGate = createGate({\n    and: [],\n    or: {\n      name: \"FreeReportGate\",\n      sid: \"-2ljiq5\"\n    }\n  });\n  const $currentReportId = createStore<string | null>(null, {\n    name: \"$currentReportId\",\n    sid: \"-ko2ug9\"\n  });\n  sample({\n    and: [{\n      clock: _withFactory({\n        sid: \"-nyvmz6\",\n        fn: () => delay(ReportGate.open, 500),\n        name: \"clock\",\n        method: \"delay\"\n      }),\n      source: getSurveysInfoQuery.$data,\n      filter: data => data === null,\n      fn: noop,\n      target: getSurveysInfoQuery.refresh\n    }],\n    or: {\n      sid: \"sdt4cl\"\n    }\n  });\n  const ReportPageGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportPageGate\",\n      sid: \"-4ua68f\"\n    }\n  });\n  persist({\n    store: $currentPage,\n    pickup: ReportPageGate.open\n  });\n  persist({\n    store: $currentContentPage,\n    pickup: ReportPageGate.open\n  });\n  $currentContentPage.reset(ReportPageGate.close);\n  $currentPage.reset(ReportPageGate.close);\n  const currentPageChanged = createEvent<number>({\n    name: \"currentPageChanged\",\n    sid: \"-i1ryh3\"\n  });\n  createAction({\n    clock: currentPageChanged,\n    target: {\n      $currentContentPage,\n      $currentPage\n    },\n    fn: (target, clock) => {\n      target.$currentPage(clock);\n      target.$currentContentPage(clock - 1);\n    }\n  });\n  const $userMbtiTypes = createStore<Record<string, string>[]>([], {\n    name: \"$userMbtiTypes\",\n    sid: \"83741y\"\n  });\n  sample({\n    and: [{\n      clock: getSurveysInfoQuery.finished.success,\n      fn: ({\n        result\n      }) => result?.reports.map(report => ({\n        [report.user_report]: report.mbti_type\n      })) ?? [],\n      target: $userMbtiTypes\n    }],\n    or: {\n      sid: \"u7sfjx\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentReportId, FreeReportGate.open],\n      source: $currentReportId,\n      filter: reportId => getFreeResultQuery.$data === null && reportId !== null && window.location.pathname.includes('/free-report/'),\n      fn: id => ({\n        id: id ?? ''\n      }),\n      target: getFreeResultQuery.refresh\n    }],\n    or: {\n      sid: \"uoa9cr\"\n    }\n  });\n  return {\n    ReportGate,\n    $isUserHasFreeReport,\n    $lastUserFreeReport,\n    $allUserReports,\n    $freeUserReports,\n    $paidUserReports,\n    $expressUserReports,\n    $reportContent,\n    $userOrder,\n    $userOrderStatus,\n    $isFirstPage,\n    $isLastPage,\n    $currentContentPage,\n    currentPageChanged,\n    $userMbtiTypes,\n    ReportPageGate,\n    $currentPage,\n    FreeReportGate,\n    $currentReportId\n  };\n});",
      "start": 1746125696226,
      "end": 1746125696229,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createEvent",
          "createStore",
          "sample",
          "createAction",
          "createGate",
          "persist",
          "delay",
          "atom",
          "noop",
          "getFreeResultQuery",
          "getSurveysInfoQuery",
          "$currentContentPage",
          "$currentPage",
          "$isFirstPage",
          "$isLastPage",
          "$userOrder",
          "$userOrderStatus",
          "$reportContent",
          "$allUserReports",
          "$expressUserReports",
          "$freeUserReports",
          "$isUserHasFreeReport",
          "$lastUserFreeReport",
          "$paidUserReports",
          "ReportModel",
          "ReportGate",
          "and",
          "or",
          "name",
          "sid",
          "FreeReportGate",
          "$currentReportId",
          "clock",
          "_withFactory",
          "\"-nyvmz6\"",
          "fn",
          "open",
          "\"clock\"",
          "method",
          "\"delay\"",
          "source",
          "$data",
          "filter",
          "data",
          "target",
          "refresh",
          "ReportPageGate",
          "store",
          "pickup",
          "reset",
          "close",
          "currentPageChanged",
          "$userMbtiTypes",
          "Record",
          "finished",
          "success",
          "result",
          "reports",
          "map",
          "report",
          "user_report",
          "mbti_type",
          "reportId",
          "window",
          "location",
          "pathname",
          "includes",
          "id"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/index.ts"],
        "sourcesContent": [
          "import { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { createGate } from 'effector-react';\nimport { persist } from 'effector-storage/local';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\n\nimport { getFreeResultQuery, getSurveysInfoQuery } from '../api';\nimport { $currentContentPage, $currentPage, $isFirstPage, $isLastPage } from './content';\nimport { $userOrder, $userOrderStatus } from './order';\nimport { $reportContent } from './reportContent';\nimport {\n    $allUserReports,\n    $expressUserReports,\n    $freeUserReports,\n    $isUserHasFreeReport,\n    $lastUserFreeReport,\n    $paidUserReports,\n} from './userReports';\n\nexport const ReportModel = atom(() => {\n    const ReportGate = createGate();\n    const FreeReportGate = createGate();\n    const $currentReportId = createStore<string | null>(null);\n    sample({\n        clock: delay(ReportGate.open, 500),\n        source: getSurveysInfoQuery.$data,\n        filter: (data) => data === null,\n        fn: noop,\n        target: getSurveysInfoQuery.refresh,\n    });\n\n    const ReportPageGate = createGate();\n    persist({\n        store: $currentPage,\n        pickup: ReportPageGate.open,\n    });\n    persist({\n        store: $currentContentPage,\n        pickup: ReportPageGate.open,\n    });\n    $currentContentPage.reset(ReportPageGate.close);\n    $currentPage.reset(ReportPageGate.close);\n\n    const currentPageChanged = createEvent<number>();\n\n    createAction({\n        clock: currentPageChanged,\n        target: {\n            $currentContentPage,\n            $currentPage,\n        },\n        fn: (target, clock) => {\n            target.$currentPage(clock);\n            target.$currentContentPage(clock - 1);\n        },\n    });\n\n    const $userMbtiTypes = createStore<Record<string, string>[]>([]);\n\n    sample({\n        clock: getSurveysInfoQuery.finished.success,\n        fn: ({ result }) =>\n            result?.reports.map((report) => ({\n                [report.user_report]: report.mbti_type,\n            })) ?? [],\n        target: $userMbtiTypes,\n    });\n\n    sample({\n        clock: [$currentReportId, FreeReportGate.open],\n        source: $currentReportId,\n        filter: (reportId) =>\n            getFreeResultQuery.$data === null &&\n            reportId !== null &&\n            window.location.pathname.includes('/free-report/'),\n        fn: (id) => ({ id: id ?? '' }),\n        target: getFreeResultQuery.refresh,\n    });\n\n    return {\n        ReportGate,\n        $isUserHasFreeReport,\n        $lastUserFreeReport,\n        $allUserReports,\n        $freeUserReports,\n        $paidUserReports,\n        $expressUserReports,\n        $reportContent,\n        $userOrder,\n        $userOrderStatus,\n        $isFirstPage,\n        $isLastPage,\n        $currentContentPage,\n        currentPageChanged,\n        $userMbtiTypes,\n        ReportPageGate,\n        $currentPage,\n        FreeReportGate,\n        $currentReportId,\n    };\n});\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, sample } from \"effector\";\nimport { createAction } from \"effector-action\";\nimport { createGate } from \"effector-react\";\nimport { persist } from \"effector-storage/local\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { noop } from \"@/shared/lib\";\nimport { getFreeResultQuery, getSurveysInfoQuery } from \"../api\";\nimport { $currentContentPage, $currentPage, $isFirstPage, $isLastPage } from \"./content\";\nimport { $userOrder, $userOrderStatus } from \"./order\";\nimport { $reportContent } from \"./reportContent\";\nimport { $allUserReports, $expressUserReports, $freeUserReports, $isUserHasFreeReport, $lastUserFreeReport, $paidUserReports } from \"./userReports\";\nexport const ReportModel = atom(() => {\n  const ReportGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportGate\",\n      sid: \"n92l44\"\n    }\n  });\n  const FreeReportGate = createGate({\n    and: [],\n    or: {\n      name: \"FreeReportGate\",\n      sid: \"-2ljiq5\"\n    }\n  });\n  const $currentReportId = createStore(null, {\n    name: \"$currentReportId\",\n    sid: \"-ko2ug9\"\n  });\n  sample({\n    and: [{\n      clock: _withFactory({\n        sid: \"-nyvmz6\",\n        fn: () => delay(ReportGate.open, 500),\n        name: \"clock\",\n        method: \"delay\"\n      }),\n      source: getSurveysInfoQuery.$data,\n      filter: (data) => data === null,\n      fn: noop,\n      target: getSurveysInfoQuery.refresh\n    }],\n    or: {\n      sid: \"sdt4cl\"\n    }\n  });\n  const ReportPageGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportPageGate\",\n      sid: \"-4ua68f\"\n    }\n  });\n  persist({\n    store: $currentPage,\n    pickup: ReportPageGate.open\n  });\n  persist({\n    store: $currentContentPage,\n    pickup: ReportPageGate.open\n  });\n  $currentContentPage.reset(ReportPageGate.close);\n  $currentPage.reset(ReportPageGate.close);\n  const currentPageChanged = createEvent({\n    name: \"currentPageChanged\",\n    sid: \"-i1ryh3\"\n  });\n  createAction({\n    clock: currentPageChanged,\n    target: {\n      $currentContentPage,\n      $currentPage\n    },\n    fn: (target, clock) => {\n      target.$currentPage(clock);\n      target.$currentContentPage(clock - 1);\n    }\n  });\n  const $userMbtiTypes = createStore([], {\n    name: \"$userMbtiTypes\",\n    sid: \"83741y\"\n  });\n  sample({\n    and: [{\n      clock: getSurveysInfoQuery.finished.success,\n      fn: ({\n        result\n      }) => result?.reports.map((report) => ({\n        [report.user_report]: report.mbti_type\n      })) ?? [],\n      target: $userMbtiTypes\n    }],\n    or: {\n      sid: \"u7sfjx\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentReportId, FreeReportGate.open],\n      source: $currentReportId,\n      filter: (reportId) => getFreeResultQuery.$data === null && reportId !== null && window.location.pathname.includes(\"/free-report/\"),\n      fn: (id) => ({\n        id: id ?? \"\"\n      }),\n      target: getFreeResultQuery.refresh\n    }],\n    or: {\n      sid: \"uoa9cr\"\n    }\n  });\n  return {\n    ReportGate,\n    $isUserHasFreeReport,\n    $lastUserFreeReport,\n    $allUserReports,\n    $freeUserReports,\n    $paidUserReports,\n    $expressUserReports,\n    $reportContent,\n    $userOrder,\n    $userOrderStatus,\n    $isFirstPage,\n    $isLastPage,\n    $currentContentPage,\n    currentPageChanged,\n    $userMbtiTypes,\n    ReportPageGate,\n    $currentPage,\n    FreeReportGate,\n    $currentReportId\n  };\n});\n",
      "start": 1746125696229,
      "end": 1746125696350,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/index.ts"],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { createGate } from 'effector-react';\nimport { persist } from 'effector-storage/local';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\nimport { getFreeResultQuery, getSurveysInfoQuery } from '../api';\nimport { $currentContentPage, $currentPage, $isFirstPage, $isLastPage } from './content';\nimport { $userOrder, $userOrderStatus } from './order';\nimport { $reportContent } from './reportContent';\nimport { $allUserReports, $expressUserReports, $freeUserReports, $isUserHasFreeReport, $lastUserFreeReport, $paidUserReports } from './userReports';\nexport const ReportModel = atom(() => {\n  const ReportGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportGate\",\n      sid: \"n92l44\"\n    }\n  });\n  const FreeReportGate = createGate({\n    and: [],\n    or: {\n      name: \"FreeReportGate\",\n      sid: \"-2ljiq5\"\n    }\n  });\n  const $currentReportId = createStore<string | null>(null, {\n    name: \"$currentReportId\",\n    sid: \"-ko2ug9\"\n  });\n  sample({\n    and: [{\n      clock: _withFactory({\n        sid: \"-nyvmz6\",\n        fn: () => delay(ReportGate.open, 500),\n        name: \"clock\",\n        method: \"delay\"\n      }),\n      source: getSurveysInfoQuery.$data,\n      filter: data => data === null,\n      fn: noop,\n      target: getSurveysInfoQuery.refresh\n    }],\n    or: {\n      sid: \"sdt4cl\"\n    }\n  });\n  const ReportPageGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportPageGate\",\n      sid: \"-4ua68f\"\n    }\n  });\n  persist({\n    store: $currentPage,\n    pickup: ReportPageGate.open\n  });\n  persist({\n    store: $currentContentPage,\n    pickup: ReportPageGate.open\n  });\n  $currentContentPage.reset(ReportPageGate.close);\n  $currentPage.reset(ReportPageGate.close);\n  const currentPageChanged = createEvent<number>({\n    name: \"currentPageChanged\",\n    sid: \"-i1ryh3\"\n  });\n  createAction({\n    clock: currentPageChanged,\n    target: {\n      $currentContentPage,\n      $currentPage\n    },\n    fn: (target, clock) => {\n      target.$currentPage(clock);\n      target.$currentContentPage(clock - 1);\n    }\n  });\n  const $userMbtiTypes = createStore<Record<string, string>[]>([], {\n    name: \"$userMbtiTypes\",\n    sid: \"83741y\"\n  });\n  sample({\n    and: [{\n      clock: getSurveysInfoQuery.finished.success,\n      fn: ({\n        result\n      }) => result?.reports.map(report => ({\n        [report.user_report]: report.mbti_type\n      })) ?? [],\n      target: $userMbtiTypes\n    }],\n    or: {\n      sid: \"u7sfjx\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentReportId, FreeReportGate.open],\n      source: $currentReportId,\n      filter: reportId => getFreeResultQuery.$data === null && reportId !== null && window.location.pathname.includes('/free-report/'),\n      fn: id => ({\n        id: id ?? ''\n      }),\n      target: getFreeResultQuery.refresh\n    }],\n    or: {\n      sid: \"uoa9cr\"\n    }\n  });\n  return {\n    ReportGate,\n    $isUserHasFreeReport,\n    $lastUserFreeReport,\n    $allUserReports,\n    $freeUserReports,\n    $paidUserReports,\n    $expressUserReports,\n    $reportContent,\n    $userOrder,\n    $userOrderStatus,\n    $isFirstPage,\n    $isLastPage,\n    $currentContentPage,\n    currentPageChanged,\n    $userMbtiTypes,\n    ReportPageGate,\n    $currentPage,\n    FreeReportGate,\n    $currentReportId\n  };\n});"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125696350,
      "end": 1746125696350,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125696350,
      "end": 1746125696350,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125696350,
      "end": 1746125696350,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125696350,
      "end": 1746125696350,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Report/model/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, sample } from \"effector\";\nimport { createAction } from \"effector-action\";\nimport { createGate } from \"effector-react\";\nimport { persist } from \"effector-storage/local\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { noop } from \"@/shared/lib\";\nimport { getFreeResultQuery, getSurveysInfoQuery } from \"../api\";\nimport { $currentContentPage, $currentPage, $isFirstPage, $isLastPage } from \"./content\";\nimport { $userOrder, $userOrderStatus } from \"./order\";\nimport { $reportContent } from \"./reportContent\";\nimport { $allUserReports, $expressUserReports, $freeUserReports, $isUserHasFreeReport, $lastUserFreeReport, $paidUserReports } from \"./userReports\";\nexport const ReportModel = atom(() => {\n  const ReportGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportGate\",\n      sid: \"n92l44\"\n    }\n  });\n  const FreeReportGate = createGate({\n    and: [],\n    or: {\n      name: \"FreeReportGate\",\n      sid: \"-2ljiq5\"\n    }\n  });\n  const $currentReportId = createStore(null, {\n    name: \"$currentReportId\",\n    sid: \"-ko2ug9\"\n  });\n  sample({\n    and: [{\n      clock: _withFactory({\n        sid: \"-nyvmz6\",\n        fn: () => delay(ReportGate.open, 500),\n        name: \"clock\",\n        method: \"delay\"\n      }),\n      source: getSurveysInfoQuery.$data,\n      filter: (data) => data === null,\n      fn: noop,\n      target: getSurveysInfoQuery.refresh\n    }],\n    or: {\n      sid: \"sdt4cl\"\n    }\n  });\n  const ReportPageGate = createGate({\n    and: [],\n    or: {\n      name: \"ReportPageGate\",\n      sid: \"-4ua68f\"\n    }\n  });\n  persist({\n    store: $currentPage,\n    pickup: ReportPageGate.open\n  });\n  persist({\n    store: $currentContentPage,\n    pickup: ReportPageGate.open\n  });\n  $currentContentPage.reset(ReportPageGate.close);\n  $currentPage.reset(ReportPageGate.close);\n  const currentPageChanged = createEvent({\n    name: \"currentPageChanged\",\n    sid: \"-i1ryh3\"\n  });\n  createAction({\n    clock: currentPageChanged,\n    target: {\n      $currentContentPage,\n      $currentPage\n    },\n    fn: (target, clock) => {\n      target.$currentPage(clock);\n      target.$currentContentPage(clock - 1);\n    }\n  });\n  const $userMbtiTypes = createStore([], {\n    name: \"$userMbtiTypes\",\n    sid: \"83741y\"\n  });\n  sample({\n    and: [{\n      clock: getSurveysInfoQuery.finished.success,\n      fn: ({\n        result\n      }) => result?.reports.map((report) => ({\n        [report.user_report]: report.mbti_type\n      })) ?? [],\n      target: $userMbtiTypes\n    }],\n    or: {\n      sid: \"u7sfjx\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentReportId, FreeReportGate.open],\n      source: $currentReportId,\n      filter: (reportId) => getFreeResultQuery.$data === null && reportId !== null && window.location.pathname.includes(\"/free-report/\"),\n      fn: (id) => ({\n        id: id ?? \"\"\n      }),\n      target: getFreeResultQuery.refresh\n    }],\n    or: {\n      sid: \"uoa9cr\"\n    }\n  });\n  return {\n    ReportGate,\n    $isUserHasFreeReport,\n    $lastUserFreeReport,\n    $allUserReports,\n    $freeUserReports,\n    $paidUserReports,\n    $expressUserReports,\n    $reportContent,\n    $userOrder,\n    $userOrderStatus,\n    $isFirstPage,\n    $isLastPage,\n    $currentContentPage,\n    currentPageChanged,\n    $userMbtiTypes,\n    ReportPageGate,\n    $currentPage,\n    FreeReportGate,\n    $currentReportId\n  };\n});\n",
      "start": 1746125696351,
      "end": 1746125696351,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Report/model/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACthD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChnJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;"
      }
    }
  ]
}
