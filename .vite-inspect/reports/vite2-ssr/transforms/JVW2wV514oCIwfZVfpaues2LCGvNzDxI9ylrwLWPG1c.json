{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/FreeReportPage/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Fragment } from 'react';\nimport { Element } from 'react-scroll';\nimport { Box, Container, Stack, Title } from '@mantine/core';\nimport { useGate, useUnit } from 'effector-react';\n\nimport { InnerContainer, PageLoader } from '@/shared/ui';\n\nimport { contentResolver, getFreeResultQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nimport { UserModel } from '@/entities/User';\n\nimport { NavigateToReviewPage } from '@/features/NavigateToReviewPage';\nimport { SendReportEmail } from '@/features/SendReportEmail';\n\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { FreeReportNavigation } from '@/widgets/FreeReportNavigation';\n\nimport s from './FreeReportPage.module.css';\n\nexport const FreeReportPage = () => {\n    useGate(ReportModel.FreeReportGate);\n    const data = useUnit(getFreeResultQuery.$data);\n    const pending = useUnit(getFreeResultQuery.$pending);\n    const surveyId = useUnit(UserModel.$surveyId);\n\n    if (pending) return <PageLoader />;\n    if (!data) return null;\n\n    return (\n        <Box component='section'>\n            <Container>\n                <ReportHeader type={data?.mbti_type} name={data?.title} typeToColorMapper={TYPE_TO_COLOR_MAP} />\n                <SendReportEmail type='text' />\n                <FreeReportNavigation />\n                <InnerContainer>\n                    {data.content?.map((el, index) => (\n                        <Stack key={el.title + index} id={el.title} data-block mb={100}>\n                            <Element name={el.title} id={el.title} key={data?.title + el.title + index}>\n                                <Title mb='md'>{el.title}</Title>\n                                {el.content.map((currentEl, idx) => (\n                                    <Box className={s.block} key={currentEl.type + idx + index + 'content'}>\n                                        {currentEl.content.map((currentContent) => (\n                                            <Fragment key={currentContent.type + index + idx + 'currentContent'}>\n                                                {contentResolver({\n                                                    content: currentContent,\n                                                    color: TYPE_TO_COLOR_MAP[data.mbti_type],\n                                                    actions: {\n                                                        conclusion_paywall: CALL_TO_ACTION.takeTestAgainOrBuyReport,\n                                                    },\n                                                    surveyId: surveyId ?? '',\n                                                    index: index,\n                                                    mbti: data.mbti_type,\n                                                    slots: {\n                                                        subscribeEmail: <SendReportEmail type='block' />,\n                                                    },\n                                                })}\n                                            </Fragment>\n                                        ))}\n                                    </Box>\n                                ))}\n                            </Element>\n                        </Stack>\n                    ))}\n                </InnerContainer>\n                <NavigateToReviewPage />\n            </Container>\n        </Box>\n    );\n};\n",
      "start": 1746125696038,
      "end": 1746125696089,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { Fragment } from 'react';\nimport { Element } from 'react-scroll';\nimport { Box, Container, Stack, Title } from '@mantine/core';\nimport { useGate, useUnit } from 'effector-react';\nimport { InnerContainer, PageLoader } from '@/shared/ui';\nimport { contentResolver, getFreeResultQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nimport { UserModel } from '@/entities/User';\nimport { NavigateToReviewPage } from '@/features/NavigateToReviewPage';\nimport { SendReportEmail } from '@/features/SendReportEmail';\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { FreeReportNavigation } from '@/widgets/FreeReportNavigation';\nimport s from './FreeReportPage.module.css';\nexport const FreeReportPage = () => {\n  useGate(ReportModel.FreeReportGate);\n  const data = useUnit(getFreeResultQuery.$data);\n  const pending = useUnit(getFreeResultQuery.$pending);\n  const surveyId = useUnit(UserModel.$surveyId);\n  if (pending) return <PageLoader />;\n  if (!data) return null;\n  return <Box component='section'>\n            <Container>\n                <ReportHeader type={data?.mbti_type} name={data?.title} typeToColorMapper={TYPE_TO_COLOR_MAP} />\n                <SendReportEmail type='text' />\n                <FreeReportNavigation />\n                <InnerContainer>\n                    {data.content?.map((el, index) => <Stack key={el.title + index} id={el.title} data-block mb={100}>\n                            <Element name={el.title} id={el.title} key={data?.title + el.title + index}>\n                                <Title mb='md'>{el.title}</Title>\n                                {el.content.map((currentEl, idx) => <Box className={s.block} key={currentEl.type + idx + index + 'content'}>\n                                        {currentEl.content.map(currentContent => <Fragment key={currentContent.type + index + idx + 'currentContent'}>\n                                                {contentResolver({\n                  content: currentContent,\n                  color: TYPE_TO_COLOR_MAP[data.mbti_type],\n                  actions: {\n                    conclusion_paywall: CALL_TO_ACTION.takeTestAgainOrBuyReport\n                  },\n                  surveyId: surveyId ?? '',\n                  index: index,\n                  mbti: data.mbti_type,\n                  slots: {\n                    subscribeEmail: <SendReportEmail type='block' />\n                  }\n                })}\n                                            </Fragment>)}\n                                    </Box>)}\n                            </Element>\n                        </Stack>)}\n                </InnerContainer>\n                <NavigateToReviewPage />\n            </Container>\n        </Box>;\n};",
      "start": 1746125696089,
      "end": 1746125696091,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "Fragment",
          "Element",
          "Box",
          "Container",
          "Stack",
          "Title",
          "useGate",
          "useUnit",
          "InnerContainer",
          "PageLoader",
          "contentResolver",
          "getFreeResultQuery",
          "ReportHeader",
          "ReportModel",
          "TYPE_TO_COLOR_MAP",
          "UserModel",
          "NavigateToReviewPage",
          "SendReportEmail",
          "CALL_TO_ACTION",
          "FreeReportNavigation",
          "s",
          "FreeReportPage",
          "FreeReportGate",
          "data",
          "$data",
          "pending",
          "$pending",
          "surveyId",
          "$surveyId",
          "mbti_type",
          "title",
          "content",
          "map",
          "el",
          "index",
          "currentEl",
          "idx",
          "block",
          "type",
          "currentContent",
          "color",
          "actions",
          "conclusion_paywall",
          "takeTestAgainOrBuyReport",
          "mbti",
          "slots",
          "subscribeEmail"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/FreeReportPage/index.tsx"],
        "sourcesContent": [
          "import { Fragment } from 'react';\nimport { Element } from 'react-scroll';\nimport { Box, Container, Stack, Title } from '@mantine/core';\nimport { useGate, useUnit } from 'effector-react';\n\nimport { InnerContainer, PageLoader } from '@/shared/ui';\n\nimport { contentResolver, getFreeResultQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nimport { UserModel } from '@/entities/User';\n\nimport { NavigateToReviewPage } from '@/features/NavigateToReviewPage';\nimport { SendReportEmail } from '@/features/SendReportEmail';\n\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { FreeReportNavigation } from '@/widgets/FreeReportNavigation';\n\nimport s from './FreeReportPage.module.css';\n\nexport const FreeReportPage = () => {\n    useGate(ReportModel.FreeReportGate);\n    const data = useUnit(getFreeResultQuery.$data);\n    const pending = useUnit(getFreeResultQuery.$pending);\n    const surveyId = useUnit(UserModel.$surveyId);\n\n    if (pending) return <PageLoader />;\n    if (!data) return null;\n\n    return (\n        <Box component='section'>\n            <Container>\n                <ReportHeader type={data?.mbti_type} name={data?.title} typeToColorMapper={TYPE_TO_COLOR_MAP} />\n                <SendReportEmail type='text' />\n                <FreeReportNavigation />\n                <InnerContainer>\n                    {data.content?.map((el, index) => (\n                        <Stack key={el.title + index} id={el.title} data-block mb={100}>\n                            <Element name={el.title} id={el.title} key={data?.title + el.title + index}>\n                                <Title mb='md'>{el.title}</Title>\n                                {el.content.map((currentEl, idx) => (\n                                    <Box className={s.block} key={currentEl.type + idx + index + 'content'}>\n                                        {currentEl.content.map((currentContent) => (\n                                            <Fragment key={currentContent.type + index + idx + 'currentContent'}>\n                                                {contentResolver({\n                                                    content: currentContent,\n                                                    color: TYPE_TO_COLOR_MAP[data.mbti_type],\n                                                    actions: {\n                                                        conclusion_paywall: CALL_TO_ACTION.takeTestAgainOrBuyReport,\n                                                    },\n                                                    surveyId: surveyId ?? '',\n                                                    index: index,\n                                                    mbti: data.mbti_type,\n                                                    slots: {\n                                                        subscribeEmail: <SendReportEmail type='block' />,\n                                                    },\n                                                })}\n                                            </Fragment>\n                                        ))}\n                                    </Box>\n                                ))}\n                            </Element>\n                        </Stack>\n                    ))}\n                </InnerContainer>\n                <NavigateToReviewPage />\n            </Container>\n        </Box>\n    );\n};\n"
        ],
        "mappings": "AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,GAAG,EAAEC,SAAS,EAAEC,KAAK,EAAEC,KAAK,QAAQ,eAAe;AAC5D,SAASC,OAAO,EAAEC,OAAO,QAAQ,gBAAgB;AAEjD,SAASC,cAAc,EAAEC,UAAU,QAAQ,aAAa;AAExD,SAASC,eAAe,EAAEC,kBAAkB,EAAEC,YAAY,EAAEC,WAAW,EAAEC,iBAAiB,QAAQ,mBAAmB;AACrH,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,oBAAoB,QAAQ,iCAAiC;AACtE,SAASC,eAAe,QAAQ,4BAA4B;AAE5D,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,oBAAoB,QAAQ,gCAAgC;AAErE,OAAOC,CAAC,MAAM,6BAA6B;AAE3C,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAChCf,OAAO,CAACO,WAAW,CAACS,cAAc,CAAC;EACnC,MAAMC,IAAI,GAAGhB,OAAO,CAACI,kBAAkB,CAACa,KAAK,CAAC;EAC9C,MAAMC,OAAO,GAAGlB,OAAO,CAACI,kBAAkB,CAACe,QAAQ,CAAC;EACpD,MAAMC,QAAQ,GAAGpB,OAAO,CAACQ,SAAS,CAACa,SAAS,CAAC;EAE7C,IAAIH,OAAO,EAAE,OAAO,CAAC,UAAU,GAAG;EAClC,IAAI,CAACF,IAAI,EAAE,OAAO,IAAI;EAEtB,OACI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS;AAChC,YAAY,CAAC,SAAS;AACtB,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,CAACA,IAAI,EAAEM,SAAS,CAAC,CAAC,IAAI,CAAC,CAACN,IAAI,EAAEO,KAAK,CAAC,CAAC,iBAAiB,CAAC,CAAChB,iBAAiB,CAAC;AAC7G,gBAAgB,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM;AAC5C,gBAAgB,CAAC,oBAAoB;AACrC,gBAAgB,CAAC,cAAc;AAC/B,oBAAoB,CAACS,IAAI,CAACQ,OAAO,EAAEC,GAAG,CAAC,CAACC,EAAE,EAAEC,KAAK,KACzB,CAAC,KAAK,CAAC,GAAG,CAAC,CAACD,EAAE,CAACH,KAAK,GAAGI,KAAK,CAAC,CAAC,EAAE,CAAC,CAACD,EAAE,CAACH,KAAK,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;AACvF,4BAA4B,CAAC,OAAO,CAAC,IAAI,CAAC,CAACG,EAAE,CAACH,KAAK,CAAC,CAAC,EAAE,CAAC,CAACG,EAAE,CAACH,KAAK,CAAC,CAAC,GAAG,CAAC,CAACP,IAAI,EAAEO,KAAK,GAAGG,EAAE,CAACH,KAAK,GAAGI,KAAK,CAAC;AACvG,gCAAgC,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAACD,EAAE,CAACH,KAAK,CAAC,EAAE,KAAK;AAChE,gCAAgC,CAACG,EAAE,CAACF,OAAO,CAACC,GAAG,CAAC,CAACG,SAAS,EAAEC,GAAG,KAC3B,CAAC,GAAG,CAAC,SAAS,CAAC,CAAChB,CAAC,CAACiB,KAAK,CAAC,CAAC,GAAG,CAAC,CAACF,SAAS,CAACG,IAAI,GAAGF,GAAG,GAAGF,KAAK,GAAG,SAAS,CAAC;AAC3G,wCAAwC,CAACC,SAAS,CAACJ,OAAO,CAACC,GAAG,CAAEO,cAAc,IAClC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAACA,cAAc,CAACD,IAAI,GAAGJ,KAAK,GAAGE,GAAG,GAAG,gBAAgB,CAAC;AAChH,gDAAgD,CAAC1B,eAAe,CAAC;kBACbqB,OAAO,EAAEQ,cAAc;kBACvBC,KAAK,EAAE1B,iBAAiB,CAACS,IAAI,CAACM,SAAS,CAAC;kBACxCY,OAAO,EAAE;oBACLC,kBAAkB,EAAExB,cAAc,CAACyB;kBACvC,CAAC;kBACDhB,QAAQ,EAAEA,QAAQ,IAAI,EAAE;kBACxBO,KAAK,EAAEA,KAAK;kBACZU,IAAI,EAAErB,IAAI,CAACM,SAAS;kBACpBgB,KAAK,EAAE;oBACHC,cAAc,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO;kBACjD;gBACJ,CAAC,CAAC;AAClD,4CAA4C,EAAE,QAAQ,CACb,CAAC;AAC1C,oCAAoC,EAAE,GAAG,CACR,CAAC;AAClC,4BAA4B,EAAE,OAAO;AACrC,wBAAwB,EAAE,KAAK,CACV,CAAC;AACtB,gBAAgB,EAAE,cAAc;AAChC,gBAAgB,CAAC,oBAAoB;AACrC,YAAY,EAAE,SAAS;AACvB,QAAQ,EAAE,GAAG,CAAC;AAEd,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Fragment } from \"react\";\nimport { Element } from \"react-scroll\";\nimport { Box, Container, Stack, Title } from \"@mantine/core\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { InnerContainer, PageLoader } from \"@/shared/ui\";\nimport { contentResolver, getFreeResultQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from \"@/entities/Report\";\nimport { UserModel } from \"@/entities/User\";\nimport { NavigateToReviewPage } from \"@/features/NavigateToReviewPage\";\nimport { SendReportEmail } from \"@/features/SendReportEmail\";\nimport { CALL_TO_ACTION } from \"@/widgets/CTA\";\nimport { FreeReportNavigation } from \"@/widgets/FreeReportNavigation\";\nimport s from \"./FreeReportPage.module.css\";\nexport const FreeReportPage = () => {\n  useGate(ReportModel.FreeReportGate);\n  const data = useUnit(getFreeResultQuery.$data);\n  const pending = useUnit(getFreeResultQuery.$pending);\n  const surveyId = useUnit(UserModel.$surveyId);\n  if (pending) return /* @__PURE__ */ jsx(PageLoader, {});\n  if (!data) return null;\n  return /* @__PURE__ */ jsx(Box, { component: \"section\", children: /* @__PURE__ */ jsxs(Container, { children: [\n    /* @__PURE__ */ jsx(ReportHeader, { type: data?.mbti_type, name: data?.title, typeToColorMapper: TYPE_TO_COLOR_MAP }),\n    /* @__PURE__ */ jsx(SendReportEmail, { type: \"text\" }),\n    /* @__PURE__ */ jsx(FreeReportNavigation, {}),\n    /* @__PURE__ */ jsx(InnerContainer, { children: data.content?.map((el, index) => /* @__PURE__ */ jsx(Stack, { id: el.title, \"data-block\": true, mb: 100, children: /* @__PURE__ */ jsxs(Element, { name: el.title, id: el.title, children: [\n      /* @__PURE__ */ jsx(Title, { mb: \"md\", children: el.title }),\n      el.content.map((currentEl, idx) => /* @__PURE__ */ jsx(Box, { className: s.block, children: currentEl.content.map((currentContent) => /* @__PURE__ */ jsx(Fragment, { children: contentResolver({\n        content: currentContent,\n        color: TYPE_TO_COLOR_MAP[data.mbti_type],\n        actions: {\n          conclusion_paywall: CALL_TO_ACTION.takeTestAgainOrBuyReport\n        },\n        surveyId: surveyId ?? \"\",\n        index,\n        mbti: data.mbti_type,\n        slots: {\n          subscribeEmail: /* @__PURE__ */ jsx(SendReportEmail, { type: \"block\" })\n        }\n      }) }, currentContent.type + index + idx + \"currentContent\")) }, currentEl.type + idx + index + \"content\"))\n    ] }, data?.title + el.title + index) }, el.title + index)) }),\n    /* @__PURE__ */ jsx(NavigateToReviewPage, {})\n  ] }) });\n};\n",
      "start": 1746125696092,
      "end": 1746125696167,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/FreeReportPage/index.tsx"],
        "sourcesContent": [
          "import { Fragment } from 'react';\nimport { Element } from 'react-scroll';\nimport { Box, Container, Stack, Title } from '@mantine/core';\nimport { useGate, useUnit } from 'effector-react';\nimport { InnerContainer, PageLoader } from '@/shared/ui';\nimport { contentResolver, getFreeResultQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nimport { UserModel } from '@/entities/User';\nimport { NavigateToReviewPage } from '@/features/NavigateToReviewPage';\nimport { SendReportEmail } from '@/features/SendReportEmail';\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { FreeReportNavigation } from '@/widgets/FreeReportNavigation';\nimport s from './FreeReportPage.module.css';\nexport const FreeReportPage = () => {\n  useGate(ReportModel.FreeReportGate);\n  const data = useUnit(getFreeResultQuery.$data);\n  const pending = useUnit(getFreeResultQuery.$pending);\n  const surveyId = useUnit(UserModel.$surveyId);\n  if (pending) return <PageLoader />;\n  if (!data) return null;\n  return <Box component='section'>\n            <Container>\n                <ReportHeader type={data?.mbti_type} name={data?.title} typeToColorMapper={TYPE_TO_COLOR_MAP} />\n                <SendReportEmail type='text' />\n                <FreeReportNavigation />\n                <InnerContainer>\n                    {data.content?.map((el, index) => <Stack key={el.title + index} id={el.title} data-block mb={100}>\n                            <Element name={el.title} id={el.title} key={data?.title + el.title + index}>\n                                <Title mb='md'>{el.title}</Title>\n                                {el.content.map((currentEl, idx) => <Box className={s.block} key={currentEl.type + idx + index + 'content'}>\n                                        {currentEl.content.map(currentContent => <Fragment key={currentContent.type + index + idx + 'currentContent'}>\n                                                {contentResolver({\n                  content: currentContent,\n                  color: TYPE_TO_COLOR_MAP[data.mbti_type],\n                  actions: {\n                    conclusion_paywall: CALL_TO_ACTION.takeTestAgainOrBuyReport\n                  },\n                  surveyId: surveyId ?? '',\n                  index: index,\n                  mbti: data.mbti_type,\n                  slots: {\n                    subscribeEmail: <SendReportEmail type='block' />\n                  }\n                })}\n                                            </Fragment>)}\n                                    </Box>)}\n                            </Element>\n                        </Stack>)}\n                </InnerContainer>\n                <NavigateToReviewPage />\n            </Container>\n        </Box>;\n};"
        ],
        "mappings": "AAiBsB,cASM,YATN;AAjBtB,SAAS,gBAAgB;AACzB,SAAS,eAAe;AACxB,SAAS,KAAK,WAAW,OAAO,aAAa;AAC7C,SAAS,SAAS,eAAe;AACjC,SAAS,gBAAgB,kBAAkB;AAC3C,SAAS,iBAAiB,oBAAoB,cAAc,aAAa,yBAAyB;AAClG,SAAS,iBAAiB;AAC1B,SAAS,4BAA4B;AACrC,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,4BAA4B;AACrC,OAAO,OAAO;AACP,aAAM,iBAAiB,MAAM;AAClC,UAAQ,YAAY,cAAc;AAClC,QAAM,OAAO,QAAQ,mBAAmB,KAAK;AAC7C,QAAM,UAAU,QAAQ,mBAAmB,QAAQ;AACnD,QAAM,WAAW,QAAQ,UAAU,SAAS;AAC5C,MAAI,QAAS,QAAO,oBAAC,cAAW;AAChC,MAAI,CAAC,KAAM,QAAO;AAClB,SAAO,oBAAC,OAAI,WAAU,WACZ,+BAAC,aACG;AAAA,wBAAC,gBAAa,MAAM,MAAM,WAAW,MAAM,MAAM,OAAO,mBAAmB,mBAAmB;AAAA,IAC9F,oBAAC,mBAAgB,MAAK,QAAO;AAAA,IAC7B,oBAAC,wBAAqB;AAAA,IACtB,oBAAC,kBACI,eAAK,SAAS,IAAI,CAAC,IAAI,UAAU,oBAAC,SAA6B,IAAI,GAAG,OAAO,cAAU,MAAC,IAAI,KACrF,+BAAC,WAAQ,MAAM,GAAG,OAAO,IAAI,GAAG,OAC5B;AAAA,0BAAC,SAAM,IAAG,MAAM,aAAG,OAAM;AAAA,MACxB,GAAG,QAAQ,IAAI,CAAC,WAAW,QAAQ,oBAAC,OAAI,WAAW,EAAE,OAC7C,oBAAU,QAAQ,IAAI,oBAAkB,oBAAC,YACjC,0BAAgB;AAAA,QAC/C,SAAS;AAAA,QACT,OAAO,kBAAkB,KAAK,SAAS;AAAA,QACvC,SAAS;AAAA,UACP,oBAAoB,eAAe;AAAA,QACrC;AAAA,QACA,UAAU,YAAY;AAAA,QACtB;AAAA,QACA,MAAM,KAAK;AAAA,QACX,OAAO;AAAA,UACL,gBAAgB,oBAAC,mBAAgB,MAAK,SAAQ;AAAA,QAChD;AAAA,MACF,CAAC,KAb+E,eAAe,OAAO,QAAQ,MAAM,gBAcxF,CAAW,KAf2C,UAAU,OAAO,MAAM,QAAQ,SAgB7F,CAAM;AAAA,SAlB8B,MAAM,QAAQ,GAAG,QAAQ,KAmBrE,KApBsC,GAAG,QAAQ,KAqBrD,CAAQ,GAChB;AAAA,IACA,oBAAC,wBAAqB;AAAA,KAC1B,GACJ;AACR;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125696167,
      "end": 1746125696167,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/pages/FreeReportPage/index.tsx [vike:pluginModuleBanner] */\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Fragment } from \"react\";\nimport { Element } from \"react-scroll\";\nimport { Box, Container, Stack, Title } from \"@mantine/core\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { InnerContainer, PageLoader } from \"@/shared/ui\";\nimport { contentResolver, getFreeResultQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from \"@/entities/Report\";\nimport { UserModel } from \"@/entities/User\";\nimport { NavigateToReviewPage } from \"@/features/NavigateToReviewPage\";\nimport { SendReportEmail } from \"@/features/SendReportEmail\";\nimport { CALL_TO_ACTION } from \"@/widgets/CTA\";\nimport { FreeReportNavigation } from \"@/widgets/FreeReportNavigation\";\nimport s from \"./FreeReportPage.module.css\";\nexport const FreeReportPage = () => {\n  useGate(ReportModel.FreeReportGate);\n  const data = useUnit(getFreeResultQuery.$data);\n  const pending = useUnit(getFreeResultQuery.$pending);\n  const surveyId = useUnit(UserModel.$surveyId);\n  if (pending) return /* @__PURE__ */ jsx(PageLoader, {});\n  if (!data) return null;\n  return /* @__PURE__ */ jsx(Box, { component: \"section\", children: /* @__PURE__ */ jsxs(Container, { children: [\n    /* @__PURE__ */ jsx(ReportHeader, { type: data?.mbti_type, name: data?.title, typeToColorMapper: TYPE_TO_COLOR_MAP }),\n    /* @__PURE__ */ jsx(SendReportEmail, { type: \"text\" }),\n    /* @__PURE__ */ jsx(FreeReportNavigation, {}),\n    /* @__PURE__ */ jsx(InnerContainer, { children: data.content?.map((el, index) => /* @__PURE__ */ jsx(Stack, { id: el.title, \"data-block\": true, mb: 100, children: /* @__PURE__ */ jsxs(Element, { name: el.title, id: el.title, children: [\n      /* @__PURE__ */ jsx(Title, { mb: \"md\", children: el.title }),\n      el.content.map((currentEl, idx) => /* @__PURE__ */ jsx(Box, { className: s.block, children: currentEl.content.map((currentContent) => /* @__PURE__ */ jsx(Fragment, { children: contentResolver({\n        content: currentContent,\n        color: TYPE_TO_COLOR_MAP[data.mbti_type],\n        actions: {\n          conclusion_paywall: CALL_TO_ACTION.takeTestAgainOrBuyReport\n        },\n        surveyId: surveyId ?? \"\",\n        index,\n        mbti: data.mbti_type,\n        slots: {\n          subscribeEmail: /* @__PURE__ */ jsx(SendReportEmail, { type: \"block\" })\n        }\n      }) }, currentContent.type + index + idx + \"currentContent\")) }, currentEl.type + idx + index + \"content\"))\n    ] }, data?.title + el.title + index) }, el.title + index)) }),\n    /* @__PURE__ */ jsx(NavigateToReviewPage, {})\n  ] }) });\n};\n",
      "start": 1746125696167,
      "end": 1746125696168,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/pages/FreeReportPage/index.tsx"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxrtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxhzjltM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC;"
      }
    }
  ]
}
