{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Blog/api/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { cache, createQuery } from '@farfetched/core';\n\nimport { API, createCommonRequestFx } from '@/shared/api';\n\nimport type { BlogPostByIdRequest, BlogPostsRequest, BlogPostsResponse } from './dto';\n\nexport const getBlogPostsQuery = createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>((params) => ({\n        url: API.blog.posts,\n        params: {\n            post_type: 'post',\n            page_size: Number(params.page_size),\n            ...params,\n        },\n    })),\n    mapData: (data) => {\n        if (!data.result) return {} as BlogPostsResponse;\n        const payload = data.result?.payload?.toSorted((a, b) => Number(b.pinned) - Number(a.pinned));\n\n        return {\n            ...data.result,\n            payload: payload,\n        };\n    },\n});\n\nexport const getAllBlogPostsQuery = createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>((params) => ({\n        url: API.blog.posts,\n        params: {\n            post_type: 'post',\n            page_size: Number(params.page_size),\n            show_on_main: true,\n            ...params,\n        },\n    })),\n    mapData: (data) => {\n        if (!data.result) return {} as BlogPostsResponse;\n        const payload = data.result?.payload\n            .toSorted((a, b) => Number(b.pinned) - Number(a.pinned))\n            .map((data) => ({\n                ...data,\n                updated_at: new Date(data.updated_at).toLocaleDateString('ru-RU'),\n            }));\n\n        return {\n            ...data.result,\n            payload,\n        };\n    },\n});\n\nexport const getBlogPostByIdQuery = createQuery({\n    effect: createCommonRequestFx<string, BlogPostByIdRequest>((id) => ({\n        url: API.blog.postById(id),\n    })),\n});\n\ncache(getBlogPostsQuery);\n",
      "start": 1750105187498,
      "end": 1750105187558,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { cache, createQuery } from '@farfetched/core';\nimport { API, createCommonRequestFx } from '@/shared/api';\nimport type { BlogPostByIdRequest, BlogPostsRequest, BlogPostsResponse } from './dto';\nexport const getBlogPostsQuery = _withFactory({\n  sid: \"8wrxdv\",\n  fn: () => createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>(params => ({\n      url: API.blog.posts,\n      params: {\n        post_type: 'post',\n        page_size: Number(params.page_size),\n        ...params\n      }\n    })),\n    mapData: data => {\n      if (!data.result) return {} as BlogPostsResponse;\n      const payload = data.result?.payload?.toSorted((a, b) => Number(b.pinned) - Number(a.pinned));\n      return {\n        ...data.result,\n        payload: payload\n      };\n    }\n  }),\n  name: \"getBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getAllBlogPostsQuery = _withFactory({\n  sid: \"-1szoee\",\n  fn: () => createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>(params => ({\n      url: API.blog.posts,\n      params: {\n        post_type: 'post',\n        page_size: Number(params.page_size),\n        show_on_main: true,\n        ...params\n      }\n    })),\n    mapData: data => {\n      if (!data.result) return {} as BlogPostsResponse;\n      const payload = data.result?.payload.toSorted((a, b) => Number(b.pinned) - Number(a.pinned)).map(data => ({\n        ...data,\n        updated_at: new Date(data.updated_at).toLocaleDateString('ru-RU')\n      }));\n      return {\n        ...data.result,\n        payload\n      };\n    }\n  }),\n  name: \"getAllBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getBlogPostByIdQuery = _withFactory({\n  sid: \"-ck1tj0\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<string, BlogPostByIdRequest>(id => ({\n      url: API.blog.postById(id)\n    }))\n  }),\n  name: \"getBlogPostByIdQuery\",\n  method: \"createQuery\"\n});\n_withFactory({\n  sid: \"r1uq9s\",\n  fn: () => cache(getBlogPostsQuery),\n  name: \"none\",\n  method: \"cache\"\n});",
      "start": 1750105187558,
      "end": 1750105187560,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "cache",
          "createQuery",
          "API",
          "createCommonRequestFx",
          "BlogPostByIdRequest",
          "BlogPostsRequest",
          "BlogPostsResponse",
          "getBlogPostsQuery",
          "_withFactory",
          "sid",
          "\"8wrxdv\"",
          "fn",
          "initialData",
          "effect",
          "params",
          "url",
          "blog",
          "posts",
          "post_type",
          "page_size",
          "Number",
          "mapData",
          "data",
          "result",
          "payload",
          "toSorted",
          "a",
          "b",
          "pinned",
          "name",
          "\"getBlogPostsQuery\"",
          "method",
          "\"createQuery\"",
          "getAllBlogPostsQuery",
          "\"-1szoee\"",
          "show_on_main",
          "map",
          "updated_at",
          "Date",
          "toLocaleDateString",
          "\"getAllBlogPostsQuery\"",
          "getBlogPostByIdQuery",
          "\"-ck1tj0\"",
          "id",
          "postById",
          "\"getBlogPostByIdQuery\"",
          "\"r1uq9s\"",
          "\"none\"",
          "\"cache\""
        ],
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Blog/api/index.ts"
        ],
        "sourcesContent": [
          "import { cache, createQuery } from '@farfetched/core';\n\nimport { API, createCommonRequestFx } from '@/shared/api';\n\nimport type { BlogPostByIdRequest, BlogPostsRequest, BlogPostsResponse } from './dto';\n\nexport const getBlogPostsQuery = createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>((params) => ({\n        url: API.blog.posts,\n        params: {\n            post_type: 'post',\n            page_size: Number(params.page_size),\n            ...params,\n        },\n    })),\n    mapData: (data) => {\n        if (!data.result) return {} as BlogPostsResponse;\n        const payload = data.result?.payload?.toSorted((a, b) => Number(b.pinned) - Number(a.pinned));\n\n        return {\n            ...data.result,\n            payload: payload,\n        };\n    },\n});\n\nexport const getAllBlogPostsQuery = createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>((params) => ({\n        url: API.blog.posts,\n        params: {\n            post_type: 'post',\n            page_size: Number(params.page_size),\n            show_on_main: true,\n            ...params,\n        },\n    })),\n    mapData: (data) => {\n        if (!data.result) return {} as BlogPostsResponse;\n        const payload = data.result?.payload\n            .toSorted((a, b) => Number(b.pinned) - Number(a.pinned))\n            .map((data) => ({\n                ...data,\n                updated_at: new Date(data.updated_at).toLocaleDateString('ru-RU'),\n            }));\n\n        return {\n            ...data.result,\n            payload,\n        };\n    },\n});\n\nexport const getBlogPostByIdQuery = createQuery({\n    effect: createCommonRequestFx<string, BlogPostByIdRequest>((id) => ({\n        url: API.blog.postById(id),\n    })),\n});\n\ncache(getBlogPostsQuery);\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { cache, createQuery } from \"@farfetched/core\";\nimport { API, createCommonRequestFx } from \"@/shared/api\";\nexport const getBlogPostsQuery = _withFactory({\n  sid: \"8wrxdv\",\n  fn: () => createQuery({\n    initialData: {},\n    effect: createCommonRequestFx((params) => ({\n      url: API.blog.posts,\n      params: {\n        post_type: \"post\",\n        page_size: Number(params.page_size),\n        ...params\n      }\n    })),\n    mapData: (data) => {\n      if (!data.result) return {};\n      const payload = data.result?.payload?.toSorted((a, b) => Number(b.pinned) - Number(a.pinned));\n      return {\n        ...data.result,\n        payload\n      };\n    }\n  }),\n  name: \"getBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getAllBlogPostsQuery = _withFactory({\n  sid: \"-1szoee\",\n  fn: () => createQuery({\n    initialData: {},\n    effect: createCommonRequestFx((params) => ({\n      url: API.blog.posts,\n      params: {\n        post_type: \"post\",\n        page_size: Number(params.page_size),\n        show_on_main: true,\n        ...params\n      }\n    })),\n    mapData: (data) => {\n      if (!data.result) return {};\n      const payload = data.result?.payload.toSorted((a, b) => Number(b.pinned) - Number(a.pinned)).map((data2) => ({\n        ...data2,\n        updated_at: new Date(data2.updated_at).toLocaleDateString(\"ru-RU\")\n      }));\n      return {\n        ...data.result,\n        payload\n      };\n    }\n  }),\n  name: \"getAllBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getBlogPostByIdQuery = _withFactory({\n  sid: \"-ck1tj0\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx((id) => ({\n      url: API.blog.postById(id)\n    }))\n  }),\n  name: \"getBlogPostByIdQuery\",\n  method: \"createQuery\"\n});\n_withFactory({\n  sid: \"r1uq9s\",\n  fn: () => cache(getBlogPostsQuery),\n  name: \"none\",\n  method: \"cache\"\n});\n",
      "start": 1750105187560,
      "end": 1750105187670,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Blog/api/index.ts"
        ],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { cache, createQuery } from '@farfetched/core';\nimport { API, createCommonRequestFx } from '@/shared/api';\nimport type { BlogPostByIdRequest, BlogPostsRequest, BlogPostsResponse } from './dto';\nexport const getBlogPostsQuery = _withFactory({\n  sid: \"8wrxdv\",\n  fn: () => createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>(params => ({\n      url: API.blog.posts,\n      params: {\n        post_type: 'post',\n        page_size: Number(params.page_size),\n        ...params\n      }\n    })),\n    mapData: data => {\n      if (!data.result) return {} as BlogPostsResponse;\n      const payload = data.result?.payload?.toSorted((a, b) => Number(b.pinned) - Number(a.pinned));\n      return {\n        ...data.result,\n        payload: payload\n      };\n    }\n  }),\n  name: \"getBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getAllBlogPostsQuery = _withFactory({\n  sid: \"-1szoee\",\n  fn: () => createQuery({\n    initialData: {} as BlogPostsResponse,\n    effect: createCommonRequestFx<BlogPostsRequest, BlogPostsResponse>(params => ({\n      url: API.blog.posts,\n      params: {\n        post_type: 'post',\n        page_size: Number(params.page_size),\n        show_on_main: true,\n        ...params\n      }\n    })),\n    mapData: data => {\n      if (!data.result) return {} as BlogPostsResponse;\n      const payload = data.result?.payload.toSorted((a, b) => Number(b.pinned) - Number(a.pinned)).map(data => ({\n        ...data,\n        updated_at: new Date(data.updated_at).toLocaleDateString('ru-RU')\n      }));\n      return {\n        ...data.result,\n        payload\n      };\n    }\n  }),\n  name: \"getAllBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getBlogPostByIdQuery = _withFactory({\n  sid: \"-ck1tj0\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<string, BlogPostByIdRequest>(id => ({\n      url: API.blog.postById(id)\n    }))\n  }),\n  name: \"getBlogPostByIdQuery\",\n  method: \"createQuery\"\n});\n_withFactory({\n  sid: \"r1uq9s\",\n  fn: () => cache(getBlogPostsQuery),\n  name: \"none\",\n  method: \"cache\"\n});"
        ],
        "mappings": "AAAA,SAAS,eAAe,oBAAoB;AAC5C,SAAS,OAAO,mBAAmB;AACnC,SAAS,KAAK,6BAA6B;AAEpC,aAAM,oBAAoB,aAAa;AAAA,EAC5C,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,aAAa,CAAC;AAAA,IACd,QAAQ,sBAA2D,aAAW;AAAA,MAC5E,KAAK,IAAI,KAAK;AAAA,MACd,QAAQ;AAAA,QACN,WAAW;AAAA,QACX,WAAW,OAAO,OAAO,SAAS;AAAA,QAClC,GAAG;AAAA,MACL;AAAA,IACF,EAAE;AAAA,IACF,SAAS,UAAQ;AACf,UAAI,CAAC,KAAK,OAAQ,QAAO,CAAC;AAC1B,YAAM,UAAU,KAAK,QAAQ,SAAS,SAAS,CAAC,GAAG,MAAM,OAAO,EAAE,MAAM,IAAI,OAAO,EAAE,MAAM,CAAC;AAC5F,aAAO;AAAA,QACL,GAAG,KAAK;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACM,aAAM,uBAAuB,aAAa;AAAA,EAC/C,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,aAAa,CAAC;AAAA,IACd,QAAQ,sBAA2D,aAAW;AAAA,MAC5E,KAAK,IAAI,KAAK;AAAA,MACd,QAAQ;AAAA,QACN,WAAW;AAAA,QACX,WAAW,OAAO,OAAO,SAAS;AAAA,QAClC,cAAc;AAAA,QACd,GAAG;AAAA,MACL;AAAA,IACF,EAAE;AAAA,IACF,SAAS,UAAQ;AACf,UAAI,CAAC,KAAK,OAAQ,QAAO,CAAC;AAC1B,YAAM,UAAU,KAAK,QAAQ,QAAQ,SAAS,CAAC,GAAG,MAAM,OAAO,EAAE,MAAM,IAAI,OAAO,EAAE,MAAM,CAAC,EAAE,IAAI,CAAAA,WAAS;AAAA,QACxG,GAAGA;AAAA,QACH,YAAY,IAAI,KAAKA,MAAK,UAAU,EAAE,mBAAmB,OAAO;AAAA,MAClE,EAAE;AACF,aAAO;AAAA,QACL,GAAG,KAAK;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACM,aAAM,uBAAuB,aAAa;AAAA,EAC/C,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,QAAQ,sBAAmD,SAAO;AAAA,MAChE,KAAK,IAAI,KAAK,SAAS,EAAE;AAAA,IAC3B,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACD,aAAa;AAAA,EACX,KAAK;AAAA,EACL,IAAI,MAAM,MAAM,iBAAiB;AAAA,EACjC,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;",
        "names": [
          "data"
        ]
      }
    },
    {
      "name": "vite:worker",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Blog/api/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { cache, createQuery } from \"@farfetched/core\";\nimport { API, createCommonRequestFx } from \"@/shared/api\";\nexport const getBlogPostsQuery = _withFactory({\n  sid: \"8wrxdv\",\n  fn: () => createQuery({\n    initialData: {},\n    effect: createCommonRequestFx((params) => ({\n      url: API.blog.posts,\n      params: {\n        post_type: \"post\",\n        page_size: Number(params.page_size),\n        ...params\n      }\n    })),\n    mapData: (data) => {\n      if (!data.result) return {};\n      const payload = data.result?.payload?.toSorted((a, b) => Number(b.pinned) - Number(a.pinned));\n      return {\n        ...data.result,\n        payload\n      };\n    }\n  }),\n  name: \"getBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getAllBlogPostsQuery = _withFactory({\n  sid: \"-1szoee\",\n  fn: () => createQuery({\n    initialData: {},\n    effect: createCommonRequestFx((params) => ({\n      url: API.blog.posts,\n      params: {\n        post_type: \"post\",\n        page_size: Number(params.page_size),\n        show_on_main: true,\n        ...params\n      }\n    })),\n    mapData: (data) => {\n      if (!data.result) return {};\n      const payload = data.result?.payload.toSorted((a, b) => Number(b.pinned) - Number(a.pinned)).map((data2) => ({\n        ...data2,\n        updated_at: new Date(data2.updated_at).toLocaleDateString(\"ru-RU\")\n      }));\n      return {\n        ...data.result,\n        payload\n      };\n    }\n  }),\n  name: \"getAllBlogPostsQuery\",\n  method: \"createQuery\"\n});\nexport const getBlogPostByIdQuery = _withFactory({\n  sid: \"-ck1tj0\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx((id) => ({\n      url: API.blog.postById(id)\n    }))\n  }),\n  name: \"getBlogPostByIdQuery\",\n  method: \"createQuery\"\n});\n_withFactory({\n  sid: \"r1uq9s\",\n  fn: () => cache(getBlogPostsQuery),\n  name: \"none\",\n  method: \"cache\"\n});\n",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "src/entities/Blog/api/index.ts"
        ],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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"
      }
    }
  ]
}
