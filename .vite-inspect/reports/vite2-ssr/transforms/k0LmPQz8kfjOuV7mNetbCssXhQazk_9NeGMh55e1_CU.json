{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/content.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\n\nimport { getFullReportQuery, getPersonalityTypeQuery, getSurveysInfoQuery } from '../api';\nimport type { ContentBlock } from '../types';\n\nexport const $currentContentPage = createStore(0);\nexport const $currentPage = createStore(1);\nexport const currentPageChanged = createEvent<number>();\nexport const $isFirstPage = $currentPage.map((page) => page - 1 <= 0);\nexport const $isLastPage = createStore<boolean>(false);\n\nexport const $reportContent = createStore<{ title: string; content: ContentBlock[] }[]>([]);\nexport const $userMbtiTypes = createStore<Record<string, string>[]>([]);\n\nsample({\n    clock: getPersonalityTypeQuery.finished.success,\n    fn: ({ result: { content } }) => content,\n    target: $reportContent,\n});\n\nsample({\n    clock: getSurveysInfoQuery.finished.success,\n    fn: ({ result }) =>\n        result?.reports.map((report) => ({\n            [report.user_report]: report.mbti_type,\n        })) ?? [],\n    target: $userMbtiTypes,\n});\n\nsample({\n    clock: $currentPage,\n    source: getFullReportQuery.$data,\n    fn: (content, page) => page >= content.content?.map((el) => el.content)?.length,\n    target: $isLastPage,\n});\n\ncreateAction({\n    clock: currentPageChanged,\n    target: {\n        $currentContentPage,\n        $currentPage,\n    },\n    fn: (target, clock) => {\n        target.$currentPage(clock);\n        target.$currentContentPage(clock - 1);\n    },\n});\n",
      "start": 1746125081850,
      "end": 1746125081888,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { getFullReportQuery, getPersonalityTypeQuery, getSurveysInfoQuery } from '../api';\nimport type { ContentBlock } from '../types';\nexport const $currentContentPage = createStore(0, {\n  name: \"$currentContentPage\",\n  sid: \"ktaj1b\"\n});\nexport const $currentPage = createStore(1, {\n  name: \"$currentPage\",\n  sid: \"-kwdn3p\"\n});\nexport const currentPageChanged = createEvent<number>({\n  name: \"currentPageChanged\",\n  sid: \"7rhbpz\"\n});\nexport const $isFirstPage = $currentPage.map(page => page - 1 <= 0);\nexport const $isLastPage = createStore<boolean>(false, {\n  name: \"$isLastPage\",\n  sid: \"-7djdaj\"\n});\nexport const $reportContent = createStore<{\n  title: string;\n  content: ContentBlock[];\n}[]>([], {\n  name: \"$reportContent\",\n  sid: \"-8j91ir\"\n});\nexport const $userMbtiTypes = createStore<Record<string, string>[]>([], {\n  name: \"$userMbtiTypes\",\n  sid: \"-ldh783\"\n});\nsample({\n  and: [{\n    clock: getPersonalityTypeQuery.finished.success,\n    fn: ({\n      result: {\n        content\n      }\n    }) => content,\n    target: $reportContent\n  }],\n  or: {\n    sid: \"-h7sqse\"\n  }\n});\nsample({\n  and: [{\n    clock: getSurveysInfoQuery.finished.success,\n    fn: ({\n      result\n    }) => result?.reports.map(report => ({\n      [report.user_report]: report.mbti_type\n    })) ?? [],\n    target: $userMbtiTypes\n  }],\n  or: {\n    sid: \"-gsyarn\"\n  }\n});\nsample({\n  and: [{\n    clock: $currentPage,\n    source: getFullReportQuery.$data,\n    fn: (content, page) => page >= content.content?.map(el => el.content)?.length,\n    target: $isLastPage\n  }],\n  or: {\n    sid: \"-gcggyt\"\n  }\n});\ncreateAction({\n  clock: currentPageChanged,\n  target: {\n    $currentContentPage,\n    $currentPage\n  },\n  fn: (target, clock) => {\n    target.$currentPage(clock);\n    target.$currentContentPage(clock - 1);\n  }\n});",
      "start": 1746125081888,
      "end": 1746125081890,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createEvent",
          "createStore",
          "sample",
          "createAction",
          "getFullReportQuery",
          "getPersonalityTypeQuery",
          "getSurveysInfoQuery",
          "ContentBlock",
          "$currentContentPage",
          "name",
          "sid",
          "$currentPage",
          "currentPageChanged",
          "$isFirstPage",
          "map",
          "page",
          "$isLastPage",
          "$reportContent",
          "title",
          "content",
          "$userMbtiTypes",
          "Record",
          "and",
          "clock",
          "finished",
          "success",
          "fn",
          "result",
          "target",
          "or",
          "reports",
          "report",
          "user_report",
          "mbti_type",
          "source",
          "$data",
          "el",
          "length"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/content.ts"],
        "sourcesContent": [
          "import { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\n\nimport { getFullReportQuery, getPersonalityTypeQuery, getSurveysInfoQuery } from '../api';\nimport type { ContentBlock } from '../types';\n\nexport const $currentContentPage = createStore(0);\nexport const $currentPage = createStore(1);\nexport const currentPageChanged = createEvent<number>();\nexport const $isFirstPage = $currentPage.map((page) => page - 1 <= 0);\nexport const $isLastPage = createStore<boolean>(false);\n\nexport const $reportContent = createStore<{ title: string; content: ContentBlock[] }[]>([]);\nexport const $userMbtiTypes = createStore<Record<string, string>[]>([]);\n\nsample({\n    clock: getPersonalityTypeQuery.finished.success,\n    fn: ({ result: { content } }) => content,\n    target: $reportContent,\n});\n\nsample({\n    clock: getSurveysInfoQuery.finished.success,\n    fn: ({ result }) =>\n        result?.reports.map((report) => ({\n            [report.user_report]: report.mbti_type,\n        })) ?? [],\n    target: $userMbtiTypes,\n});\n\nsample({\n    clock: $currentPage,\n    source: getFullReportQuery.$data,\n    fn: (content, page) => page >= content.content?.map((el) => el.content)?.length,\n    target: $isLastPage,\n});\n\ncreateAction({\n    clock: currentPageChanged,\n    target: {\n        $currentContentPage,\n        $currentPage,\n    },\n    fn: (target, clock) => {\n        target.$currentPage(clock);\n        target.$currentContentPage(clock - 1);\n    },\n});\n"
        ],
        "mappings": "AAAA,SAASA,WAAW,EAAEC,WAAW,EAAEC,MAAM,QAAQ,UAAU;AAC3D,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,kBAAkB,EAAEC,uBAAuB,EAAEC,mBAAmB,QAAQ,QAAQ;AACzF,cAAcC,YAAY,QAAQ,UAAU;AAE5C,OAAO,MAAMC,mBAAmB,GAAGP,WAAW,CAAC,CAAC;EAAAQ,IAAA;EAAAC,GAAA;AAAA,EAAC;AACjD,OAAO,MAAMC,YAAY,GAAGV,WAAW,CAAC,CAAC;EAAAQ,IAAA;EAAAC,GAAA;AAAA,EAAC;AAC1C,OAAO,MAAME,kBAAkB,GAAGZ,WAAW,CAAC,MAAM,CAAC;EAAAS,IAAA;EAAAC,GAAA;AAAA,CAAC,CAAC;AACvD,OAAO,MAAMG,YAAY,GAAGF,YAAY,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;AACrE,OAAO,MAAMC,WAAW,GAAGf,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK;EAAAQ,IAAA;EAAAC,GAAA;AAAA,EAAC;AAEtD,OAAO,MAAMO,cAAc,GAAGhB,WAAW,CAAC;EAAEiB,KAAK,EAAE,MAAM;EAAEC,OAAO,EAAEZ,YAAY,EAAE;AAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EAAAE,IAAA;EAAAC,GAAA;AAAA,EAAC;AAC3F,OAAO,MAAMU,cAAc,GAAGnB,WAAW,CAACoB,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE;EAAAZ,IAAA;EAAAC,GAAA;AAAA,EAAC;AAEvER,MAAM;EAAAoB,GAAA,GAAC;IACHC,KAAK,EAAElB,uBAAuB,CAACmB,QAAQ,CAACC,OAAO;IAC/CC,EAAE,EAAEA,CAAC;MAAEC,MAAM,EAAE;QAAER;MAAQ;IAAE,CAAC,KAAKA,OAAO;IACxCS,MAAM,EAAEX;EACZ,CAAC;EAAAY,EAAA;IAAAnB,GAAA;EAAA;AAAA,EAAC;AAEFR,MAAM;EAAAoB,GAAA,GAAC;IACHC,KAAK,EAAEjB,mBAAmB,CAACkB,QAAQ,CAACC,OAAO;IAC3CC,EAAE,EAAEA,CAAC;MAAEC;IAAO,CAAC,KACXA,MAAM,EAAEG,OAAO,CAAChB,GAAG,CAAEiB,MAAM,KAAM;MAC7B,CAACA,MAAM,CAACC,WAAW,GAAGD,MAAM,CAACE;IACjC,CAAC,CAAC,CAAC,IAAI,EAAE;IACbL,MAAM,EAAER;EACZ,CAAC;EAAAS,EAAA;IAAAnB,GAAA;EAAA;AAAA,EAAC;AAEFR,MAAM;EAAAoB,GAAA,GAAC;IACHC,KAAK,EAAEZ,YAAY;IACnBuB,MAAM,EAAE9B,kBAAkB,CAAC+B,KAAK;IAChCT,EAAE,EAAEA,CAACP,OAAO,EAAEJ,IAAI,KAAKA,IAAI,IAAII,OAAO,CAACA,OAAO,EAAEL,GAAG,CAAEsB,EAAE,IAAKA,EAAE,CAACjB,OAAO,CAAC,EAAEkB,MAAM;IAC/ET,MAAM,EAAEZ;EACZ,CAAC;EAAAa,EAAA;IAAAnB,GAAA;EAAA;AAAA,EAAC;AAEFP,YAAY,CAAC;EACToB,KAAK,EAAEX,kBAAkB;EACzBgB,MAAM,EAAE;IACJpB,mBAAmB;IACnBG;EACJ,CAAC;EACDe,EAAE,EAAEA,CAACE,MAAM,EAAEL,KAAK,KAAK;IACnBK,MAAM,CAACjB,YAAY,CAACY,KAAK,CAAC;IAC1BK,MAAM,CAACpB,mBAAmB,CAACe,KAAK,GAAG,CAAC,CAAC;EACzC;AACJ,CAAC,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { createEvent, createStore, sample } from \"effector\";\nimport { createAction } from \"effector-action\";\nimport { getFullReportQuery, getPersonalityTypeQuery, getSurveysInfoQuery } from \"../api\";\nexport const $currentContentPage = createStore(0, {\n  name: \"$currentContentPage\",\n  sid: \"ktaj1b\"\n});\nexport const $currentPage = createStore(1, {\n  name: \"$currentPage\",\n  sid: \"-kwdn3p\"\n});\nexport const currentPageChanged = createEvent({\n  name: \"currentPageChanged\",\n  sid: \"7rhbpz\"\n});\nexport const $isFirstPage = $currentPage.map((page) => page - 1 <= 0);\nexport const $isLastPage = createStore(false, {\n  name: \"$isLastPage\",\n  sid: \"-7djdaj\"\n});\nexport const $reportContent = createStore([], {\n  name: \"$reportContent\",\n  sid: \"-8j91ir\"\n});\nexport const $userMbtiTypes = createStore([], {\n  name: \"$userMbtiTypes\",\n  sid: \"-ldh783\"\n});\nsample({\n  and: [{\n    clock: getPersonalityTypeQuery.finished.success,\n    fn: ({\n      result: {\n        content\n      }\n    }) => content,\n    target: $reportContent\n  }],\n  or: {\n    sid: \"-h7sqse\"\n  }\n});\nsample({\n  and: [{\n    clock: getSurveysInfoQuery.finished.success,\n    fn: ({\n      result\n    }) => result?.reports.map((report) => ({\n      [report.user_report]: report.mbti_type\n    })) ?? [],\n    target: $userMbtiTypes\n  }],\n  or: {\n    sid: \"-gsyarn\"\n  }\n});\nsample({\n  and: [{\n    clock: $currentPage,\n    source: getFullReportQuery.$data,\n    fn: (content, page) => page >= content.content?.map((el) => el.content)?.length,\n    target: $isLastPage\n  }],\n  or: {\n    sid: \"-gcggyt\"\n  }\n});\ncreateAction({\n  clock: currentPageChanged,\n  target: {\n    $currentContentPage,\n    $currentPage\n  },\n  fn: (target, clock) => {\n    target.$currentPage(clock);\n    target.$currentContentPage(clock - 1);\n  }\n});\n",
      "start": 1746125081890,
      "end": 1746125082105,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/content.ts"],
        "sourcesContent": [
          "import { createEvent, createStore, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { getFullReportQuery, getPersonalityTypeQuery, getSurveysInfoQuery } from '../api';\nimport type { ContentBlock } from '../types';\nexport const $currentContentPage = createStore(0, {\n  name: \"$currentContentPage\",\n  sid: \"ktaj1b\"\n});\nexport const $currentPage = createStore(1, {\n  name: \"$currentPage\",\n  sid: \"-kwdn3p\"\n});\nexport const currentPageChanged = createEvent<number>({\n  name: \"currentPageChanged\",\n  sid: \"7rhbpz\"\n});\nexport const $isFirstPage = $currentPage.map(page => page - 1 <= 0);\nexport const $isLastPage = createStore<boolean>(false, {\n  name: \"$isLastPage\",\n  sid: \"-7djdaj\"\n});\nexport const $reportContent = createStore<{\n  title: string;\n  content: ContentBlock[];\n}[]>([], {\n  name: \"$reportContent\",\n  sid: \"-8j91ir\"\n});\nexport const $userMbtiTypes = createStore<Record<string, string>[]>([], {\n  name: \"$userMbtiTypes\",\n  sid: \"-ldh783\"\n});\nsample({\n  and: [{\n    clock: getPersonalityTypeQuery.finished.success,\n    fn: ({\n      result: {\n        content\n      }\n    }) => content,\n    target: $reportContent\n  }],\n  or: {\n    sid: \"-h7sqse\"\n  }\n});\nsample({\n  and: [{\n    clock: getSurveysInfoQuery.finished.success,\n    fn: ({\n      result\n    }) => result?.reports.map(report => ({\n      [report.user_report]: report.mbti_type\n    })) ?? [],\n    target: $userMbtiTypes\n  }],\n  or: {\n    sid: \"-gsyarn\"\n  }\n});\nsample({\n  and: [{\n    clock: $currentPage,\n    source: getFullReportQuery.$data,\n    fn: (content, page) => page >= content.content?.map(el => el.content)?.length,\n    target: $isLastPage\n  }],\n  or: {\n    sid: \"-gcggyt\"\n  }\n});\ncreateAction({\n  clock: currentPageChanged,\n  target: {\n    $currentContentPage,\n    $currentPage\n  },\n  fn: (target, clock) => {\n    target.$currentPage(clock);\n    target.$currentContentPage(clock - 1);\n  }\n});"
        ],
        "mappings": "AAAA,SAAS,aAAa,aAAa,cAAc;AACjD,SAAS,oBAAoB;AAC7B,SAAS,oBAAoB,yBAAyB,2BAA2B;AAE1E,aAAM,sBAAsB,YAAY,GAAG;AAAA,EAChD,MAAM;AAAA,EACN,KAAK;AACP,CAAC;AACM,aAAM,eAAe,YAAY,GAAG;AAAA,EACzC,MAAM;AAAA,EACN,KAAK;AACP,CAAC;AACM,aAAM,qBAAqB,YAAoB;AAAA,EACpD,MAAM;AAAA,EACN,KAAK;AACP,CAAC;AACM,aAAM,eAAe,aAAa,IAAI,UAAQ,OAAO,KAAK,CAAC;AAC3D,aAAM,cAAc,YAAqB,OAAO;AAAA,EACrD,MAAM;AAAA,EACN,KAAK;AACP,CAAC;AACM,aAAM,iBAAiB,YAGzB,CAAC,GAAG;AAAA,EACP,MAAM;AAAA,EACN,KAAK;AACP,CAAC;AACM,aAAM,iBAAiB,YAAsC,CAAC,GAAG;AAAA,EACtE,MAAM;AAAA,EACN,KAAK;AACP,CAAC;AACD,OAAO;AAAA,EACL,KAAK,CAAC;AAAA,IACJ,OAAO,wBAAwB,SAAS;AAAA,IACxC,IAAI,CAAC;AAAA,MACH,QAAQ;AAAA,QACN;AAAA,MACF;AAAA,IACF,MAAM;AAAA,IACN,QAAQ;AAAA,EACV,CAAC;AAAA,EACD,IAAI;AAAA,IACF,KAAK;AAAA,EACP;AACF,CAAC;AACD,OAAO;AAAA,EACL,KAAK,CAAC;AAAA,IACJ,OAAO,oBAAoB,SAAS;AAAA,IACpC,IAAI,CAAC;AAAA,MACH;AAAA,IACF,MAAM,QAAQ,QAAQ,IAAI,aAAW;AAAA,MACnC,CAAC,OAAO,WAAW,GAAG,OAAO;AAAA,IAC/B,EAAE,KAAK,CAAC;AAAA,IACR,QAAQ;AAAA,EACV,CAAC;AAAA,EACD,IAAI;AAAA,IACF,KAAK;AAAA,EACP;AACF,CAAC;AACD,OAAO;AAAA,EACL,KAAK,CAAC;AAAA,IACJ,OAAO;AAAA,IACP,QAAQ,mBAAmB;AAAA,IAC3B,IAAI,CAAC,SAAS,SAAS,QAAQ,QAAQ,SAAS,IAAI,QAAM,GAAG,OAAO,GAAG;AAAA,IACvE,QAAQ;AAAA,EACV,CAAC;AAAA,EACD,IAAI;AAAA,IACF,KAAK;AAAA,EACP;AACF,CAAC;AACD,aAAa;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,IACN;AAAA,IACA;AAAA,EACF;AAAA,EACA,IAAI,CAAC,QAAQ,UAAU;AACrB,WAAO,aAAa,KAAK;AACzB,WAAO,oBAAoB,QAAQ,CAAC;AAAA,EACtC;AACF,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125082105,
      "end": 1746125082105,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125082105,
      "end": 1746125082105,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Report/model/content.ts [vike:pluginModuleBanner] */\nimport { createEvent, createStore, sample } from \"effector\";\nimport { createAction } from \"effector-action\";\nimport { getFullReportQuery, getPersonalityTypeQuery, getSurveysInfoQuery } from \"../api\";\nexport const $currentContentPage = createStore(0, {\n  name: \"$currentContentPage\",\n  sid: \"ktaj1b\"\n});\nexport const $currentPage = createStore(1, {\n  name: \"$currentPage\",\n  sid: \"-kwdn3p\"\n});\nexport const currentPageChanged = createEvent({\n  name: \"currentPageChanged\",\n  sid: \"7rhbpz\"\n});\nexport const $isFirstPage = $currentPage.map((page) => page - 1 <= 0);\nexport const $isLastPage = createStore(false, {\n  name: \"$isLastPage\",\n  sid: \"-7djdaj\"\n});\nexport const $reportContent = createStore([], {\n  name: \"$reportContent\",\n  sid: \"-8j91ir\"\n});\nexport const $userMbtiTypes = createStore([], {\n  name: \"$userMbtiTypes\",\n  sid: \"-ldh783\"\n});\nsample({\n  and: [{\n    clock: getPersonalityTypeQuery.finished.success,\n    fn: ({\n      result: {\n        content\n      }\n    }) => content,\n    target: $reportContent\n  }],\n  or: {\n    sid: \"-h7sqse\"\n  }\n});\nsample({\n  and: [{\n    clock: getSurveysInfoQuery.finished.success,\n    fn: ({\n      result\n    }) => result?.reports.map((report) => ({\n      [report.user_report]: report.mbti_type\n    })) ?? [],\n    target: $userMbtiTypes\n  }],\n  or: {\n    sid: \"-gsyarn\"\n  }\n});\nsample({\n  and: [{\n    clock: $currentPage,\n    source: getFullReportQuery.$data,\n    fn: (content, page) => page >= content.content?.map((el) => el.content)?.length,\n    target: $isLastPage\n  }],\n  or: {\n    sid: \"-gcggyt\"\n  }\n});\ncreateAction({\n  clock: currentPageChanged,\n  target: {\n    $currentContentPage,\n    $currentPage\n  },\n  fn: (target, clock) => {\n    target.$currentPage(clock);\n    target.$currentContentPage(clock - 1);\n  }\n});\n",
      "start": 1746125082106,
      "end": 1746125082106,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Report/model/content.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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"
      }
    }
  ]
}
