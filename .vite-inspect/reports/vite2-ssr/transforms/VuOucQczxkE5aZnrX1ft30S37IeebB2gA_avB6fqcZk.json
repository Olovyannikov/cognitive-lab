{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/ui/BlockQuoteFilled/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Paper, Text } from '@mantine/core';\nimport Markdown from 'markdown-to-jsx';\n\nimport { useIsLarge } from '@/shared/lib';\n\ninterface BlockQuoteFilledProps {\n    text: string;\n    color?: string;\n}\n\nexport const BlockQuoteFilled = ({ text, color = 'violet' }: BlockQuoteFilledProps) => {\n    const isLarge = useIsLarge();\n\n    return (\n        <Paper bg={`${color}.0`} py='lg' px='3xl' my='md' c={`${color}.9`}>\n            <Markdown\n                options={{\n                    overrides: {\n                        p: (props) => (\n                            <Text fz={isLarge ? 20 : 18} fw={500}>\n                                {props.children}\n                            </Text>\n                        ),\n                        span: (props) => (\n                            <Text fw={500} span fz={isLarge ? 20 : 18}>\n                                {props.children}\n                            </Text>\n                        ),\n                        pre: (props) => <Text fw={500}>{props.children}</Text>,\n                        code: (props) => <Markdown>{props.children}</Markdown>,\n                    },\n                }}\n            >\n                {text}\n            </Markdown>\n        </Paper>\n    );\n};\n",
      "start": 1750184199117,
      "end": 1750184199157,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { Paper, Text } from '@mantine/core';\nimport Markdown from 'markdown-to-jsx';\nimport { useIsLarge } from '@/shared/lib';\ninterface BlockQuoteFilledProps {\n  text: string;\n  color?: string;\n}\nexport const BlockQuoteFilled = ({\n  text,\n  color = 'violet'\n}: BlockQuoteFilledProps) => {\n  const isLarge = useIsLarge();\n  return <Paper bg={`${color}.0`} py='lg' px='3xl' my='md' c={`${color}.9`}>\n            <Markdown options={{\n      overrides: {\n        p: props => <Text fz={isLarge ? 20 : 18} fw={500}>\n                                {props.children}\n                            </Text>,\n        span: props => <Text fw={500} span fz={isLarge ? 20 : 18}>\n                                {props.children}\n                            </Text>,\n        pre: props => <Text fw={500}>{props.children}</Text>,\n        code: props => <Markdown>{props.children}</Markdown>\n      }\n    }}>\n                {text}\n            </Markdown>\n        </Paper>;\n};",
      "start": 1750184199157,
      "end": 1750184199159,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "Paper",
          "Text",
          "Markdown",
          "useIsLarge",
          "BlockQuoteFilledProps",
          "text",
          "color",
          "BlockQuoteFilled",
          "isLarge",
          "overrides",
          "p",
          "props",
          "children",
          "span",
          "pre",
          "code"
        ],
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/ui/BlockQuoteFilled/index.tsx"
        ],
        "sourcesContent": [
          "import { Paper, Text } from '@mantine/core';\nimport Markdown from 'markdown-to-jsx';\n\nimport { useIsLarge } from '@/shared/lib';\n\ninterface BlockQuoteFilledProps {\n    text: string;\n    color?: string;\n}\n\nexport const BlockQuoteFilled = ({ text, color = 'violet' }: BlockQuoteFilledProps) => {\n    const isLarge = useIsLarge();\n\n    return (\n        <Paper bg={`${color}.0`} py='lg' px='3xl' my='md' c={`${color}.9`}>\n            <Markdown\n                options={{\n                    overrides: {\n                        p: (props) => (\n                            <Text fz={isLarge ? 20 : 18} fw={500}>\n                                {props.children}\n                            </Text>\n                        ),\n                        span: (props) => (\n                            <Text fw={500} span fz={isLarge ? 20 : 18}>\n                                {props.children}\n                            </Text>\n                        ),\n                        pre: (props) => <Text fw={500}>{props.children}</Text>,\n                        code: (props) => <Markdown>{props.children}</Markdown>,\n                    },\n                }}\n            >\n                {text}\n            </Markdown>\n        </Paper>\n    );\n};\n"
        ],
        "mappings": "AAAA,SAASA,KAAK,EAAEC,IAAI,QAAQ,eAAe;AAC3C,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,SAASC,UAAU,QAAQ,cAAc;AAEzC,UAAUC,qBAAqB,CAAC;EAC5BC,IAAI,EAAE,MAAM;EACZC,KAAK,CAAC,EAAE,MAAM;AAClB;AAEA,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAAEF,IAAI;EAAEC,KAAK,GAAG;AAAgC,CAAtB,EAAEF,qBAAqB,KAAK;EACnF,MAAMI,OAAO,GAAGL,UAAU,CAAC,CAAC;EAE5B,OACI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAGG,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,IAAI,CAAC;AAC1E,YAAY,CAAC,QAAQ,CACL,OAAO,CAAC,CAAC;MACLG,SAAS,EAAE;QACPC,CAAC,EAAGC,KAAK,IACL,CAAC,IAAI,CAAC,EAAE,CAAC,CAACH,OAAO,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;AACjE,gCAAgC,CAACG,KAAK,CAACC,QAAQ;AAC/C,4BAA4B,EAAE,IAAI,CACT;QACDC,IAAI,EAAGF,KAAK,IACR,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAACH,OAAO,GAAG,EAAE,GAAG,EAAE,CAAC;AACtE,gCAAgC,CAACG,KAAK,CAACC,QAAQ;AAC/C,4BAA4B,EAAE,IAAI,CACT;QACDE,GAAG,EAAGH,KAAK,IAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAACA,KAAK,CAACC,QAAQ,CAAC,EAAE,IAAI,CAAC;QACtDG,IAAI,EAAGJ,KAAK,IAAK,CAAC,QAAQ,CAAC,CAACA,KAAK,CAACC,QAAQ,CAAC,EAAE,QAAQ;MACzD;IACJ,CAAC,CAAC;AAElB,gBAAgB,CAACP,IAAI;AACrB,YAAY,EAAE,QAAQ;AACtB,QAAQ,EAAE,KAAK,CAAC;AAEhB,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx } from \"react/jsx-runtime\";\nimport { Paper, Text } from \"@mantine/core\";\nimport Markdown from \"markdown-to-jsx\";\nimport { useIsLarge } from \"@/shared/lib\";\nexport const BlockQuoteFilled = ({\n  text,\n  color = \"violet\"\n}) => {\n  const isLarge = useIsLarge();\n  return /* @__PURE__ */ jsx(Paper, { bg: `${color}.0`, py: \"lg\", px: \"3xl\", my: \"md\", c: `${color}.9`, children: /* @__PURE__ */ jsx(Markdown, { options: {\n    overrides: {\n      p: (props) => /* @__PURE__ */ jsx(Text, { fz: isLarge ? 20 : 18, fw: 500, children: props.children }),\n      span: (props) => /* @__PURE__ */ jsx(Text, { fw: 500, span: true, fz: isLarge ? 20 : 18, children: props.children }),\n      pre: (props) => /* @__PURE__ */ jsx(Text, { fw: 500, children: props.children }),\n      code: (props) => /* @__PURE__ */ jsx(Markdown, { children: props.children })\n    }\n  }, children: text }) });\n};\n",
      "start": 1750184199159,
      "end": 1750184199396,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/ui/BlockQuoteFilled/index.tsx"
        ],
        "sourcesContent": [
          "import { Paper, Text } from '@mantine/core';\nimport Markdown from 'markdown-to-jsx';\nimport { useIsLarge } from '@/shared/lib';\ninterface BlockQuoteFilledProps {\n  text: string;\n  color?: string;\n}\nexport const BlockQuoteFilled = ({\n  text,\n  color = 'violet'\n}: BlockQuoteFilledProps) => {\n  const isLarge = useIsLarge();\n  return <Paper bg={`${color}.0`} py='lg' px='3xl' my='md' c={`${color}.9`}>\n            <Markdown options={{\n      overrides: {\n        p: props => <Text fz={isLarge ? 20 : 18} fw={500}>\n                                {props.children}\n                            </Text>,\n        span: props => <Text fw={500} span fz={isLarge ? 20 : 18}>\n                                {props.children}\n                            </Text>,\n        pre: props => <Text fw={500}>{props.children}</Text>,\n        code: props => <Markdown>{props.children}</Markdown>\n      }\n    }}>\n                {text}\n            </Markdown>\n        </Paper>;\n};"
        ],
        "mappings": "AAeoB;AAfpB,SAAS,OAAO,YAAY;AAC5B,OAAO,cAAc;AACrB,SAAS,kBAAkB;AAKpB,aAAM,mBAAmB,CAAC;AAAA,EAC/B;AAAA,EACA,QAAQ;AACV,MAA6B;AAC3B,QAAM,UAAU,WAAW;AAC3B,SAAO,oBAAC,SAAM,IAAI,GAAG,KAAK,MAAM,IAAG,MAAK,IAAG,OAAM,IAAG,MAAK,GAAG,GAAG,KAAK,MAC1D,8BAAC,YAAS,SAAS;AAAA,IACzB,WAAW;AAAA,MACT,GAAG,WAAS,oBAAC,QAAK,IAAI,UAAU,KAAK,IAAI,IAAI,KACpB,gBAAM,UACX;AAAA,MACpB,MAAM,WAAS,oBAAC,QAAK,IAAI,KAAK,MAAI,MAAC,IAAI,UAAU,KAAK,IAC7B,gBAAM,UACX;AAAA,MACpB,KAAK,WAAS,oBAAC,QAAK,IAAI,KAAM,gBAAM,UAAS;AAAA,MAC7C,MAAM,WAAS,oBAAC,YAAU,gBAAM,UAAS;AAAA,IAC3C;AAAA,EACF,GACa,gBACL,GACJ;AACR;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750184199396,
      "end": 1750184199396,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Report/ui/BlockQuoteFilled/index.tsx [vike:pluginModuleBanner] */\nimport { jsx } from \"react/jsx-runtime\";\nimport { Paper, Text } from \"@mantine/core\";\nimport Markdown from \"markdown-to-jsx\";\nimport { useIsLarge } from \"@/shared/lib\";\nexport const BlockQuoteFilled = ({\n  text,\n  color = \"violet\"\n}) => {\n  const isLarge = useIsLarge();\n  return /* @__PURE__ */ jsx(Paper, { bg: `${color}.0`, py: \"lg\", px: \"3xl\", my: \"md\", c: `${color}.9`, children: /* @__PURE__ */ jsx(Markdown, { options: {\n    overrides: {\n      p: (props) => /* @__PURE__ */ jsx(Text, { fz: isLarge ? 20 : 18, fw: 500, children: props.children }),\n      span: (props) => /* @__PURE__ */ jsx(Text, { fw: 500, span: true, fz: isLarge ? 20 : 18, children: props.children }),\n      pre: (props) => /* @__PURE__ */ jsx(Text, { fw: 500, children: props.children }),\n      code: (props) => /* @__PURE__ */ jsx(Markdown, { children: props.children })\n    }\n  }, children: text }) });\n};\n",
      "start": 1750184199396,
      "end": 1750184199397,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Report/ui/BlockQuoteFilled/index.tsx"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjftF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;"
      }
    }
  ]
}
