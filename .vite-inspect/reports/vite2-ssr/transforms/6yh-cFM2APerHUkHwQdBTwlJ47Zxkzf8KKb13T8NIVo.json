{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/features/CreateReviewForm/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createStore, sample } from 'effector';\n\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\n\nimport { getSurveysInfoQuery, UserReportComment } from '@/entities/Report';\nimport { createReviewMutation, ReviewModel } from '@/entities/Review';\n\nexport const CreateReviewFormModel = atom(() => {\n    const $isSubmitted = createStore(false);\n    const $comments = createStore<UserReportComment[]>([]);\n\n    sample({\n        clock: getSurveysInfoQuery.finished.success,\n        fn: ({ result }) => result?.left_comments ?? [],\n        target: $comments,\n    });\n\n    sample({\n        clock: $comments,\n        source: ReviewModel.$currentReviewId,\n        fn: (id, comments) => Boolean(comments?.filter(({ user_report }) => user_report === id).length),\n        target: $isSubmitted,\n    });\n\n    sample({\n        clock: createReviewMutation.finished.success,\n        fn: noop,\n        target: getSurveysInfoQuery.refresh,\n    });\n\n    return {\n        $isSubmitted,\n    };\n});\n",
      "start": 1750239308435,
      "end": 1750239308463,
      "sourcemaps": null
    },
    {
      "name": "vite:react-swc",
      "result": "import { withFactory as _effector$factory } from 'effector';\nimport { createStore, sample } from 'effector';\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\nimport { getSurveysInfoQuery } from '@/entities/Report';\nimport { createReviewMutation, ReviewModel } from '@/entities/Review';\nexport const CreateReviewFormModel = _effector$factory({\n    sid: \"atb2mzgj\",\n    fn: ()=>atom(()=>{\n            const $isSubmitted = createStore(false, {\n                sid: \"1dbth5xl\"\n            });\n            const $comments = createStore([], {\n                sid: \"90h4eiiz\"\n            });\n            sample({\n                and: [\n                    {\n                        clock: getSurveysInfoQuery.finished.success,\n                        fn: ({ result })=>result?.left_comments ?? [],\n                        target: $comments\n                    }\n                ],\n                or: {\n                    sid: \"3ldfkz6t\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: $comments,\n                        source: ReviewModel.$currentReviewId,\n                        fn: (id, comments)=>Boolean(comments?.filter(({ user_report })=>user_report === id).length),\n                        target: $isSubmitted\n                    }\n                ],\n                or: {\n                    sid: \"arg70agu\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: createReviewMutation.finished.success,\n                        fn: noop,\n                        target: getSurveysInfoQuery.refresh\n                    }\n                ],\n                or: {\n                    sid: \"3ezd1jou\"\n                }\n            });\n            return {\n                $isSubmitted\n            };\n        })\n});\n",
      "start": 1750239308463,
      "end": 1750239308471,
      "order": "pre",
      "sourcemaps": "{\"version\":3,\"sources\":[\"/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/features/CreateReviewForm/model/index.ts\"],\"sourcesContent\":[\"import { createStore, sample } from 'effector';\\n\\nimport { atom } from '@/shared/factories';\\nimport { noop } from '@/shared/lib';\\n\\nimport { getSurveysInfoQuery, UserReportComment } from '@/entities/Report';\\nimport { createReviewMutation, ReviewModel } from '@/entities/Review';\\n\\nexport const CreateReviewFormModel = atom(() => {\\n    const $isSubmitted = createStore(false);\\n    const $comments = createStore<UserReportComment[]>([]);\\n\\n    sample({\\n        clock: getSurveysInfoQuery.finished.success,\\n        fn: ({ result }) => result?.left_comments ?? [],\\n        target: $comments,\\n    });\\n\\n    sample({\\n        clock: $comments,\\n        source: ReviewModel.$currentReviewId,\\n        fn: (id, comments) => Boolean(comments?.filter(({ user_report }) => user_report === id).length),\\n        target: $isSubmitted,\\n    });\\n\\n    sample({\\n        clock: createReviewMutation.finished.success,\\n        fn: noop,\\n        target: getSurveysInfoQuery.refresh,\\n    });\\n\\n    return {\\n        $isSubmitted,\\n    };\\n});\\n\"],\"names\":[\"createStore\",\"sample\",\"atom\",\"noop\",\"getSurveysInfoQuery\",\"createReviewMutation\",\"ReviewModel\",\"CreateReviewFormModel\",\"$isSubmitted\",\"$comments\",\"clock\",\"finished\",\"success\",\"fn\",\"result\",\"left_comments\",\"target\",\"source\",\"$currentReviewId\",\"id\",\"comments\",\"Boolean\",\"filter\",\"user_report\",\"length\",\"refresh\"],\"mappings\":\";AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,WAAW;AAE/C,SAASC,IAAI,QAAQ,qBAAqB;AAC1C,SAASC,IAAI,QAAQ,eAAe;AAEpC,SAASC,mBAAmB,QAA2B,oBAAoB;AAC3E,SAASC,oBAAoB,EAAEC,WAAW,QAAQ,oBAAoB;AAEtE,OAAO,MAAMC;;YAAwBL,KAAK;YACtC,MAAMM,eAAeR,YAAY;;;YACjC,MAAMS,YAAYT,YAAiC,EAAE;;;YAErDC;;oBAAO;wBACHS,OAAON,oBAAoBO,QAAQ,CAACC,OAAO;wBAC3CC,IAAI,CAAC,EAAEC,MAAM,EAAE,GAAKA,QAAQC,iBAAiB,EAAE;wBAC/CC,QAAQP;oBACZ;;;;;;YAEAR;;oBAAO;wBACHS,OAAOD;wBACPQ,QAAQX,YAAYY,gBAAgB;wBACpCL,IAAI,CAACM,IAAIC,WAAaC,QAAQD,UAAUE,OAAO,CAAC,EAAEC,WAAW,EAAE,GAAKA,gBAAgBJ,IAAIK;wBACxFR,QAAQR;oBACZ;;;;;;YAEAP;;oBAAO;wBACHS,OAAOL,qBAAqBM,QAAQ,CAACC,OAAO;wBAC5CC,IAAIV;wBACJa,QAAQZ,oBAAoBqB,OAAO;oBACvC;;;;;;YAEA,OAAO;gBACHjB;YACJ;QACJ;GAAG\"}"
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _effector$factory } from \"effector\";\nimport { createStore, sample } from \"effector\";\nimport { atom } from \"@/shared/factories\";\nimport { noop } from \"@/shared/lib\";\nimport { getSurveysInfoQuery } from \"@/entities/Report\";\nimport { createReviewMutation, ReviewModel } from \"@/entities/Review\";\nexport const CreateReviewFormModel = _effector$factory({\n  sid: \"atb2mzgj\",\n  fn: () => atom(() => {\n    const $isSubmitted = createStore(false, {\n      sid: \"1dbth5xl\"\n    });\n    const $comments = createStore([], {\n      sid: \"90h4eiiz\"\n    });\n    sample({\n      and: [\n        {\n          clock: getSurveysInfoQuery.finished.success,\n          fn: ({ result }) => result?.left_comments ?? [],\n          target: $comments\n        }\n      ],\n      or: {\n        sid: \"3ldfkz6t\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: $comments,\n          source: ReviewModel.$currentReviewId,\n          fn: (id, comments) => Boolean(comments?.filter(({ user_report }) => user_report === id).length),\n          target: $isSubmitted\n        }\n      ],\n      or: {\n        sid: \"arg70agu\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: createReviewMutation.finished.success,\n          fn: noop,\n          target: getSurveysInfoQuery.refresh\n        }\n      ],\n      or: {\n        sid: \"3ezd1jou\"\n      }\n    });\n    return {\n      $isSubmitted\n    };\n  })\n});\n",
      "start": 1750239308471,
      "end": 1750239308712,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/features/CreateReviewForm/model/index.ts"
        ],
        "sourcesContent": [
          "import { withFactory as _effector$factory } from 'effector';\nimport { createStore, sample } from 'effector';\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\nimport { getSurveysInfoQuery } from '@/entities/Report';\nimport { createReviewMutation, ReviewModel } from '@/entities/Review';\nexport const CreateReviewFormModel = _effector$factory({\n    sid: \"atb2mzgj\",\n    fn: ()=>atom(()=>{\n            const $isSubmitted = createStore(false, {\n                sid: \"1dbth5xl\"\n            });\n            const $comments = createStore([], {\n                sid: \"90h4eiiz\"\n            });\n            sample({\n                and: [\n                    {\n                        clock: getSurveysInfoQuery.finished.success,\n                        fn: ({ result })=>result?.left_comments ?? [],\n                        target: $comments\n                    }\n                ],\n                or: {\n                    sid: \"3ldfkz6t\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: $comments,\n                        source: ReviewModel.$currentReviewId,\n                        fn: (id, comments)=>Boolean(comments?.filter(({ user_report })=>user_report === id).length),\n                        target: $isSubmitted\n                    }\n                ],\n                or: {\n                    sid: \"arg70agu\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: createReviewMutation.finished.success,\n                        fn: noop,\n                        target: getSurveysInfoQuery.refresh\n                    }\n                ],\n                or: {\n                    sid: \"3ezd1jou\"\n                }\n            });\n            return {\n                $isSubmitted\n            };\n        })\n});\n"
        ],
        "mappings": "AAAA,SAAS,eAAe,yBAAyB;AACjD,SAAS,aAAa,cAAc;AACpC,SAAS,YAAY;AACrB,SAAS,YAAY;AACrB,SAAS,2BAA2B;AACpC,SAAS,sBAAsB,mBAAmB;AAC3C,aAAM,wBAAwB,kBAAkB;AAAA,EACnD,KAAK;AAAA,EACL,IAAI,MAAI,KAAK,MAAI;AACT,UAAM,eAAe,YAAY,OAAO;AAAA,MACpC,KAAK;AAAA,IACT,CAAC;AACD,UAAM,YAAY,YAAY,CAAC,GAAG;AAAA,MAC9B,KAAK;AAAA,IACT,CAAC;AACD,WAAO;AAAA,MACH,KAAK;AAAA,QACD;AAAA,UACI,OAAO,oBAAoB,SAAS;AAAA,UACpC,IAAI,CAAC,EAAE,OAAO,MAAI,QAAQ,iBAAiB,CAAC;AAAA,UAC5C,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH,KAAK;AAAA,QACD;AAAA,UACI,OAAO;AAAA,UACP,QAAQ,YAAY;AAAA,UACpB,IAAI,CAAC,IAAI,aAAW,QAAQ,UAAU,OAAO,CAAC,EAAE,YAAY,MAAI,gBAAgB,EAAE,EAAE,MAAM;AAAA,UAC1F,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH,KAAK;AAAA,QACD;AAAA,UACI,OAAO,qBAAqB,SAAS;AAAA,UACrC,IAAI;AAAA,UACJ,QAAQ,oBAAoB;AAAA,QAChC;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH;AAAA,IACJ;AAAA,EACJ,CAAC;AACT,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750239308712,
      "end": 1750239308712,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750239308712,
      "end": 1750239308712,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750239308712,
      "end": 1750239308712,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/features/CreateReviewForm/model/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _effector$factory } from \"effector\";\nimport { createStore, sample } from \"effector\";\nimport { atom } from \"@/shared/factories\";\nimport { noop } from \"@/shared/lib\";\nimport { getSurveysInfoQuery } from \"@/entities/Report\";\nimport { createReviewMutation, ReviewModel } from \"@/entities/Review\";\nexport const CreateReviewFormModel = _effector$factory({\n  sid: \"atb2mzgj\",\n  fn: () => atom(() => {\n    const $isSubmitted = createStore(false, {\n      sid: \"1dbth5xl\"\n    });\n    const $comments = createStore([], {\n      sid: \"90h4eiiz\"\n    });\n    sample({\n      and: [\n        {\n          clock: getSurveysInfoQuery.finished.success,\n          fn: ({ result }) => result?.left_comments ?? [],\n          target: $comments\n        }\n      ],\n      or: {\n        sid: \"3ldfkz6t\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: $comments,\n          source: ReviewModel.$currentReviewId,\n          fn: (id, comments) => Boolean(comments?.filter(({ user_report }) => user_report === id).length),\n          target: $isSubmitted\n        }\n      ],\n      or: {\n        sid: \"arg70agu\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: createReviewMutation.finished.success,\n          fn: noop,\n          target: getSurveysInfoQuery.refresh\n        }\n      ],\n      or: {\n        sid: \"3ezd1jou\"\n      }\n    });\n    return {\n      $isSubmitted\n    };\n  })\n});\n",
      "start": 1750239308713,
      "end": 1750239308713,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/features/CreateReviewForm/model/index.ts"],
        "names": [],
        "mappingszC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACttD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;"
      }
    }
  ]
}
