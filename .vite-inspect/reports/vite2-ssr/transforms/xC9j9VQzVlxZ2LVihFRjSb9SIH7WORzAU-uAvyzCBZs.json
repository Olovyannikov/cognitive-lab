{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/ui/TestMultipleQuestion/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Checkbox, Paper, Stack } from '@mantine/core';\n\nimport { useIsLarge } from '@/shared/lib';\nimport { IconCheck, InputBorderless } from '@/shared/ui';\n\nimport type { QuestionsResponse } from '../../api/dto';\nimport type { MultiChoiceAnswer } from '../../api/types';\nimport { AnswerLabel } from '../AnswerLabel';\nimport { QuestionTitle } from '../TestQuestionTitle';\nimport { useMultipleQuestionViewModel } from './view-model';\n\nimport s from './TestMultipleQuestion.module.css';\n\ninterface TestMultipleQuestionProps extends QuestionsResponse {\n    page: number;\n    value: MultiChoiceAnswer[] | null;\n    onChange: (payload: {\n        question: string;\n        answer: { input?: string; value: string }[];\n        index: number;\n        isMultiple: boolean;\n    }) => void;\n}\n\nexport const TestMultipleQuestion = ({ text, hint, options, onChange, value, page, id }: TestMultipleQuestionProps) => {\n    const isLarge = useIsLarge();\n    const { localValues, input, setLocalValues, setInput } = useMultipleQuestionViewModel({\n        onChange,\n        options,\n        value,\n        page,\n        id,\n    });\n\n    const showInput = options && value?.map((el) => el.value)?.includes(options[options?.length - 1].id);\n\n    return (\n        <Paper mb='5xl'>\n            <QuestionTitle text={text} hint={hint} />\n            <Stack gap='xs' className={s.wrap}>\n                <Checkbox.Group\n                    value={localValues.length ? localValues : (value?.map((v) => v.value) ?? localValues)}\n                    onChange={setLocalValues}\n                >\n                    <Stack gap='lg' className={s.checkboxWrapper}>\n                        {options?.map((option) => (\n                            <Checkbox\n                                size={isLarge ? '32px' : 'lg'}\n                                radius='xs'\n                                color='lime.8'\n                                key={option.id}\n                                label={<AnswerLabel>{option.text}</AnswerLabel>}\n                                value={option.id}\n                                icon={IconCheck}\n                            />\n                        ))}\n                    </Stack>\n                </Checkbox.Group>\n                {showInput && (\n                    <InputBorderless\n                        value={input.length > 0 ? input : value?.find((el) => el.input)?.input}\n                        onChange={(e) => setInput(e.target.value)}\n                    />\n                )}\n            </Stack>\n        </Paper>\n    );\n};\n",
      "start": 1746125082059,
      "end": 1746125082093,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { Checkbox, Paper, Stack } from '@mantine/core';\nimport { useIsLarge } from '@/shared/lib';\nimport { IconCheck, InputBorderless } from '@/shared/ui';\nimport type { QuestionsResponse } from '../../api/dto';\nimport type { MultiChoiceAnswer } from '../../api/types';\nimport { AnswerLabel } from '../AnswerLabel';\nimport { QuestionTitle } from '../TestQuestionTitle';\nimport { useMultipleQuestionViewModel } from './view-model';\nimport s from './TestMultipleQuestion.module.css';\ninterface TestMultipleQuestionProps extends QuestionsResponse {\n  page: number;\n  value: MultiChoiceAnswer[] | null;\n  onChange: (payload: {\n    question: string;\n    answer: {\n      input?: string;\n      value: string;\n    }[];\n    index: number;\n    isMultiple: boolean;\n  }) => void;\n}\nexport const TestMultipleQuestion = ({\n  text,\n  hint,\n  options,\n  onChange,\n  value,\n  page,\n  id\n}: TestMultipleQuestionProps) => {\n  const isLarge = useIsLarge();\n  const {\n    localValues,\n    input,\n    setLocalValues,\n    setInput\n  } = useMultipleQuestionViewModel({\n    onChange,\n    options,\n    value,\n    page,\n    id\n  });\n  const showInput = options && value?.map(el => el.value)?.includes(options[options?.length - 1].id);\n  return <Paper mb='5xl'>\n            <QuestionTitle text={text} hint={hint} />\n            <Stack gap='xs' className={s.wrap}>\n                <Checkbox.Group value={localValues.length ? localValues : value?.map(v => v.value) ?? localValues} onChange={setLocalValues}>\n                    <Stack gap='lg' className={s.checkboxWrapper}>\n                        {options?.map(option => <Checkbox size={isLarge ? '32px' : 'lg'} radius='xs' color='lime.8' key={option.id} label={<AnswerLabel>{option.text}</AnswerLabel>} value={option.id} icon={IconCheck} />)}\n                    </Stack>\n                </Checkbox.Group>\n                {showInput && <InputBorderless value={input.length > 0 ? input : value?.find(el => el.input)?.input} onChange={e => setInput(e.target.value)} />}\n            </Stack>\n        </Paper>;\n};",
      "start": 1746125082093,
      "end": 1746125082095,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "Checkbox",
          "Paper",
          "Stack",
          "useIsLarge",
          "IconCheck",
          "InputBorderless",
          "QuestionsResponse",
          "MultiChoiceAnswer",
          "AnswerLabel",
          "QuestionTitle",
          "useMultipleQuestionViewModel",
          "s",
          "TestMultipleQuestionProps",
          "page",
          "value",
          "onChange",
          "payload",
          "question",
          "answer",
          "input",
          "index",
          "isMultiple",
          "TestMultipleQuestion",
          "text",
          "hint",
          "options",
          "id",
          "isLarge",
          "localValues",
          "setLocalValues",
          "setInput",
          "showInput",
          "map",
          "el",
          "includes",
          "length",
          "wrap",
          "v",
          "checkboxWrapper",
          "option",
          "find",
          "e",
          "target"
        ],
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/ui/TestMultipleQuestion/index.tsx"
        ],
        "sourcesContent": [
          "import { Checkbox, Paper, Stack } from '@mantine/core';\n\nimport { useIsLarge } from '@/shared/lib';\nimport { IconCheck, InputBorderless } from '@/shared/ui';\n\nimport type { QuestionsResponse } from '../../api/dto';\nimport type { MultiChoiceAnswer } from '../../api/types';\nimport { AnswerLabel } from '../AnswerLabel';\nimport { QuestionTitle } from '../TestQuestionTitle';\nimport { useMultipleQuestionViewModel } from './view-model';\n\nimport s from './TestMultipleQuestion.module.css';\n\ninterface TestMultipleQuestionProps extends QuestionsResponse {\n    page: number;\n    value: MultiChoiceAnswer[] | null;\n    onChange: (payload: {\n        question: string;\n        answer: { input?: string; value: string }[];\n        index: number;\n        isMultiple: boolean;\n    }) => void;\n}\n\nexport const TestMultipleQuestion = ({ text, hint, options, onChange, value, page, id }: TestMultipleQuestionProps) => {\n    const isLarge = useIsLarge();\n    const { localValues, input, setLocalValues, setInput } = useMultipleQuestionViewModel({\n        onChange,\n        options,\n        value,\n        page,\n        id,\n    });\n\n    const showInput = options && value?.map((el) => el.value)?.includes(options[options?.length - 1].id);\n\n    return (\n        <Paper mb='5xl'>\n            <QuestionTitle text={text} hint={hint} />\n            <Stack gap='xs' className={s.wrap}>\n                <Checkbox.Group\n                    value={localValues.length ? localValues : (value?.map((v) => v.value) ?? localValues)}\n                    onChange={setLocalValues}\n                >\n                    <Stack gap='lg' className={s.checkboxWrapper}>\n                        {options?.map((option) => (\n                            <Checkbox\n                                size={isLarge ? '32px' : 'lg'}\n                                radius='xs'\n                                color='lime.8'\n                                key={option.id}\n                                label={<AnswerLabel>{option.text}</AnswerLabel>}\n                                value={option.id}\n                                icon={IconCheck}\n                            />\n                        ))}\n                    </Stack>\n                </Checkbox.Group>\n                {showInput && (\n                    <InputBorderless\n                        value={input.length > 0 ? input : value?.find((el) => el.input)?.input}\n                        onChange={(e) => setInput(e.target.value)}\n                    />\n                )}\n            </Stack>\n        </Paper>\n    );\n};\n"
        ],
        "mappings": "AAAA,SAASA,QAAQ,EAAEC,KAAK,EAAEC,KAAK,QAAQ,eAAe;AAEtD,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,SAAS,EAAEC,eAAe,QAAQ,aAAa;AAExD,cAAcC,iBAAiB,QAAQ,eAAe;AACtD,cAAcC,iBAAiB,QAAQ,iBAAiB;AACxD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,4BAA4B,QAAQ,cAAc;AAE3D,OAAOC,CAAC,MAAM,mCAAmC;AAEjD,UAAUC,yBAAyB,SAASN,iBAAiB,CAAC;EAC1DO,IAAI,EAAE,MAAM;EACZC,KAAK,EAAEP,iBAAiB,EAAE,GAAG,IAAI;EACjCQ,QAAQ,EAAE,CAACC,OAAO,EAAE;IAChBC,QAAQ,EAAE,MAAM;IAChBC,MAAM,EAAE;MAAEC,KAAK,CAAC,EAAE,MAAM;MAAEL,KAAK,EAAE,MAAM;IAAC,CAAC,EAAE;IAC3CM,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE,OAAO;EACvB,CAAC,EAAE,GAAG,IAAI;AACd;AAEA,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,IAAI;EAAEC,IAAI;EAAEC,OAAO;EAAEV,QAAQ;EAAED,KAAK;EAAED,IAAI;EAAEa;AAA8B,CAA1B,EAAEd,yBAAyB,KAAK;EACnH,MAAMe,OAAO,GAAGxB,UAAU,CAAC,CAAC;EAC5B,MAAM;IAAEyB,WAAW;IAAET,KAAK;IAAEU,cAAc;IAAEC;EAAS,CAAC,GAAGpB,4BAA4B,CAAC;IAClFK,QAAQ;IACRU,OAAO;IACPX,KAAK;IACLD,IAAI;IACJa;EACJ,CAAC,CAAC;EAEF,MAAMK,SAAS,GAAGN,OAAO,IAAIX,KAAK,EAAEkB,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACnB,KAAK,CAAC,EAAEoB,QAAQ,CAACT,OAAO,CAACA,OAAO,EAAEU,MAAM,GAAG,CAAC,CAAC,CAACT,EAAE,CAAC;EAEpG,OACI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK;AACvB,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,CAACH,IAAI,CAAC,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC;AAClD,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAACb,CAAC,CAACyB,IAAI,CAAC;AAC9C,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CACX,KAAK,CAAC,CAACR,WAAW,CAACO,MAAM,GAAGP,WAAW,GAAId,KAAK,EAAEkB,GAAG,CAAEK,CAAC,IAAKA,CAAC,CAACvB,KAAK,CAAC,IAAIc,WAAY,CAAC,CACtF,QAAQ,CAAC,CAACC,cAAc,CAAC;AAE7C,oBAAoB,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAClB,CAAC,CAAC2B,eAAe,CAAC;AACjE,wBAAwB,CAACb,OAAO,EAAEO,GAAG,CAAEO,MAAM,IACjB,CAAC,QAAQ,CACL,IAAI,CAAC,CAACZ,OAAO,GAAG,MAAM,GAAG,IAAI,CAAC,CAC9B,MAAM,CAAC,IAAI,CACX,KAAK,CAAC,QAAQ,CACd,GAAG,CAAC,CAACY,MAAM,CAACb,EAAE,CAAC,CACf,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAACa,MAAM,CAAChB,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC,CAChD,KAAK,CAAC,CAACgB,MAAM,CAACb,EAAE,CAAC,CACjB,IAAI,CAAC,CAACtB,SAAS,CAAC,GAEvB,CAAC;AAC1B,oBAAoB,EAAE,KAAK;AAC3B,gBAAgB,EAAE,QAAQ,CAAC,KAAK;AAChC,gBAAgB,CAAC2B,SAAS,IACN,CAAC,eAAe,CACZ,KAAK,CAAC,CAACZ,KAAK,CAACgB,MAAM,GAAG,CAAC,GAAGhB,KAAK,GAAGL,KAAK,EAAE0B,IAAI,CAAEP,EAAE,IAAKA,EAAE,CAACd,KAAK,CAAC,EAAEA,KAAK,CAAC,CACvE,QAAQ,CAAC,CAAEsB,CAAC,IAAKX,QAAQ,CAACW,CAAC,CAACC,MAAM,CAAC5B,KAAK,CAAC,CAAC,GAEjD;AACjB,YAAY,EAAE,KAAK;AACnB,QAAQ,EAAE,KAAK,CAAC;AAEhB,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Checkbox, Paper, Stack } from \"@mantine/core\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { IconCheck, InputBorderless } from \"@/shared/ui\";\nimport { AnswerLabel } from \"../AnswerLabel\";\nimport { QuestionTitle } from \"../TestQuestionTitle\";\nimport { useMultipleQuestionViewModel } from \"./view-model\";\nimport s from \"./TestMultipleQuestion.module.css\";\nexport const TestMultipleQuestion = ({\n  text,\n  hint,\n  options,\n  onChange,\n  value,\n  page,\n  id\n}) => {\n  const isLarge = useIsLarge();\n  const {\n    localValues,\n    input,\n    setLocalValues,\n    setInput\n  } = useMultipleQuestionViewModel({\n    onChange,\n    options,\n    value,\n    page,\n    id\n  });\n  const showInput = options && value?.map((el) => el.value)?.includes(options[options?.length - 1].id);\n  return /* @__PURE__ */ jsxs(Paper, { mb: \"5xl\", children: [\n    /* @__PURE__ */ jsx(QuestionTitle, { text, hint }),\n    /* @__PURE__ */ jsxs(Stack, { gap: \"xs\", className: s.wrap, children: [\n      /* @__PURE__ */ jsx(Checkbox.Group, { value: localValues.length ? localValues : value?.map((v) => v.value) ?? localValues, onChange: setLocalValues, children: /* @__PURE__ */ jsx(Stack, { gap: \"lg\", className: s.checkboxWrapper, children: options?.map((option) => /* @__PURE__ */ jsx(Checkbox, { size: isLarge ? \"32px\" : \"lg\", radius: \"xs\", color: \"lime.8\", label: /* @__PURE__ */ jsx(AnswerLabel, { children: option.text }), value: option.id, icon: IconCheck }, option.id)) }) }),\n      showInput && /* @__PURE__ */ jsx(InputBorderless, { value: input.length > 0 ? input : value?.find((el) => el.input)?.input, onChange: (e) => setInput(e.target.value) })\n    ] })\n  ] });\n};\n",
      "start": 1746125082095,
      "end": 1746125082396,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/ui/TestMultipleQuestion/index.tsx"
        ],
        "sourcesContent": [
          "import { Checkbox, Paper, Stack } from '@mantine/core';\nimport { useIsLarge } from '@/shared/lib';\nimport { IconCheck, InputBorderless } from '@/shared/ui';\nimport type { QuestionsResponse } from '../../api/dto';\nimport type { MultiChoiceAnswer } from '../../api/types';\nimport { AnswerLabel } from '../AnswerLabel';\nimport { QuestionTitle } from '../TestQuestionTitle';\nimport { useMultipleQuestionViewModel } from './view-model';\nimport s from './TestMultipleQuestion.module.css';\ninterface TestMultipleQuestionProps extends QuestionsResponse {\n  page: number;\n  value: MultiChoiceAnswer[] | null;\n  onChange: (payload: {\n    question: string;\n    answer: {\n      input?: string;\n      value: string;\n    }[];\n    index: number;\n    isMultiple: boolean;\n  }) => void;\n}\nexport const TestMultipleQuestion = ({\n  text,\n  hint,\n  options,\n  onChange,\n  value,\n  page,\n  id\n}: TestMultipleQuestionProps) => {\n  const isLarge = useIsLarge();\n  const {\n    localValues,\n    input,\n    setLocalValues,\n    setInput\n  } = useMultipleQuestionViewModel({\n    onChange,\n    options,\n    value,\n    page,\n    id\n  });\n  const showInput = options && value?.map(el => el.value)?.includes(options[options?.length - 1].id);\n  return <Paper mb='5xl'>\n            <QuestionTitle text={text} hint={hint} />\n            <Stack gap='xs' className={s.wrap}>\n                <Checkbox.Group value={localValues.length ? localValues : value?.map(v => v.value) ?? localValues} onChange={setLocalValues}>\n                    <Stack gap='lg' className={s.checkboxWrapper}>\n                        {options?.map(option => <Checkbox size={isLarge ? '32px' : 'lg'} radius='xs' color='lime.8' key={option.id} label={<AnswerLabel>{option.text}</AnswerLabel>} value={option.id} icon={IconCheck} />)}\n                    </Stack>\n                </Checkbox.Group>\n                {showInput && <InputBorderless value={input.length > 0 ? input : value?.find(el => el.input)?.input} onChange={e => setInput(e.target.value)} />}\n            </Stack>\n        </Paper>;\n};"
        ],
        "mappings": "AA8CY,cACA,YADA;AA9CZ,SAAS,UAAU,OAAO,aAAa;AACvC,SAAS,kBAAkB;AAC3B,SAAS,WAAW,uBAAuB;AAG3C,SAAS,mBAAmB;AAC5B,SAAS,qBAAqB;AAC9B,SAAS,oCAAoC;AAC7C,OAAO,OAAO;AAcP,aAAM,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAiC;AAC/B,QAAM,UAAU,WAAW;AAC3B,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,6BAA6B;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACD,QAAM,YAAY,WAAW,OAAO,IAAI,QAAM,GAAG,KAAK,GAAG,SAAS,QAAQ,SAAS,SAAS,CAAC,EAAE,EAAE;AACjG,SAAO,qBAAC,SAAM,IAAG,OACP;AAAA,wBAAC,iBAAc,MAAY,MAAY;AAAA,IACvC,qBAAC,SAAM,KAAI,MAAK,WAAW,EAAE,MACzB;AAAA,0BAAC,SAAS,OAAT,EAAe,OAAO,YAAY,SAAS,cAAc,OAAO,IAAI,OAAK,EAAE,KAAK,KAAK,aAAa,UAAU,gBACzG,8BAAC,SAAM,KAAI,MAAK,WAAW,EAAE,iBACxB,mBAAS,IAAI,YAAU,oBAAC,YAAS,MAAM,UAAU,SAAS,MAAM,QAAO,MAAK,OAAM,UAAyB,OAAO,oBAAC,eAAa,iBAAO,MAAK,GAAgB,OAAO,OAAO,IAAI,MAAM,aAApF,OAAO,EAAwF,CAAE,GACtM,GACJ;AAAA,MACC,aAAa,oBAAC,mBAAgB,OAAO,MAAM,SAAS,IAAI,QAAQ,OAAO,KAAK,QAAM,GAAG,KAAK,GAAG,OAAO,UAAU,OAAK,SAAS,EAAE,OAAO,KAAK,GAAG;AAAA,OAClJ;AAAA,KACJ;AACR;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125082396,
      "end": 1746125082396,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125082397,
      "end": 1746125082397,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125082397,
      "end": 1746125082397,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125082397,
      "end": 1746125082397,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Test/ui/TestMultipleQuestion/index.tsx [vike:pluginModuleBanner] */\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Checkbox, Paper, Stack } from \"@mantine/core\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { IconCheck, InputBorderless } from \"@/shared/ui\";\nimport { AnswerLabel } from \"../AnswerLabel\";\nimport { QuestionTitle } from \"../TestQuestionTitle\";\nimport { useMultipleQuestionViewModel } from \"./view-model\";\nimport s from \"./TestMultipleQuestion.module.css\";\nexport const TestMultipleQuestion = ({\n  text,\n  hint,\n  options,\n  onChange,\n  value,\n  page,\n  id\n}) => {\n  const isLarge = useIsLarge();\n  const {\n    localValues,\n    input,\n    setLocalValues,\n    setInput\n  } = useMultipleQuestionViewModel({\n    onChange,\n    options,\n    value,\n    page,\n    id\n  });\n  const showInput = options && value?.map((el) => el.value)?.includes(options[options?.length - 1].id);\n  return /* @__PURE__ */ jsxs(Paper, { mb: \"5xl\", children: [\n    /* @__PURE__ */ jsx(QuestionTitle, { text, hint }),\n    /* @__PURE__ */ jsxs(Stack, { gap: \"xs\", className: s.wrap, children: [\n      /* @__PURE__ */ jsx(Checkbox.Group, { value: localValues.length ? localValues : value?.map((v) => v.value) ?? localValues, onChange: setLocalValues, children: /* @__PURE__ */ jsx(Stack, { gap: \"lg\", className: s.checkboxWrapper, children: options?.map((option) => /* @__PURE__ */ jsx(Checkbox, { size: isLarge ? \"32px\" : \"lg\", radius: \"xs\", color: \"lime.8\", label: /* @__PURE__ */ jsx(AnswerLabel, { children: option.text }), value: option.id, icon: IconCheck }, option.id)) }) }),\n      showInput && /* @__PURE__ */ jsx(InputBorderless, { value: input.length > 0 ? input : value?.find((el) => el.input)?.input, onChange: (e) => setInput(e.target.value) })\n    ] })\n  ] });\n};\n",
      "start": 1746125082397,
      "end": 1746125082397,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Test/ui/TestMultipleQuestion/index.tsx"],
        "names": [],
        "mappingstD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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
      }
    }
  ]
}
