{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/lib/effector/getScope.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// to support proper scope updates and after transition effects\n\nimport { createStore, fork, type Json, launch, type Node, type Scope, type StateRef } from 'effector';\n\n// types for convenience\ntype StoreSerializationConfig = Exclude<Parameters<typeof createStore>[1], undefined>['serialize'];\n\ntype ScopeInternal = Scope & {\n    reg: Record<string, StateRef & { meta?: Record<string, string> }>;\n    additionalLinks: Record<string, Node[]>;\n};\ntype Values = Record<string, unknown>;\n\nconst isClient = typeof document !== 'undefined';\n\nfunction getServerScope(values?: Values) {\n    return fork({ values });\n}\n\n/**\n * The following code is some VERY VERY VERY BAD HACKS.\n *\n * This only work for a compatibility layer with Next.js and only because of the peculiarities of Next.js behavior.\n *\n * This temporary solution on hacks allows us to solve the pain of library users when working with Next.js, as well as gather much more information to develop a better API.\n */\nconst currentScope: Scope = fork();\n\n/*\n *\n * Handler to get current client scope.\n *\n * Required for proper integrations with dev-tools.\n *\n * @returns current client scope in browser and null in server environment\n */\nexport function getClientScope() {\n    if (isClient) {\n        return currentScope;\n    }\n\n    return null;\n}\n\nlet prevValues: Values;\n/**\n * @private\n *\n * Should not be exported to the public API\n */\n\nfunction HACK_injectValues(scope: Scope, values: Values) {\n    // @ts-expect-error this is a really hacky way to \"hydrate\" scope\n    Object.assign(scope.values.sidMap, values);\n}\n\nfunction HACK_runScopeWatchers(scope: ScopeInternal, linksToRun: string[]) {\n    if (linksToRun.length) {\n        linksToRun.forEach((nodeId) => {\n            const links = scope.additionalLinks[nodeId];\n\n            if (links) {\n                links.forEach((link) => {\n                    if (link.meta.watchOp === 'store') {\n                        launch({\n                            target: link,\n                            params: null,\n                            scope,\n                        });\n                    }\n                });\n            }\n        });\n    }\n}\n\nfunction HACK_updateScopeRefs(tscope: Scope, values: Values) {\n    const scope = tscope as ScopeInternal;\n\n    const linksToRun: string[] = [];\n\n    for (const id in scope.reg) {\n        if (Object.hasOwnProperty.call(scope.reg, id)) {\n            const ref = scope.reg[id];\n\n            /**\n             * Schedule external watchers (useUnit, etc.) re-run\n             */\n            const nodeId = ref?.meta?.id;\n\n            if (nodeId && scope.additionalLinks[nodeId]) {\n                linksToRun.push(nodeId);\n            }\n\n            if (!ref.meta || (!ref.meta?.named && ref.meta?.derived)) {\n                delete scope.reg[id];\n            } else {\n                const sid = ref?.meta?.sid;\n                if (sid && sid in values) {\n                    const serialize = ref?.meta?.serialize as StoreSerializationConfig;\n                    const read = serialize && serialize !== 'ignore' ? serialize?.read : null;\n                    ref.current = read ? read(values[sid] as Json) : values[sid];\n                }\n            }\n        }\n    }\n    queueMicrotask(() => {\n        HACK_runScopeWatchers(scope, linksToRun);\n    });\n}\n\nfunction INTERNAL_getClientScope(values?: Values) {\n    if (!values || values === prevValues) return currentScope;\n    prevValues = values;\n\n    HACK_injectValues(currentScope, values);\n    HACK_updateScopeRefs(currentScope, values);\n\n    return currentScope;\n}\n\nexport const getScope = isClient ? INTERNAL_getClientScope : getServerScope;\n",
      "start": 1746125081670,
      "end": 1746125081715,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "// to support proper scope updates and after transition effects\n\nimport { createStore, fork, type Json, launch, type Node, type Scope, type StateRef } from 'effector';\n\n// types for convenience\ntype StoreSerializationConfig = Exclude<Parameters<typeof createStore>[1], undefined>['serialize'];\ntype ScopeInternal = Scope & {\n  reg: Record<string, StateRef & {\n    meta?: Record<string, string>;\n  }>;\n  additionalLinks: Record<string, Node[]>;\n};\ntype Values = Record<string, unknown>;\nconst isClient = typeof document !== 'undefined';\nfunction getServerScope(values?: Values) {\n  return fork({\n    values\n  });\n}\n\n/**\n * The following code is some VERY VERY VERY BAD HACKS.\n *\n * This only work for a compatibility layer with Next.js and only because of the peculiarities of Next.js behavior.\n *\n * This temporary solution on hacks allows us to solve the pain of library users when working with Next.js, as well as gather much more information to develop a better API.\n */\nconst currentScope: Scope = fork();\n\n/*\n *\n * Handler to get current client scope.\n *\n * Required for proper integrations with dev-tools.\n *\n * @returns current client scope in browser and null in server environment\n */\nexport function getClientScope() {\n  if (isClient) {\n    return currentScope;\n  }\n  return null;\n}\nlet prevValues: Values;\n/**\n * @private\n *\n * Should not be exported to the public API\n */\n\nfunction HACK_injectValues(scope: Scope, values: Values) {\n  // @ts-expect-error this is a really hacky way to \"hydrate\" scope\n  Object.assign(scope.values.sidMap, values);\n}\nfunction HACK_runScopeWatchers(scope: ScopeInternal, linksToRun: string[]) {\n  if (linksToRun.length) {\n    linksToRun.forEach(nodeId => {\n      const links = scope.additionalLinks[nodeId];\n      if (links) {\n        links.forEach(link => {\n          if (link.meta.watchOp === 'store') {\n            launch({\n              target: link,\n              params: null,\n              scope\n            });\n          }\n        });\n      }\n    });\n  }\n}\nfunction HACK_updateScopeRefs(tscope: Scope, values: Values) {\n  const scope = tscope as ScopeInternal;\n  const linksToRun: string[] = [];\n  for (const id in scope.reg) {\n    if (Object.hasOwnProperty.call(scope.reg, id)) {\n      const ref = scope.reg[id];\n\n      /**\n       * Schedule external watchers (useUnit, etc.) re-run\n       */\n      const nodeId = ref?.meta?.id;\n      if (nodeId && scope.additionalLinks[nodeId]) {\n        linksToRun.push(nodeId);\n      }\n      if (!ref.meta || !ref.meta?.named && ref.meta?.derived) {\n        delete scope.reg[id];\n      } else {\n        const sid = ref?.meta?.sid;\n        if (sid && sid in values) {\n          const serialize = ref?.meta?.serialize as StoreSerializationConfig;\n          const read = serialize && serialize !== 'ignore' ? serialize?.read : null;\n          ref.current = read ? read(values[sid] as Json) : values[sid];\n        }\n      }\n    }\n  }\n  queueMicrotask(() => {\n    HACK_runScopeWatchers(scope, linksToRun);\n  });\n}\nfunction INTERNAL_getClientScope(values?: Values) {\n  if (!values || values === prevValues) return currentScope;\n  prevValues = values;\n  HACK_injectValues(currentScope, values);\n  HACK_updateScopeRefs(currentScope, values);\n  return currentScope;\n}\nexport const getScope = isClient ? INTERNAL_getClientScope : getServerScope;",
      "start": 1746125081715,
      "end": 1746125081718,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createStore",
          "fork",
          "Json",
          "launch",
          "Node",
          "Scope",
          "StateRef",
          "StoreSerializationConfig",
          "Exclude",
          "Parameters",
          "ScopeInternal",
          "reg",
          "Record",
          "meta",
          "additionalLinks",
          "Values",
          "isClient",
          "document",
          "getServerScope",
          "values",
          "currentScope",
          "getClientScope",
          "prevValues",
          "HACK_injectValues",
          "scope",
          "Object",
          "assign",
          "sidMap",
          "HACK_runScopeWatchers",
          "linksToRun",
          "length",
          "forEach",
          "nodeId",
          "links",
          "link",
          "watchOp",
          "target",
          "params",
          "HACK_updateScopeRefs",
          "tscope",
          "id",
          "hasOwnProperty",
          "call",
          "ref",
          "push",
          "named",
          "derived",
          "sid",
          "serialize",
          "read",
          "current",
          "queueMicrotask",
          "INTERNAL_getClientScope",
          "getScope"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/lib/effector/getScope.ts"],
        "sourcesContent": [
          "// to support proper scope updates and after transition effects\n\nimport { createStore, fork, type Json, launch, type Node, type Scope, type StateRef } from 'effector';\n\n// types for convenience\ntype StoreSerializationConfig = Exclude<Parameters<typeof createStore>[1], undefined>['serialize'];\n\ntype ScopeInternal = Scope & {\n    reg: Record<string, StateRef & { meta?: Record<string, string> }>;\n    additionalLinks: Record<string, Node[]>;\n};\ntype Values = Record<string, unknown>;\n\nconst isClient = typeof document !== 'undefined';\n\nfunction getServerScope(values?: Values) {\n    return fork({ values });\n}\n\n/**\n * The following code is some VERY VERY VERY BAD HACKS.\n *\n * This only work for a compatibility layer with Next.js and only because of the peculiarities of Next.js behavior.\n *\n * This temporary solution on hacks allows us to solve the pain of library users when working with Next.js, as well as gather much more information to develop a better API.\n */\nconst currentScope: Scope = fork();\n\n/*\n *\n * Handler to get current client scope.\n *\n * Required for proper integrations with dev-tools.\n *\n * @returns current client scope in browser and null in server environment\n */\nexport function getClientScope() {\n    if (isClient) {\n        return currentScope;\n    }\n\n    return null;\n}\n\nlet prevValues: Values;\n/**\n * @private\n *\n * Should not be exported to the public API\n */\n\nfunction HACK_injectValues(scope: Scope, values: Values) {\n    // @ts-expect-error this is a really hacky way to \"hydrate\" scope\n    Object.assign(scope.values.sidMap, values);\n}\n\nfunction HACK_runScopeWatchers(scope: ScopeInternal, linksToRun: string[]) {\n    if (linksToRun.length) {\n        linksToRun.forEach((nodeId) => {\n            const links = scope.additionalLinks[nodeId];\n\n            if (links) {\n                links.forEach((link) => {\n                    if (link.meta.watchOp === 'store') {\n                        launch({\n                            target: link,\n                            params: null,\n                            scope,\n                        });\n                    }\n                });\n            }\n        });\n    }\n}\n\nfunction HACK_updateScopeRefs(tscope: Scope, values: Values) {\n    const scope = tscope as ScopeInternal;\n\n    const linksToRun: string[] = [];\n\n    for (const id in scope.reg) {\n        if (Object.hasOwnProperty.call(scope.reg, id)) {\n            const ref = scope.reg[id];\n\n            /**\n             * Schedule external watchers (useUnit, etc.) re-run\n             */\n            const nodeId = ref?.meta?.id;\n\n            if (nodeId && scope.additionalLinks[nodeId]) {\n                linksToRun.push(nodeId);\n            }\n\n            if (!ref.meta || (!ref.meta?.named && ref.meta?.derived)) {\n                delete scope.reg[id];\n            } else {\n                const sid = ref?.meta?.sid;\n                if (sid && sid in values) {\n                    const serialize = ref?.meta?.serialize as StoreSerializationConfig;\n                    const read = serialize && serialize !== 'ignore' ? serialize?.read : null;\n                    ref.current = read ? read(values[sid] as Json) : values[sid];\n                }\n            }\n        }\n    }\n    queueMicrotask(() => {\n        HACK_runScopeWatchers(scope, linksToRun);\n    });\n}\n\nfunction INTERNAL_getClientScope(values?: Values) {\n    if (!values || values === prevValues) return currentScope;\n    prevValues = values;\n\n    HACK_injectValues(currentScope, values);\n    HACK_updateScopeRefs(currentScope, values);\n\n    return currentScope;\n}\n\nexport const getScope = isClient ? INTERNAL_getClientScope : getServerScope;\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { fork, launch } from \"effector\";\nconst isClient = typeof document !== \"undefined\";\nfunction getServerScope(values) {\n  return fork({\n    values\n  });\n}\nconst currentScope = fork();\nexport function getClientScope() {\n  if (isClient) {\n    return currentScope;\n  }\n  return null;\n}\nlet prevValues;\nfunction HACK_injectValues(scope, values) {\n  Object.assign(scope.values.sidMap, values);\n}\nfunction HACK_runScopeWatchers(scope, linksToRun) {\n  if (linksToRun.length) {\n    linksToRun.forEach((nodeId) => {\n      const links = scope.additionalLinks[nodeId];\n      if (links) {\n        links.forEach((link) => {\n          if (link.meta.watchOp === \"store\") {\n            launch({\n              target: link,\n              params: null,\n              scope\n            });\n          }\n        });\n      }\n    });\n  }\n}\nfunction HACK_updateScopeRefs(tscope, values) {\n  const scope = tscope;\n  const linksToRun = [];\n  for (const id in scope.reg) {\n    if (Object.hasOwnProperty.call(scope.reg, id)) {\n      const ref = scope.reg[id];\n      const nodeId = ref?.meta?.id;\n      if (nodeId && scope.additionalLinks[nodeId]) {\n        linksToRun.push(nodeId);\n      }\n      if (!ref.meta || !ref.meta?.named && ref.meta?.derived) {\n        delete scope.reg[id];\n      } else {\n        const sid = ref?.meta?.sid;\n        if (sid && sid in values) {\n          const serialize = ref?.meta?.serialize;\n          const read = serialize && serialize !== \"ignore\" ? serialize?.read : null;\n          ref.current = read ? read(values[sid]) : values[sid];\n        }\n      }\n    }\n  }\n  queueMicrotask(() => {\n    HACK_runScopeWatchers(scope, linksToRun);\n  });\n}\nfunction INTERNAL_getClientScope(values) {\n  if (!values || values === prevValues) return currentScope;\n  prevValues = values;\n  HACK_injectValues(currentScope, values);\n  HACK_updateScopeRefs(currentScope, values);\n  return currentScope;\n}\nexport const getScope = isClient ? INTERNAL_getClientScope : getServerScope;\n",
      "start": 1746125081718,
      "end": 1746125081778,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/lib/effector/getScope.ts"],
        "sourcesContent": [
          "// to support proper scope updates and after transition effects\n\nimport { createStore, fork, type Json, launch, type Node, type Scope, type StateRef } from 'effector';\n\n// types for convenience\ntype StoreSerializationConfig = Exclude<Parameters<typeof createStore>[1], undefined>['serialize'];\ntype ScopeInternal = Scope & {\n  reg: Record<string, StateRef & {\n    meta?: Record<string, string>;\n  }>;\n  additionalLinks: Record<string, Node[]>;\n};\ntype Values = Record<string, unknown>;\nconst isClient = typeof document !== 'undefined';\nfunction getServerScope(values?: Values) {\n  return fork({\n    values\n  });\n}\n\n/**\n * The following code is some VERY VERY VERY BAD HACKS.\n *\n * This only work for a compatibility layer with Next.js and only because of the peculiarities of Next.js behavior.\n *\n * This temporary solution on hacks allows us to solve the pain of library users when working with Next.js, as well as gather much more information to develop a better API.\n */\nconst currentScope: Scope = fork();\n\n/*\n *\n * Handler to get current client scope.\n *\n * Required for proper integrations with dev-tools.\n *\n * @returns current client scope in browser and null in server environment\n */\nexport function getClientScope() {\n  if (isClient) {\n    return currentScope;\n  }\n  return null;\n}\nlet prevValues: Values;\n/**\n * @private\n *\n * Should not be exported to the public API\n */\n\nfunction HACK_injectValues(scope: Scope, values: Values) {\n  // @ts-expect-error this is a really hacky way to \"hydrate\" scope\n  Object.assign(scope.values.sidMap, values);\n}\nfunction HACK_runScopeWatchers(scope: ScopeInternal, linksToRun: string[]) {\n  if (linksToRun.length) {\n    linksToRun.forEach(nodeId => {\n      const links = scope.additionalLinks[nodeId];\n      if (links) {\n        links.forEach(link => {\n          if (link.meta.watchOp === 'store') {\n            launch({\n              target: link,\n              params: null,\n              scope\n            });\n          }\n        });\n      }\n    });\n  }\n}\nfunction HACK_updateScopeRefs(tscope: Scope, values: Values) {\n  const scope = tscope as ScopeInternal;\n  const linksToRun: string[] = [];\n  for (const id in scope.reg) {\n    if (Object.hasOwnProperty.call(scope.reg, id)) {\n      const ref = scope.reg[id];\n\n      /**\n       * Schedule external watchers (useUnit, etc.) re-run\n       */\n      const nodeId = ref?.meta?.id;\n      if (nodeId && scope.additionalLinks[nodeId]) {\n        linksToRun.push(nodeId);\n      }\n      if (!ref.meta || !ref.meta?.named && ref.meta?.derived) {\n        delete scope.reg[id];\n      } else {\n        const sid = ref?.meta?.sid;\n        if (sid && sid in values) {\n          const serialize = ref?.meta?.serialize as StoreSerializationConfig;\n          const read = serialize && serialize !== 'ignore' ? serialize?.read : null;\n          ref.current = read ? read(values[sid] as Json) : values[sid];\n        }\n      }\n    }\n  }\n  queueMicrotask(() => {\n    HACK_runScopeWatchers(scope, linksToRun);\n  });\n}\nfunction INTERNAL_getClientScope(values?: Values) {\n  if (!values || values === prevValues) return currentScope;\n  prevValues = values;\n  HACK_injectValues(currentScope, values);\n  HACK_updateScopeRefs(currentScope, values);\n  return currentScope;\n}\nexport const getScope = isClient ? INTERNAL_getClientScope : getServerScope;"
        ],
        "mappings": "AAEA,SAAsB,MAAiB,cAAoD;AAW3F,MAAM,WAAW,OAAO,aAAa;AACrC,SAAS,eAAe,QAAiB;AACvC,SAAO,KAAK;AAAA,IACV;AAAA,EACF,CAAC;AACH;AASA,MAAM,eAAsB,KAAK;AAU1B,gBAAS,iBAAiB;AAC/B,MAAI,UAAU;AACZ,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,IAAI;AAOJ,SAAS,kBAAkB,OAAc,QAAgB;AAEvD,SAAO,OAAO,MAAM,OAAO,QAAQ,MAAM;AAC3C;AACA,SAAS,sBAAsB,OAAsB,YAAsB;AACzE,MAAI,WAAW,QAAQ;AACrB,eAAW,QAAQ,YAAU;AAC3B,YAAM,QAAQ,MAAM,gBAAgB,MAAM;AAC1C,UAAI,OAAO;AACT,cAAM,QAAQ,UAAQ;AACpB,cAAI,KAAK,KAAK,YAAY,SAAS;AACjC,mBAAO;AAAA,cACL,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AACF;AACA,SAAS,qBAAqB,QAAe,QAAgB;AAC3D,QAAM,QAAQ;AACd,QAAM,aAAuB,CAAC;AAC9B,aAAW,MAAM,MAAM,KAAK;AAC1B,QAAI,OAAO,eAAe,KAAK,MAAM,KAAK,EAAE,GAAG;AAC7C,YAAM,MAAM,MAAM,IAAI,EAAE;AAKxB,YAAM,SAAS,KAAK,MAAM;AAC1B,UAAI,UAAU,MAAM,gBAAgB,MAAM,GAAG;AAC3C,mBAAW,KAAK,MAAM;AAAA,MACxB;AACA,UAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,MAAM,SAAS,IAAI,MAAM,SAAS;AACtD,eAAO,MAAM,IAAI,EAAE;AAAA,MACrB,OAAO;AACL,cAAM,MAAM,KAAK,MAAM;AACvB,YAAI,OAAO,OAAO,QAAQ;AACxB,gBAAM,YAAY,KAAK,MAAM;AAC7B,gBAAM,OAAO,aAAa,cAAc,WAAW,WAAW,OAAO;AACrE,cAAI,UAAU,OAAO,KAAK,OAAO,GAAG,CAAS,IAAI,OAAO,GAAG;AAAA,QAC7D;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,iBAAe,MAAM;AACnB,0BAAsB,OAAO,UAAU;AAAA,EACzC,CAAC;AACH;AACA,SAAS,wBAAwB,QAAiB;AAChD,MAAI,CAAC,UAAU,WAAW,WAAY,QAAO;AAC7C,eAAa;AACb,oBAAkB,cAAc,MAAM;AACtC,uBAAqB,cAAc,MAAM;AACzC,SAAO;AACT;AACO,aAAM,WAAW,WAAW,0BAA0B;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125081778,
      "end": 1746125081778,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125081778,
      "end": 1746125081778,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125081778,
      "end": 1746125081778,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125081778,
      "end": 1746125081778,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125081778,
      "end": 1746125081778,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125081778,
      "end": 1746125081778,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125081779,
      "end": 1746125081779,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125081779,
      "end": 1746125081779,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125081779,
      "end": 1746125081779,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125081779,
      "end": 1746125081779,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125081779,
      "end": 1746125081779,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/shared/lib/effector/getScope.ts [vike:pluginModuleBanner] */\nimport { fork, launch } from \"effector\";\nconst isClient = typeof document !== \"undefined\";\nfunction getServerScope(values) {\n  return fork({\n    values\n  });\n}\nconst currentScope = fork();\nexport function getClientScope() {\n  if (isClient) {\n    return currentScope;\n  }\n  return null;\n}\nlet prevValues;\nfunction HACK_injectValues(scope, values) {\n  Object.assign(scope.values.sidMap, values);\n}\nfunction HACK_runScopeWatchers(scope, linksToRun) {\n  if (linksToRun.length) {\n    linksToRun.forEach((nodeId) => {\n      const links = scope.additionalLinks[nodeId];\n      if (links) {\n        links.forEach((link) => {\n          if (link.meta.watchOp === \"store\") {\n            launch({\n              target: link,\n              params: null,\n              scope\n            });\n          }\n        });\n      }\n    });\n  }\n}\nfunction HACK_updateScopeRefs(tscope, values) {\n  const scope = tscope;\n  const linksToRun = [];\n  for (const id in scope.reg) {\n    if (Object.hasOwnProperty.call(scope.reg, id)) {\n      const ref = scope.reg[id];\n      const nodeId = ref?.meta?.id;\n      if (nodeId && scope.additionalLinks[nodeId]) {\n        linksToRun.push(nodeId);\n      }\n      if (!ref.meta || !ref.meta?.named && ref.meta?.derived) {\n        delete scope.reg[id];\n      } else {\n        const sid = ref?.meta?.sid;\n        if (sid && sid in values) {\n          const serialize = ref?.meta?.serialize;\n          const read = serialize && serialize !== \"ignore\" ? serialize?.read : null;\n          ref.current = read ? read(values[sid]) : values[sid];\n        }\n      }\n    }\n  }\n  queueMicrotask(() => {\n    HACK_runScopeWatchers(scope, linksToRun);\n  });\n}\nfunction INTERNAL_getClientScope(values) {\n  if (!values || values === prevValues) return currentScope;\n  prevValues = values;\n  HACK_injectValues(currentScope, values);\n  HACK_updateScopeRefs(currentScope, values);\n  return currentScope;\n}\nexport const getScope = isClient ? INTERNAL_getClientScope : getServerScope;\n",
      "start": 1746125081779,
      "end": 1746125081779,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/shared/lib/effector/getScope.ts"],
        "names": [],
        "mappings": "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CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACdtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC;AACJ;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;"
      }
    }
  ]
}
