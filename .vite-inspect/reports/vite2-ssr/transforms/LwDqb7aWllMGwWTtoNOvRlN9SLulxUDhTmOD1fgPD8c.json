{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/api/create-request-fx.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEffect } from 'effector';\nimport { type FetchOptions, ofetch } from 'ofetch';\n\ntype CreateRequestParams = FetchOptions & {\n    url: string;\n};\n\ntype Fn<P> = (params: P) => CreateRequestParams;\n\ntype Payload<P> = CreateRequestParams | Fn<P>;\n\ntype CreateRequestInstanceParams<P> = CreateRequestParams & {\n    payload: Payload<P>;\n    withTokenInHeaders?: boolean;\n};\n\ntype CreateRequestFxParams = Omit<CreateRequestInstanceParams<CreateRequestParams>, 'payload' | 'url'>;\n\nfunction getConfig<P>(payload: Payload<P>, params: P): CreateRequestParams {\n    return typeof payload === 'function' ? payload(params) : payload;\n}\n\nconst createRequestInstance = <P = CreateRequestParams, R = void>({\n    baseURL,\n    headers,\n    payload,\n    withTokenInHeaders,\n}: CreateRequestInstanceParams<P>) =>\n    createEffect<P, R>((params): Promise<R> => {\n        const { url, ...fetchOptions } = getConfig(payload, params);\n\n        const newHeaders = new Headers(headers);\n\n        if (withTokenInHeaders) {\n            newHeaders.append('Authorization', `Token ${JSON.parse(localStorage.getItem('$userId') ?? '')}`);\n        }\n\n        return ofetch(url, {\n            ...fetchOptions,\n            headers: newHeaders,\n            baseURL,\n        }) as Promise<R>;\n    });\nexport const createRequestFx =\n    (params: CreateRequestFxParams) =>\n    <P = CreateRequestParams, R = void>(payload: Payload<P>) =>\n        createRequestInstance<P, R>({\n            ...(params as CreateRequestParams),\n            payload,\n        });\n",
      "start": 1750275034239,
      "end": 1750275034259,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { createEffect } from 'effector';\nimport { type FetchOptions, ofetch } from 'ofetch';\ntype CreateRequestParams = FetchOptions & {\n  url: string;\n};\ntype Fn<P> = (params: P) => CreateRequestParams;\ntype Payload<P> = CreateRequestParams | Fn<P>;\ntype CreateRequestInstanceParams<P> = CreateRequestParams & {\n  payload: Payload<P>;\n  withTokenInHeaders?: boolean;\n};\ntype CreateRequestFxParams = Omit<CreateRequestInstanceParams<CreateRequestParams>, 'payload' | 'url'>;\nfunction getConfig<P>(payload: Payload<P>, params: P): CreateRequestParams {\n  return typeof payload === 'function' ? payload(params) : payload;\n}\nconst createRequestInstance = <P = CreateRequestParams, R = void>({\n  baseURL,\n  headers,\n  payload,\n  withTokenInHeaders\n}: CreateRequestInstanceParams<P>) => createEffect<P, R>((params): Promise<R> => {\n  const {\n    url,\n    ...fetchOptions\n  } = getConfig(payload, params);\n  const newHeaders = new Headers(headers);\n  if (withTokenInHeaders) {\n    newHeaders.append('Authorization', `Token ${JSON.parse(localStorage.getItem('$userId') ?? '')}`);\n  }\n  return ofetch(url, {\n    ...fetchOptions,\n    headers: newHeaders,\n    baseURL\n  }) as Promise<R>;\n}, {\n  name: \"createRequestInstance\",\n  sid: \"-2cl3s\"\n});\nexport const createRequestFx = (params: CreateRequestFxParams) => <P = CreateRequestParams, R = void>(payload: Payload<P>) => createRequestInstance<P, R>({\n  ...(params as CreateRequestParams),\n  payload\n});",
      "start": 1750275034259,
      "end": 1750275034261,
      "order": "pre-normal",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createEffect",
          "FetchOptions",
          "ofetch",
          "CreateRequestParams",
          "url",
          "Fn",
          "params",
          "P",
          "Payload",
          "CreateRequestInstanceParams",
          "payload",
          "withTokenInHeaders",
          "CreateRequestFxParams",
          "Omit",
          "getConfig",
          "createRequestInstance",
          "baseURL",
          "headers",
          "R",
          "Promise",
          "fetchOptions",
          "newHeaders",
          "Headers",
          "append",
          "JSON",
          "parse",
          "localStorage",
          "getItem",
          "name",
          "sid",
          "createRequestFx"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/api/create-request-fx.ts"],
        "sourcesContent": [
          "import { createEffect } from 'effector';\nimport { type FetchOptions, ofetch } from 'ofetch';\n\ntype CreateRequestParams = FetchOptions & {\n    url: string;\n};\n\ntype Fn<P> = (params: P) => CreateRequestParams;\n\ntype Payload<P> = CreateRequestParams | Fn<P>;\n\ntype CreateRequestInstanceParams<P> = CreateRequestParams & {\n    payload: Payload<P>;\n    withTokenInHeaders?: boolean;\n};\n\ntype CreateRequestFxParams = Omit<CreateRequestInstanceParams<CreateRequestParams>, 'payload' | 'url'>;\n\nfunction getConfig<P>(payload: Payload<P>, params: P): CreateRequestParams {\n    return typeof payload === 'function' ? payload(params) : payload;\n}\n\nconst createRequestInstance = <P = CreateRequestParams, R = void>({\n    baseURL,\n    headers,\n    payload,\n    withTokenInHeaders,\n}: CreateRequestInstanceParams<P>) =>\n    createEffect<P, R>((params): Promise<R> => {\n        const { url, ...fetchOptions } = getConfig(payload, params);\n\n        const newHeaders = new Headers(headers);\n\n        if (withTokenInHeaders) {\n            newHeaders.append('Authorization', `Token ${JSON.parse(localStorage.getItem('$userId') ?? '')}`);\n        }\n\n        return ofetch(url, {\n            ...fetchOptions,\n            headers: newHeaders,\n            baseURL,\n        }) as Promise<R>;\n    });\nexport const createRequestFx =\n    (params: CreateRequestFxParams) =>\n    <P = CreateRequestParams, R = void>(payload: Payload<P>) =>\n        createRequestInstance<P, R>({\n            ...(params as CreateRequestParams),\n            payload,\n        });\n"
        ],
        "mappings": "AAAA,SAASA,YAAY,QAAQ,UAAU;AACvC,SAAS,KAAKC,YAAY,EAAEC,MAAM,QAAQ,QAAQ;AAElD,KAAKC,mBAAmB,GAAGF,YAAY,GAAG;EACtCG,GAAG,EAAE,MAAM;AACf,CAAC;AAED,KAAKC,EAAE,CAAC,CAAC,CAAC,GAAG,CAACC,MAAM,EAAEC,CAAC,EAAE,GAAGJ,mBAAmB;AAE/C,KAAKK,OAAO,CAAC,CAAC,CAAC,GAAGL,mBAAmB,GAAGE,EAAE,CAACE,CAAC,CAAC;AAE7C,KAAKE,2BAA2B,CAAC,CAAC,CAAC,GAAGN,mBAAmB,GAAG;EACxDO,OAAO,EAAEF,OAAO,CAACD,CAAC,CAAC;EACnBI,kBAAkB,CAAC,EAAE,OAAO;AAChC,CAAC;AAED,KAAKC,qBAAqB,GAAGC,IAAI,CAACJ,2BAA2B,CAACN,mBAAmB,CAAC,EAAE,SAAS,GAAG,KAAK,CAAC;AAEtG,SAASW,SAAS,CAAC,CAAC,CAACA,CAACJ,OAAO,EAAEF,OAAO,CAACD,CAAC,CAAC,EAAED,MAAM,EAAEC,CAAC,CAAC,EAAEJ,mBAAmB,CAAC;EACvE,OAAO,OAAOO,OAAO,KAAK,UAAU,GAAGA,OAAO,CAACJ,MAAM,CAAC,GAAGI,OAAO;AACpE;AAEA,MAAMK,qBAAqB,GAAG,CAAC,IAAIZ,mBAAmB,EAAE,IAAI,IAAI,CAACY,CAAC;EAC9DC,OAAO;EACPC,OAAO;EACPP,OAAO;EACPC;AAC4B,CAA/B,EAAEF,2BAA2B,CAACF,CAAC,CAAC,KAC7BP,YAAY,CAACO,CAAC,EAAEW,CAAC,CAAC,CAAC,CAACZ,MAAM,CAAC,EAAEa,OAAO,CAACD,CAAC,CAAC,IAAI;EACvC,MAAM;IAAEd,GAAG;IAAE,GAAGgB;EAAa,CAAC,GAAGN,SAAS,CAACJ,OAAO,EAAEJ,MAAM,CAAC;EAE3D,MAAMe,UAAU,GAAG,IAAIC,OAAO,CAACL,OAAO,CAAC;EAEvC,IAAIN,kBAAkB,EAAE;IACpBU,UAAU,CAACE,MAAM,CAAC,eAAe,EAAE,SAASC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;EACpG;EAEA,OAAOzB,MAAM,CAACE,GAAG,EAAE;IACf,GAAGgB,YAAY;IACfH,OAAO,EAAEI,UAAU;IACnBL;EACJ,CAAC,CAAC,IAAIG,OAAO,CAACD,CAAC,CAAC;AACpB,CAAC;EAAAU,IAAA;EAAAC,GAAA;AAAA,EAAC;AACN,OAAO,MAAMC,eAAe,GACxBA,CAACxB,MAAM,EAAEM,qBAAqB,KAC9B,CAAC,IAAIT,mBAAmB,EAAE,IAAI,IAAI,CAAC,CAACO,OAAO,EAAEF,OAAO,CAACD,CAAC,CAAC,KACnDQ,qBAAqB,CAACR,CAAC,EAAEW,CAAC,CAAC,CAAC;EACxB,IAAIZ,MAAM,IAAIH,mBAAmB,CAAC;EAClCO;AACJ,CAAC,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { createEffect } from \"effector\";\nimport { ofetch } from \"ofetch\";\nfunction getConfig(payload, params) {\n  return typeof payload === \"function\" ? payload(params) : payload;\n}\nconst createRequestInstance = ({\n  baseURL,\n  headers,\n  payload,\n  withTokenInHeaders\n}) => createEffect((params) => {\n  const {\n    url,\n    ...fetchOptions\n  } = getConfig(payload, params);\n  const newHeaders = new Headers(headers);\n  if (withTokenInHeaders) {\n    newHeaders.append(\"Authorization\", `Token ${JSON.parse(localStorage.getItem(\"$userId\") ?? \"\")}`);\n  }\n  return ofetch(url, {\n    ...fetchOptions,\n    headers: newHeaders,\n    baseURL\n  });\n}, {\n  name: \"createRequestInstance\",\n  sid: \"-2cl3s\"\n});\nexport const createRequestFx = (params) => (payload) => createRequestInstance({\n  ...params,\n  payload\n});\n",
      "start": 1750275034261,
      "end": 1750275034336,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/api/create-request-fx.ts"],
        "sourcesContent": [
          "import { createEffect } from 'effector';\nimport { type FetchOptions, ofetch } from 'ofetch';\ntype CreateRequestParams = FetchOptions & {\n  url: string;\n};\ntype Fn<P> = (params: P) => CreateRequestParams;\ntype Payload<P> = CreateRequestParams | Fn<P>;\ntype CreateRequestInstanceParams<P> = CreateRequestParams & {\n  payload: Payload<P>;\n  withTokenInHeaders?: boolean;\n};\ntype CreateRequestFxParams = Omit<CreateRequestInstanceParams<CreateRequestParams>, 'payload' | 'url'>;\nfunction getConfig<P>(payload: Payload<P>, params: P): CreateRequestParams {\n  return typeof payload === 'function' ? payload(params) : payload;\n}\nconst createRequestInstance = <P = CreateRequestParams, R = void>({\n  baseURL,\n  headers,\n  payload,\n  withTokenInHeaders\n}: CreateRequestInstanceParams<P>) => createEffect<P, R>((params): Promise<R> => {\n  const {\n    url,\n    ...fetchOptions\n  } = getConfig(payload, params);\n  const newHeaders = new Headers(headers);\n  if (withTokenInHeaders) {\n    newHeaders.append('Authorization', `Token ${JSON.parse(localStorage.getItem('$userId') ?? '')}`);\n  }\n  return ofetch(url, {\n    ...fetchOptions,\n    headers: newHeaders,\n    baseURL\n  }) as Promise<R>;\n}, {\n  name: \"createRequestInstance\",\n  sid: \"-2cl3s\"\n});\nexport const createRequestFx = (params: CreateRequestFxParams) => <P = CreateRequestParams, R = void>(payload: Payload<P>) => createRequestInstance<P, R>({\n  ...(params as CreateRequestParams),\n  payload\n});"
        ],
        "mappings": "AAAA,SAAS,oBAAoB;AAC7B,SAA4B,cAAc;AAW1C,SAAS,UAAa,SAAqB,QAAgC;AACzE,SAAO,OAAO,YAAY,aAAa,QAAQ,MAAM,IAAI;AAC3D;AACA,MAAM,wBAAwB,CAAoC;AAAA,EAChE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAsC,aAAmB,CAAC,WAAuB;AAC/E,QAAM;AAAA,IACJ;AAAA,IACA,GAAG;AAAA,EACL,IAAI,UAAU,SAAS,MAAM;AAC7B,QAAM,aAAa,IAAI,QAAQ,OAAO;AACtC,MAAI,oBAAoB;AACtB,eAAW,OAAO,iBAAiB,SAAS,KAAK,MAAM,aAAa,QAAQ,SAAS,KAAK,EAAE,CAAC,EAAE;AAAA,EACjG;AACA,SAAO,OAAO,KAAK;AAAA,IACjB,GAAG;AAAA,IACH,SAAS;AAAA,IACT;AAAA,EACF,CAAC;AACH,GAAG;AAAA,EACD,MAAM;AAAA,EACN,KAAK;AACP,CAAC;AACM,aAAM,kBAAkB,CAAC,WAAkC,CAAoC,YAAwB,sBAA4B;AAAA,EACxJ,GAAI;AAAA,EACJ;AACF,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750275034336,
      "end": 1750275034336,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/shared/api/create-request-fx.ts [vike:pluginModuleBanner] */\nimport { createEffect } from \"effector\";\nimport { ofetch } from \"ofetch\";\nfunction getConfig(payload, params) {\n  return typeof payload === \"function\" ? payload(params) : payload;\n}\nconst createRequestInstance = ({\n  baseURL,\n  headers,\n  payload,\n  withTokenInHeaders\n}) => createEffect((params) => {\n  const {\n    url,\n    ...fetchOptions\n  } = getConfig(payload, params);\n  const newHeaders = new Headers(headers);\n  if (withTokenInHeaders) {\n    newHeaders.append(\"Authorization\", `Token ${JSON.parse(localStorage.getItem(\"$userId\") ?? \"\")}`);\n  }\n  return ofetch(url, {\n    ...fetchOptions,\n    headers: newHeaders,\n    baseURL\n  });\n}, {\n  name: \"createRequestInstance\",\n  sid: \"-2cl3s\"\n});\nexport const createRequestFx = (params) => (payload) => createRequestInstance({\n  ...params,\n  payload\n});\n",
      "start": 1750275034336,
      "end": 1750275034337,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/shared/api/create-request-fx.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzpG,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC;"
      }
    }
  ]
}
