{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEffect, createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isNull } from 'lodash-es';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\n\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\n\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\nimport { DELAY_MS } from './constants';\nimport { getProgress } from './getProgress';\n\n/**\n * Модель теста, реализованная на Effector atom.\n * @returns {object} API для управления состоянием теста\n */\nexport const TestModel = atom(() => {\n    /** Гейт для инициализации/размонтирования компонента теста */\n    const TestGate = createGate();\n\n    /** Событие сброса формы */\n    const formReset = createEvent();\n    /** Событие для управления видимостью сплэш-экрана */\n    const setSplashScreenVisibility = createEvent<boolean>();\n\n    /** Событие изменения поля шкалы */\n    const scaleFormFieldChanged = createEvent<PreparedAnswer>();\n\n    /**\n     * Стор с ответами пользователя\n     */\n    const $scaleForm = createStore<Answers>({\n        answers: [],\n    })\n        .reset(formReset)\n        .on(scaleFormFieldChanged, (form, field) => {\n            const updatedAnswers = [...form.answers];\n            updatedAnswers[field.index] = field;\n            return { ...form, answers: updatedAnswers };\n        });\n\n    /** Текущая страница теста */\n    const $currentPage = createStore(1).reset(formReset);\n    /** Текущий прогресс (в процентах) */\n    const $currentProgress = createStore(0).reset(formReset);\n    /** Текущий вопрос */\n    const $currentQuestion = createStore<QuestionsResponse | null>(null);\n    /** Текущее значение ответа */\n    const $currentValue = createStore<PreparedAnswer['answer'] | null>(null).reset(formReset);\n    /** Видимость сплэш-экрана */\n    const $isSplashScreenVisible = createStore<boolean>(true).reset(formReset);\n\n    /** Событие смены направления (вперед/назад) */\n    const directionChanged = createEvent<'forward' | 'backward'>();\n    /** Стор направления */\n    const $direction = createStore<'forward' | 'backward'>('forward').on(directionChanged, (_, dir) => dir);\n\n    /** Событие смены страницы формы */\n    const formPageChanged = createEvent<number>();\n\n    /** Задержка для события изменения поля */\n    const delayedFormFieldChanged = delay(scaleFormFieldChanged, DELAY_MS);\n\n    /** Стор с вопросами */\n    const $questions = restore(\n        getQuestionsQuery.finished.success.map((el) => el.result),\n        []\n    );\n\n    // --- Реактивные связи ---\n\n    const scrollToTopFx = createEffect(() => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    });\n\n    sample({\n        clock: setSplashScreenVisibility,\n        target: [$isSplashScreenVisible, scrollToTopFx],\n    });\n\n    sample({\n        clock: [$currentPage, $questions, TestGate.open],\n        source: {\n            page: $currentPage,\n            questions: $questions,\n        },\n        fn: ({ page, questions }) => {\n            if (!questions) return null;\n            return questions[page - 1];\n        },\n        target: $currentQuestion,\n    });\n\n    // --- Логика перехода вперед по шкале ---\n    sample({\n        clock: delayedFormFieldChanged,\n        source: {\n            page: $currentPage,\n            progress: $currentProgress,\n            direction: $direction,\n            form: $scaleForm,\n            questions: $questions,\n        },\n        filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n        fn: ({ page, progress, form }, answer) => {\n            const currentAnswer = form.answers[page - 1];\n\n            if (!isValidAnswer(currentAnswer)) return page;\n            const singleValue = (answer?.answer as SingleChoiceAnswer).value;\n\n            const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\n            if (answer.showInput || !isValidSingle) return page;\n\n            if (isValidSingle && progress < 100 && page === form.answers.length) {\n                return page + 1;\n            }\n            return page;\n        },\n        target: formPageChanged,\n    });\n\n    // --- Получение значения для шкалы (не single/multi) ---\n    sample({\n        clock: scaleFormFieldChanged,\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        filter: (_, field) => !(field.isMultiple || field.isSingle),\n        fn: ({ form, page }) => {\n            const currentPage = page - 1;\n            const current = form.answers[currentPage];\n            if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\n                if (!current.answer.value) return null;\n                return current.answer.value as unknown as ScaleChoiceAnswer;\n            }\n            return null;\n        },\n        target: $currentValue,\n    });\n\n    // --- Получение значения для текущего ответа (single/multi/scale) ---\n    sample({\n        clock: [$scaleForm, formPageChanged],\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        fn: ({ form: { answers }, page }, pages) => getCurrentValue(answers, page, pages),\n        target: $currentValue,\n    });\n\n    // --- Смена страницы и скролл вверх ---\n    sample({\n        clock: formPageChanged,\n        fn: (page) => {\n            window.scrollTo(0, 0);\n            return page;\n        },\n        target: $currentPage,\n    });\n\n    // --- Обновление прогресса ---\n    sample({\n        clock: $scaleForm,\n        source: { questions: $questions, form: $scaleForm },\n        fn: ({ questions, form: { answers } }) => getProgress(answers.length, questions.length),\n        target: $currentProgress,\n    });\n\n    /**\n     * API модели теста\n     */\n    return {\n        setSplashScreenVisibility,\n        $scaleForm,\n        $currentPage,\n        $currentProgress,\n        formReset,\n        $currentQuestion,\n        formPageChanged,\n        $currentValue,\n        directionChanged,\n        $isSplashScreenVisible,\n        scaleFormFieldChanged,\n        $questions,\n        TestGate,\n    };\n});\n",
      "start": 1750271784853,
      "end": 1750271784869,
      "sourcemaps": null
    },
    {
      "name": "vite:react-swc",
      "result": "import { withFactory as _effector$factory } from 'effector';\nimport { createEffect, createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isNull } from 'lodash-es';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\nimport { getQuestionsQuery } from '../api';\nimport { DELAY_MS } from './constants';\nimport { getProgress } from './getProgress';\n/**\n * Модель теста, реализованная на Effector atom.\n * @returns {object} API для управления состоянием теста\n */ export const TestModel = _effector$factory({\n    sid: \"8q1iemyo\",\n    fn: ()=>atom(()=>{\n            /** Гейт для инициализации/размонтирования компонента теста */ const TestGate = createGate({\n                and: [],\n                or: {\n                    sid: \"89fapg0b\"\n                }\n            });\n            /** Событие сброса формы */ const formReset = createEvent({\n                sid: \"4b0k0due\"\n            });\n            /** Событие для управления видимостью сплэш-экрана */ const setSplashScreenVisibility = createEvent({\n                sid: \"8ivohf3p\"\n            });\n            /** Событие изменения поля шкалы */ const scaleFormFieldChanged = createEvent({\n                sid: \"6j7wbr4\"\n            });\n            /**\n     * Стор с ответами пользователя\n     */ const $scaleForm = createStore({\n                answers: []\n            }, {\n                sid: \"a9098cvw\"\n            }).reset(formReset).on(scaleFormFieldChanged, (form, field)=>{\n                const updatedAnswers = [\n                    ...form.answers\n                ];\n                updatedAnswers[field.index] = field;\n                return {\n                    ...form,\n                    answers: updatedAnswers\n                };\n            });\n            /** Текущая страница теста */ const $currentPage = createStore(1, {\n                sid: \"b7vu0903\"\n            }).reset(formReset);\n            /** Текущий прогресс (в процентах) */ const $currentProgress = createStore(0, {\n                sid: \"brzu2ok9\"\n            }).reset(formReset);\n            /** Текущий вопрос */ const $currentQuestion = createStore(null, {\n                sid: \"ccugkeg3\"\n            });\n            /** Текущее значение ответа */ const $currentValue = createStore(null, {\n                sid: \"buxe0nw4\"\n            }).reset(formReset);\n            /** Видимость сплэш-экрана */ const $isSplashScreenVisible = createStore(true, {\n                sid: \"ls62vx7\"\n            }).reset(formReset);\n            /** Событие смены направления (вперед/назад) */ const directionChanged = createEvent({\n                sid: \"8hx2bsq7\"\n            });\n            /** Стор направления */ const $direction = createStore('forward', {\n                sid: \"5trycyme\"\n            }).on(directionChanged, (_, dir)=>dir);\n            /** Событие смены страницы формы */ const formPageChanged = createEvent({\n                sid: \"5zz0rnbq\"\n            });\n            /** Задержка для события изменения поля */ const delayedFormFieldChanged = _effector$factory({\n                sid: \"8rf797m9\",\n                fn: ()=>delay(scaleFormFieldChanged, DELAY_MS)\n            });\n            /** Стор с вопросами */ const $questions = restore(getQuestionsQuery.finished.success.map((el)=>el.result), [], {\n                sid: \"8lo6afp1\"\n            });\n            // --- Реактивные связи ---\n            const scrollToTopFx = createEffect(()=>{\n                window.scrollTo({\n                    top: 0,\n                    behavior: 'smooth'\n                });\n            }, {\n                sid: \"8qy6g9rk\"\n            });\n            sample({\n                and: [\n                    {\n                        clock: setSplashScreenVisibility,\n                        target: [\n                            $isSplashScreenVisible,\n                            scrollToTopFx\n                        ]\n                    }\n                ],\n                or: {\n                    sid: \"8xt04xn6\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: [\n                            $currentPage,\n                            $questions,\n                            TestGate.open\n                        ],\n                        source: {\n                            page: $currentPage,\n                            questions: $questions\n                        },\n                        fn: ({ page, questions })=>{\n                            if (!questions) return null;\n                            return questions[page - 1];\n                        },\n                        target: $currentQuestion\n                    }\n                ],\n                or: {\n                    sid: \"1md6343u\"\n                }\n            });\n            // --- Логика перехода вперед по шкале ---\n            sample({\n                and: [\n                    {\n                        clock: delayedFormFieldChanged,\n                        source: {\n                            page: $currentPage,\n                            progress: $currentProgress,\n                            direction: $direction,\n                            form: $scaleForm,\n                            questions: $questions\n                        },\n                        filter: (params, field)=>!field.isMultiple && params.direction === 'forward',\n                        fn: ({ page, progress, form }, answer)=>{\n                            const currentAnswer = form.answers[page - 1];\n                            if (!isValidAnswer(currentAnswer)) return page;\n                            const singleValue = (answer?.answer).value;\n                            const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\n                            if (answer.showInput || !isValidSingle) return page;\n                            if (isValidSingle && progress < 100 && page === form.answers.length) {\n                                return page + 1;\n                            }\n                            return page;\n                        },\n                        target: formPageChanged\n                    }\n                ],\n                or: {\n                    sid: \"315rbtcb\"\n                }\n            });\n            // --- Получение значения для шкалы (не single/multi) ---\n            sample({\n                and: [\n                    {\n                        clock: scaleFormFieldChanged,\n                        source: {\n                            form: $scaleForm,\n                            page: $currentPage\n                        },\n                        filter: (_, field)=>!(field.isMultiple || field.isSingle),\n                        fn: ({ form, page })=>{\n                            const currentPage = page - 1;\n                            const current = form.answers[currentPage];\n                            if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\n                                if (!current.answer.value) return null;\n                                return current.answer.value;\n                            }\n                            return null;\n                        },\n                        target: $currentValue\n                    }\n                ],\n                or: {\n                    sid: \"bw7xr6h3\"\n                }\n            });\n            // --- Получение значения для текущего ответа (single/multi/scale) ---\n            sample({\n                and: [\n                    {\n                        clock: [\n                            $scaleForm,\n                            formPageChanged\n                        ],\n                        source: {\n                            form: $scaleForm,\n                            page: $currentPage\n                        },\n                        fn: ({ form: { answers }, page }, pages)=>getCurrentValue(answers, page, pages),\n                        target: $currentValue\n                    }\n                ],\n                or: {\n                    sid: \"43pew38m\"\n                }\n            });\n            // --- Смена страницы и скролл вверх ---\n            sample({\n                and: [\n                    {\n                        clock: formPageChanged,\n                        fn: (page)=>{\n                            window.scrollTo(0, 0);\n                            return page;\n                        },\n                        target: $currentPage\n                    }\n                ],\n                or: {\n                    sid: \"9ozjtlyt\"\n                }\n            });\n            // --- Обновление прогресса ---\n            sample({\n                and: [\n                    {\n                        clock: $scaleForm,\n                        source: {\n                            questions: $questions,\n                            form: $scaleForm\n                        },\n                        fn: ({ questions, form: { answers } })=>getProgress(answers.length, questions.length),\n                        target: $currentProgress\n                    }\n                ],\n                or: {\n                    sid: \"3sm1l2v1\"\n                }\n            });\n            /**\n     * API модели теста\n     */ return {\n                setSplashScreenVisibility,\n                $scaleForm,\n                $currentPage,\n                $currentProgress,\n                formReset,\n                $currentQuestion,\n                formPageChanged,\n                $currentValue,\n                directionChanged,\n                $isSplashScreenVisible,\n                scaleFormFieldChanged,\n                $questions,\n                TestGate\n            };\n        })\n});\n",
      "start": 1750271784869,
      "end": 1750271784875,
      "order": "pre",
      "sourcemaps": "{\"version\":3,\"sources\":[\"/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts\"],\"sourcesContent\":[\"import { createEffect, createEvent, createStore, restore, sample } from 'effector';\\nimport { createGate } from 'effector-react';\\nimport { isNull } from 'lodash-es';\\nimport { delay } from 'patronum';\\n\\nimport { atom } from '@/shared/factories';\\n\\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\\n\\nimport { getQuestionsQuery } from '../api';\\nimport type { QuestionsResponse } from '../api/dto';\\nimport type { Answers, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\\nimport { DELAY_MS } from './constants';\\nimport { getProgress } from './getProgress';\\n\\n/**\\n * Модель теста, реализованная на Effector atom.\\n * @returns {object} API для управления состоянием теста\\n */\\nexport const TestModel = atom(() => {\\n    /** Гейт для инициализации/размонтирования компонента теста */\\n    const TestGate = createGate();\\n\\n    /** Событие сброса формы */\\n    const formReset = createEvent();\\n    /** Событие для управления видимостью сплэш-экрана */\\n    const setSplashScreenVisibility = createEvent<boolean>();\\n\\n    /** Событие изменения поля шкалы */\\n    const scaleFormFieldChanged = createEvent<PreparedAnswer>();\\n\\n    /**\\n     * Стор с ответами пользователя\\n     */\\n    const $scaleForm = createStore<Answers>({\\n        answers: [],\\n    })\\n        .reset(formReset)\\n        .on(scaleFormFieldChanged, (form, field) => {\\n            const updatedAnswers = [...form.answers];\\n            updatedAnswers[field.index] = field;\\n            return { ...form, answers: updatedAnswers };\\n        });\\n\\n    /** Текущая страница теста */\\n    const $currentPage = createStore(1).reset(formReset);\\n    /** Текущий прогресс (в процентах) */\\n    const $currentProgress = createStore(0).reset(formReset);\\n    /** Текущий вопрос */\\n    const $currentQuestion = createStore<QuestionsResponse | null>(null);\\n    /** Текущее значение ответа */\\n    const $currentValue = createStore<PreparedAnswer['answer'] | null>(null).reset(formReset);\\n    /** Видимость сплэш-экрана */\\n    const $isSplashScreenVisible = createStore<boolean>(true).reset(formReset);\\n\\n    /** Событие смены направления (вперед/назад) */\\n    const directionChanged = createEvent<'forward' | 'backward'>();\\n    /** Стор направления */\\n    const $direction = createStore<'forward' | 'backward'>('forward').on(directionChanged, (_, dir) => dir);\\n\\n    /** Событие смены страницы формы */\\n    const formPageChanged = createEvent<number>();\\n\\n    /** Задержка для события изменения поля */\\n    const delayedFormFieldChanged = delay(scaleFormFieldChanged, DELAY_MS);\\n\\n    /** Стор с вопросами */\\n    const $questions = restore(\\n        getQuestionsQuery.finished.success.map((el) => el.result),\\n        []\\n    );\\n\\n    // --- Реактивные связи ---\\n\\n    const scrollToTopFx = createEffect(() => {\\n        window.scrollTo({ top: 0, behavior: 'smooth' });\\n    });\\n\\n    sample({\\n        clock: setSplashScreenVisibility,\\n        target: [$isSplashScreenVisible, scrollToTopFx],\\n    });\\n\\n    sample({\\n        clock: [$currentPage, $questions, TestGate.open],\\n        source: {\\n            page: $currentPage,\\n            questions: $questions,\\n        },\\n        fn: ({ page, questions }) => {\\n            if (!questions) return null;\\n            return questions[page - 1];\\n        },\\n        target: $currentQuestion,\\n    });\\n\\n    // --- Логика перехода вперед по шкале ---\\n    sample({\\n        clock: delayedFormFieldChanged,\\n        source: {\\n            page: $currentPage,\\n            progress: $currentProgress,\\n            direction: $direction,\\n            form: $scaleForm,\\n            questions: $questions,\\n        },\\n        filter: (params, field) => !field.isMultiple && params.direction === 'forward',\\n        fn: ({ page, progress, form }, answer) => {\\n            const currentAnswer = form.answers[page - 1];\\n\\n            if (!isValidAnswer(currentAnswer)) return page;\\n            const singleValue = (answer?.answer as SingleChoiceAnswer).value;\\n\\n            const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\\n            if (answer.showInput || !isValidSingle) return page;\\n\\n            if (isValidSingle && progress < 100 && page === form.answers.length) {\\n                return page + 1;\\n            }\\n            return page;\\n        },\\n        target: formPageChanged,\\n    });\\n\\n    // --- Получение значения для шкалы (не single/multi) ---\\n    sample({\\n        clock: scaleFormFieldChanged,\\n        source: {\\n            form: $scaleForm,\\n            page: $currentPage,\\n        },\\n        filter: (_, field) => !(field.isMultiple || field.isSingle),\\n        fn: ({ form, page }) => {\\n            const currentPage = page - 1;\\n            const current = form.answers[currentPage];\\n            if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\\n                if (!current.answer.value) return null;\\n                return current.answer.value as unknown as ScaleChoiceAnswer;\\n            }\\n            return null;\\n        },\\n        target: $currentValue,\\n    });\\n\\n    // --- Получение значения для текущего ответа (single/multi/scale) ---\\n    sample({\\n        clock: [$scaleForm, formPageChanged],\\n        source: {\\n            form: $scaleForm,\\n            page: $currentPage,\\n        },\\n        fn: ({ form: { answers }, page }, pages) => getCurrentValue(answers, page, pages),\\n        target: $currentValue,\\n    });\\n\\n    // --- Смена страницы и скролл вверх ---\\n    sample({\\n        clock: formPageChanged,\\n        fn: (page) => {\\n            window.scrollTo(0, 0);\\n            return page;\\n        },\\n        target: $currentPage,\\n    });\\n\\n    // --- Обновление прогресса ---\\n    sample({\\n        clock: $scaleForm,\\n        source: { questions: $questions, form: $scaleForm },\\n        fn: ({ questions, form: { answers } }) => getProgress(answers.length, questions.length),\\n        target: $currentProgress,\\n    });\\n\\n    /**\\n     * API модели теста\\n     */\\n    return {\\n        setSplashScreenVisibility,\\n        $scaleForm,\\n        $currentPage,\\n        $currentProgress,\\n        formReset,\\n        $currentQuestion,\\n        formPageChanged,\\n        $currentValue,\\n        directionChanged,\\n        $isSplashScreenVisible,\\n        scaleFormFieldChanged,\\n        $questions,\\n        TestGate,\\n    };\\n});\\n\"],\"names\":[\"createEffect\",\"createEvent\",\"createStore\",\"restore\",\"sample\",\"createGate\",\"isNull\",\"delay\",\"atom\",\"getCurrentValue\",\"isValidAnswer\",\"getQuestionsQuery\",\"DELAY_MS\",\"getProgress\",\"TestModel\",\"TestGate\",\"formReset\",\"setSplashScreenVisibility\",\"scaleFormFieldChanged\",\"$scaleForm\",\"answers\",\"reset\",\"on\",\"form\",\"field\",\"updatedAnswers\",\"index\",\"$currentPage\",\"$currentProgress\",\"$currentQuestion\",\"$currentValue\",\"$isSplashScreenVisible\",\"directionChanged\",\"$direction\",\"_\",\"dir\",\"formPageChanged\",\"delayedFormFieldChanged\",\"$questions\",\"finished\",\"success\",\"map\",\"el\",\"result\",\"scrollToTopFx\",\"window\",\"scrollTo\",\"top\",\"behavior\",\"clock\",\"target\",\"open\",\"source\",\"page\",\"questions\",\"fn\",\"progress\",\"direction\",\"filter\",\"params\",\"isMultiple\",\"answer\",\"currentAnswer\",\"singleValue\",\"value\",\"isValidSingle\",\"undefined\",\"showInput\",\"length\",\"isSingle\",\"currentPage\",\"current\",\"pages\"],\"mappings\":\"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\"}"
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _effector$factory } from \"effector\";\nimport { createEffect, createEvent, createStore, restore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { isNull } from \"lodash-es\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { getCurrentValue } from \"@/entities/Test/model/getCurrentValue\";\nimport { isValidAnswer } from \"@/entities/Test/model/isValidAnswer\";\nimport { getQuestionsQuery } from \"../api\";\nimport { DELAY_MS } from \"./constants\";\nimport { getProgress } from \"./getProgress\";\nexport const TestModel = _effector$factory({\n  sid: \"8q1iemyo\",\n  fn: () => atom(() => {\n    const TestGate = createGate({\n      and: [],\n      or: {\n        sid: \"89fapg0b\"\n      }\n    });\n    const formReset = createEvent({\n      sid: \"4b0k0due\"\n    });\n    const setSplashScreenVisibility = createEvent({\n      sid: \"8ivohf3p\"\n    });\n    const scaleFormFieldChanged = createEvent({\n      sid: \"6j7wbr4\"\n    });\n    const $scaleForm = createStore({\n      answers: []\n    }, {\n      sid: \"a9098cvw\"\n    }).reset(formReset).on(scaleFormFieldChanged, (form, field) => {\n      const updatedAnswers = [\n        ...form.answers\n      ];\n      updatedAnswers[field.index] = field;\n      return {\n        ...form,\n        answers: updatedAnswers\n      };\n    });\n    const $currentPage = createStore(1, {\n      sid: \"b7vu0903\"\n    }).reset(formReset);\n    const $currentProgress = createStore(0, {\n      sid: \"brzu2ok9\"\n    }).reset(formReset);\n    const $currentQuestion = createStore(null, {\n      sid: \"ccugkeg3\"\n    });\n    const $currentValue = createStore(null, {\n      sid: \"buxe0nw4\"\n    }).reset(formReset);\n    const $isSplashScreenVisible = createStore(true, {\n      sid: \"ls62vx7\"\n    }).reset(formReset);\n    const directionChanged = createEvent({\n      sid: \"8hx2bsq7\"\n    });\n    const $direction = createStore(\"forward\", {\n      sid: \"5trycyme\"\n    }).on(directionChanged, (_, dir) => dir);\n    const formPageChanged = createEvent({\n      sid: \"5zz0rnbq\"\n    });\n    const delayedFormFieldChanged = _effector$factory({\n      sid: \"8rf797m9\",\n      fn: () => delay(scaleFormFieldChanged, DELAY_MS)\n    });\n    const $questions = restore(getQuestionsQuery.finished.success.map((el) => el.result), [], {\n      sid: \"8lo6afp1\"\n    });\n    const scrollToTopFx = createEffect(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\"\n      });\n    }, {\n      sid: \"8qy6g9rk\"\n    });\n    sample({\n      and: [\n        {\n          clock: setSplashScreenVisibility,\n          target: [\n            $isSplashScreenVisible,\n            scrollToTopFx\n          ]\n        }\n      ],\n      or: {\n        sid: \"8xt04xn6\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: [\n            $currentPage,\n            $questions,\n            TestGate.open\n          ],\n          source: {\n            page: $currentPage,\n            questions: $questions\n          },\n          fn: ({ page, questions }) => {\n            if (!questions) return null;\n            return questions[page - 1];\n          },\n          target: $currentQuestion\n        }\n      ],\n      or: {\n        sid: \"1md6343u\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: delayedFormFieldChanged,\n          source: {\n            page: $currentPage,\n            progress: $currentProgress,\n            direction: $direction,\n            form: $scaleForm,\n            questions: $questions\n          },\n          filter: (params, field) => !field.isMultiple && params.direction === \"forward\",\n          fn: ({ page, progress, form }, answer) => {\n            const currentAnswer = form.answers[page - 1];\n            if (!isValidAnswer(currentAnswer)) return page;\n            const singleValue = (answer?.answer).value;\n            const isValidSingle = singleValue !== \"\" && singleValue !== void 0 && !isNull(singleValue);\n            if (answer.showInput || !isValidSingle) return page;\n            if (isValidSingle && progress < 100 && page === form.answers.length) {\n              return page + 1;\n            }\n            return page;\n          },\n          target: formPageChanged\n        }\n      ],\n      or: {\n        sid: \"315rbtcb\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: scaleFormFieldChanged,\n          source: {\n            form: $scaleForm,\n            page: $currentPage\n          },\n          filter: (_, field) => !(field.isMultiple || field.isSingle),\n          fn: ({ form, page }) => {\n            const currentPage = page - 1;\n            const current = form.answers[currentPage];\n            if (form.answers && form.answers.length > 0 && current && \"value\" in current.answer) {\n              if (!current.answer.value) return null;\n              return current.answer.value;\n            }\n            return null;\n          },\n          target: $currentValue\n        }\n      ],\n      or: {\n        sid: \"bw7xr6h3\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: [\n            $scaleForm,\n            formPageChanged\n          ],\n          source: {\n            form: $scaleForm,\n            page: $currentPage\n          },\n          fn: ({ form: { answers }, page }, pages) => getCurrentValue(answers, page, pages),\n          target: $currentValue\n        }\n      ],\n      or: {\n        sid: \"43pew38m\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: formPageChanged,\n          fn: (page) => {\n            window.scrollTo(0, 0);\n            return page;\n          },\n          target: $currentPage\n        }\n      ],\n      or: {\n        sid: \"9ozjtlyt\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: $scaleForm,\n          source: {\n            questions: $questions,\n            form: $scaleForm\n          },\n          fn: ({ questions, form: { answers } }) => getProgress(answers.length, questions.length),\n          target: $currentProgress\n        }\n      ],\n      or: {\n        sid: \"3sm1l2v1\"\n      }\n    });\n    return {\n      setSplashScreenVisibility,\n      $scaleForm,\n      $currentPage,\n      $currentProgress,\n      formReset,\n      $currentQuestion,\n      formPageChanged,\n      $currentValue,\n      directionChanged,\n      $isSplashScreenVisible,\n      scaleFormFieldChanged,\n      $questions,\n      TestGate\n    };\n  })\n});\n",
      "start": 1750271784875,
      "end": 1750271784982,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts"],
        "sourcesContent": [
          "import { withFactory as _effector$factory } from 'effector';\nimport { createEffect, createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isNull } from 'lodash-es';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\nimport { getQuestionsQuery } from '../api';\nimport { DELAY_MS } from './constants';\nimport { getProgress } from './getProgress';\n/**\n * Модель теста, реализованная на Effector atom.\n * @returns {object} API для управления состоянием теста\n */ export const TestModel = _effector$factory({\n    sid: \"8q1iemyo\",\n    fn: ()=>atom(()=>{\n            /** Гейт для инициализации/размонтирования компонента теста */ const TestGate = createGate({\n                and: [],\n                or: {\n                    sid: \"89fapg0b\"\n                }\n            });\n            /** Событие сброса формы */ const formReset = createEvent({\n                sid: \"4b0k0due\"\n            });\n            /** Событие для управления видимостью сплэш-экрана */ const setSplashScreenVisibility = createEvent({\n                sid: \"8ivohf3p\"\n            });\n            /** Событие изменения поля шкалы */ const scaleFormFieldChanged = createEvent({\n                sid: \"6j7wbr4\"\n            });\n            /**\n     * Стор с ответами пользователя\n     */ const $scaleForm = createStore({\n                answers: []\n            }, {\n                sid: \"a9098cvw\"\n            }).reset(formReset).on(scaleFormFieldChanged, (form, field)=>{\n                const updatedAnswers = [\n                    ...form.answers\n                ];\n                updatedAnswers[field.index] = field;\n                return {\n                    ...form,\n                    answers: updatedAnswers\n                };\n            });\n            /** Текущая страница теста */ const $currentPage = createStore(1, {\n                sid: \"b7vu0903\"\n            }).reset(formReset);\n            /** Текущий прогресс (в процентах) */ const $currentProgress = createStore(0, {\n                sid: \"brzu2ok9\"\n            }).reset(formReset);\n            /** Текущий вопрос */ const $currentQuestion = createStore(null, {\n                sid: \"ccugkeg3\"\n            });\n            /** Текущее значение ответа */ const $currentValue = createStore(null, {\n                sid: \"buxe0nw4\"\n            }).reset(formReset);\n            /** Видимость сплэш-экрана */ const $isSplashScreenVisible = createStore(true, {\n                sid: \"ls62vx7\"\n            }).reset(formReset);\n            /** Событие смены направления (вперед/назад) */ const directionChanged = createEvent({\n                sid: \"8hx2bsq7\"\n            });\n            /** Стор направления */ const $direction = createStore('forward', {\n                sid: \"5trycyme\"\n            }).on(directionChanged, (_, dir)=>dir);\n            /** Событие смены страницы формы */ const formPageChanged = createEvent({\n                sid: \"5zz0rnbq\"\n            });\n            /** Задержка для события изменения поля */ const delayedFormFieldChanged = _effector$factory({\n                sid: \"8rf797m9\",\n                fn: ()=>delay(scaleFormFieldChanged, DELAY_MS)\n            });\n            /** Стор с вопросами */ const $questions = restore(getQuestionsQuery.finished.success.map((el)=>el.result), [], {\n                sid: \"8lo6afp1\"\n            });\n            // --- Реактивные связи ---\n            const scrollToTopFx = createEffect(()=>{\n                window.scrollTo({\n                    top: 0,\n                    behavior: 'smooth'\n                });\n            }, {\n                sid: \"8qy6g9rk\"\n            });\n            sample({\n                and: [\n                    {\n                        clock: setSplashScreenVisibility,\n                        target: [\n                            $isSplashScreenVisible,\n                            scrollToTopFx\n                        ]\n                    }\n                ],\n                or: {\n                    sid: \"8xt04xn6\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: [\n                            $currentPage,\n                            $questions,\n                            TestGate.open\n                        ],\n                        source: {\n                            page: $currentPage,\n                            questions: $questions\n                        },\n                        fn: ({ page, questions })=>{\n                            if (!questions) return null;\n                            return questions[page - 1];\n                        },\n                        target: $currentQuestion\n                    }\n                ],\n                or: {\n                    sid: \"1md6343u\"\n                }\n            });\n            // --- Логика перехода вперед по шкале ---\n            sample({\n                and: [\n                    {\n                        clock: delayedFormFieldChanged,\n                        source: {\n                            page: $currentPage,\n                            progress: $currentProgress,\n                            direction: $direction,\n                            form: $scaleForm,\n                            questions: $questions\n                        },\n                        filter: (params, field)=>!field.isMultiple && params.direction === 'forward',\n                        fn: ({ page, progress, form }, answer)=>{\n                            const currentAnswer = form.answers[page - 1];\n                            if (!isValidAnswer(currentAnswer)) return page;\n                            const singleValue = (answer?.answer).value;\n                            const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\n                            if (answer.showInput || !isValidSingle) return page;\n                            if (isValidSingle && progress < 100 && page === form.answers.length) {\n                                return page + 1;\n                            }\n                            return page;\n                        },\n                        target: formPageChanged\n                    }\n                ],\n                or: {\n                    sid: \"315rbtcb\"\n                }\n            });\n            // --- Получение значения для шкалы (не single/multi) ---\n            sample({\n                and: [\n                    {\n                        clock: scaleFormFieldChanged,\n                        source: {\n                            form: $scaleForm,\n                            page: $currentPage\n                        },\n                        filter: (_, field)=>!(field.isMultiple || field.isSingle),\n                        fn: ({ form, page })=>{\n                            const currentPage = page - 1;\n                            const current = form.answers[currentPage];\n                            if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\n                                if (!current.answer.value) return null;\n                                return current.answer.value;\n                            }\n                            return null;\n                        },\n                        target: $currentValue\n                    }\n                ],\n                or: {\n                    sid: \"bw7xr6h3\"\n                }\n            });\n            // --- Получение значения для текущего ответа (single/multi/scale) ---\n            sample({\n                and: [\n                    {\n                        clock: [\n                            $scaleForm,\n                            formPageChanged\n                        ],\n                        source: {\n                            form: $scaleForm,\n                            page: $currentPage\n                        },\n                        fn: ({ form: { answers }, page }, pages)=>getCurrentValue(answers, page, pages),\n                        target: $currentValue\n                    }\n                ],\n                or: {\n                    sid: \"43pew38m\"\n                }\n            });\n            // --- Смена страницы и скролл вверх ---\n            sample({\n                and: [\n                    {\n                        clock: formPageChanged,\n                        fn: (page)=>{\n                            window.scrollTo(0, 0);\n                            return page;\n                        },\n                        target: $currentPage\n                    }\n                ],\n                or: {\n                    sid: \"9ozjtlyt\"\n                }\n            });\n            // --- Обновление прогресса ---\n            sample({\n                and: [\n                    {\n                        clock: $scaleForm,\n                        source: {\n                            questions: $questions,\n                            form: $scaleForm\n                        },\n                        fn: ({ questions, form: { answers } })=>getProgress(answers.length, questions.length),\n                        target: $currentProgress\n                    }\n                ],\n                or: {\n                    sid: \"3sm1l2v1\"\n                }\n            });\n            /**\n     * API модели теста\n     */ return {\n                setSplashScreenVisibility,\n                $scaleForm,\n                $currentPage,\n                $currentProgress,\n                formReset,\n                $currentQuestion,\n                formPageChanged,\n                $currentValue,\n                directionChanged,\n                $isSplashScreenVisible,\n                scaleFormFieldChanged,\n                $questions,\n                TestGate\n            };\n        })\n});\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750271784982,
      "end": 1750271784982,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/entities/Test/model/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _effector$factory } from \"effector\";\nimport { createEffect, createEvent, createStore, restore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { isNull } from \"lodash-es\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { getCurrentValue } from \"@/entities/Test/model/getCurrentValue\";\nimport { isValidAnswer } from \"@/entities/Test/model/isValidAnswer\";\nimport { getQuestionsQuery } from \"../api\";\nimport { DELAY_MS } from \"./constants\";\nimport { getProgress } from \"./getProgress\";\nexport const TestModel = _effector$factory({\n  sid: \"8q1iemyo\",\n  fn: () => atom(() => {\n    const TestGate = createGate({\n      and: [],\n      or: {\n        sid: \"89fapg0b\"\n      }\n    });\n    const formReset = createEvent({\n      sid: \"4b0k0due\"\n    });\n    const setSplashScreenVisibility = createEvent({\n      sid: \"8ivohf3p\"\n    });\n    const scaleFormFieldChanged = createEvent({\n      sid: \"6j7wbr4\"\n    });\n    const $scaleForm = createStore({\n      answers: []\n    }, {\n      sid: \"a9098cvw\"\n    }).reset(formReset).on(scaleFormFieldChanged, (form, field) => {\n      const updatedAnswers = [\n        ...form.answers\n      ];\n      updatedAnswers[field.index] = field;\n      return {\n        ...form,\n        answers: updatedAnswers\n      };\n    });\n    const $currentPage = createStore(1, {\n      sid: \"b7vu0903\"\n    }).reset(formReset);\n    const $currentProgress = createStore(0, {\n      sid: \"brzu2ok9\"\n    }).reset(formReset);\n    const $currentQuestion = createStore(null, {\n      sid: \"ccugkeg3\"\n    });\n    const $currentValue = createStore(null, {\n      sid: \"buxe0nw4\"\n    }).reset(formReset);\n    const $isSplashScreenVisible = createStore(true, {\n      sid: \"ls62vx7\"\n    }).reset(formReset);\n    const directionChanged = createEvent({\n      sid: \"8hx2bsq7\"\n    });\n    const $direction = createStore(\"forward\", {\n      sid: \"5trycyme\"\n    }).on(directionChanged, (_, dir) => dir);\n    const formPageChanged = createEvent({\n      sid: \"5zz0rnbq\"\n    });\n    const delayedFormFieldChanged = _effector$factory({\n      sid: \"8rf797m9\",\n      fn: () => delay(scaleFormFieldChanged, DELAY_MS)\n    });\n    const $questions = restore(getQuestionsQuery.finished.success.map((el) => el.result), [], {\n      sid: \"8lo6afp1\"\n    });\n    const scrollToTopFx = createEffect(() => {\n      window.scrollTo({\n        top: 0,\n        behavior: \"smooth\"\n      });\n    }, {\n      sid: \"8qy6g9rk\"\n    });\n    sample({\n      and: [\n        {\n          clock: setSplashScreenVisibility,\n          target: [\n            $isSplashScreenVisible,\n            scrollToTopFx\n          ]\n        }\n      ],\n      or: {\n        sid: \"8xt04xn6\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: [\n            $currentPage,\n            $questions,\n            TestGate.open\n          ],\n          source: {\n            page: $currentPage,\n            questions: $questions\n          },\n          fn: ({ page, questions }) => {\n            if (!questions) return null;\n            return questions[page - 1];\n          },\n          target: $currentQuestion\n        }\n      ],\n      or: {\n        sid: \"1md6343u\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: delayedFormFieldChanged,\n          source: {\n            page: $currentPage,\n            progress: $currentProgress,\n            direction: $direction,\n            form: $scaleForm,\n            questions: $questions\n          },\n          filter: (params, field) => !field.isMultiple && params.direction === \"forward\",\n          fn: ({ page, progress, form }, answer) => {\n            const currentAnswer = form.answers[page - 1];\n            if (!isValidAnswer(currentAnswer)) return page;\n            const singleValue = (answer?.answer).value;\n            const isValidSingle = singleValue !== \"\" && singleValue !== void 0 && !isNull(singleValue);\n            if (answer.showInput || !isValidSingle) return page;\n            if (isValidSingle && progress < 100 && page === form.answers.length) {\n              return page + 1;\n            }\n            return page;\n          },\n          target: formPageChanged\n        }\n      ],\n      or: {\n        sid: \"315rbtcb\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: scaleFormFieldChanged,\n          source: {\n            form: $scaleForm,\n            page: $currentPage\n          },\n          filter: (_, field) => !(field.isMultiple || field.isSingle),\n          fn: ({ form, page }) => {\n            const currentPage = page - 1;\n            const current = form.answers[currentPage];\n            if (form.answers && form.answers.length > 0 && current && \"value\" in current.answer) {\n              if (!current.answer.value) return null;\n              return current.answer.value;\n            }\n            return null;\n          },\n          target: $currentValue\n        }\n      ],\n      or: {\n        sid: \"bw7xr6h3\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: [\n            $scaleForm,\n            formPageChanged\n          ],\n          source: {\n            form: $scaleForm,\n            page: $currentPage\n          },\n          fn: ({ form: { answers }, page }, pages) => getCurrentValue(answers, page, pages),\n          target: $currentValue\n        }\n      ],\n      or: {\n        sid: \"43pew38m\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: formPageChanged,\n          fn: (page) => {\n            window.scrollTo(0, 0);\n            return page;\n          },\n          target: $currentPage\n        }\n      ],\n      or: {\n        sid: \"9ozjtlyt\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: $scaleForm,\n          source: {\n            questions: $questions,\n            form: $scaleForm\n          },\n          fn: ({ questions, form: { answers } }) => getProgress(answers.length, questions.length),\n          target: $currentProgress\n        }\n      ],\n      or: {\n        sid: \"3sm1l2v1\"\n      }\n    });\n    return {\n      setSplashScreenVisibility,\n      $scaleForm,\n      $currentPage,\n      $currentProgress,\n      formReset,\n      $currentQuestion,\n      formPageChanged,\n      $currentValue,\n      directionChanged,\n      $isSplashScreenVisible,\n      scaleFormFieldChanged,\n      $questions,\n      TestGate\n    };\n  })\n});\n",
      "start": 1750271784982,
      "end": 1750271784985,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Test/model/index.ts"],
        "names": [],
        "mappingslF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChxF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxttjF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3F,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAA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"
      }
    }
  ]
}
