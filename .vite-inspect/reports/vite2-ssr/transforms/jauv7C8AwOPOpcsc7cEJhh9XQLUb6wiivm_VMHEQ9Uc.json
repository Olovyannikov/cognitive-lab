{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEffect, createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isNull } from 'lodash-es';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\n\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\n\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\nimport { DELAY_MS } from './constants';\nimport { getProgress } from './getProgress';\n\n/**\n * Модель теста, реализованная на Effector atom.\n * @returns {object} API для управления состоянием теста\n */\nexport const TestModel = atom(() => {\n    /** Гейт для инициализации/размонтирования компонента теста */\n    const TestGate = createGate();\n\n    /** Событие сброса формы */\n    const formReset = createEvent();\n    /** Событие для управления видимостью сплэш-экрана */\n    const setSplashScreenVisibility = createEvent<boolean>();\n\n    /** Событие изменения поля шкалы */\n    const scaleFormFieldChanged = createEvent<PreparedAnswer>();\n\n    /**\n     * Стор с ответами пользователя\n     */\n    const $scaleForm = createStore<Answers>({\n        answers: [],\n    })\n        .reset(formReset)\n        .on(scaleFormFieldChanged, (form, field) => {\n            const updatedAnswers = [...form.answers];\n            updatedAnswers[field.index] = field;\n            return { ...form, answers: updatedAnswers };\n        });\n\n    /** Текущая страница теста */\n    const $currentPage = createStore(1).reset(formReset);\n    /** Текущий прогресс (в процентах) */\n    const $currentProgress = createStore(0).reset(formReset);\n    /** Текущий вопрос */\n    const $currentQuestion = createStore<QuestionsResponse | null>(null);\n    /** Текущее значение ответа */\n    const $currentValue = createStore<PreparedAnswer['answer'] | null>(null).reset(formReset);\n    /** Видимость сплэш-экрана */\n    const $isSplashScreenVisible = createStore<boolean>(true).reset(formReset);\n\n    /** Событие смены направления (вперед/назад) */\n    const directionChanged = createEvent<'forward' | 'backward'>();\n    /** Стор направления */\n    const $direction = createStore<'forward' | 'backward'>('forward').on(directionChanged, (_, dir) => dir);\n\n    /** Событие смены страницы формы */\n    const formPageChanged = createEvent<number>();\n\n    /** Задержка для события изменения поля */\n    const delayedFormFieldChanged = delay(scaleFormFieldChanged, DELAY_MS);\n\n    /** Стор с вопросами */\n    const $questions = restore(\n        getQuestionsQuery.finished.success.map((el) => el.result),\n        []\n    );\n\n    // --- Реактивные связи ---\n\n    const scrollToTopFx = createEffect(() => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    });\n\n    sample({\n        clock: setSplashScreenVisibility,\n        target: [$isSplashScreenVisible, scrollToTopFx],\n    });\n\n    sample({\n        clock: [$currentPage, $questions, TestGate.open],\n        source: {\n            page: $currentPage,\n            questions: $questions,\n        },\n        fn: ({ page, questions }) => {\n            if (!questions) return null;\n            return questions[page - 1];\n        },\n        target: $currentQuestion,\n    });\n\n    // --- Логика перехода вперед по шкале ---\n    sample({\n        clock: delayedFormFieldChanged,\n        source: {\n            page: $currentPage,\n            progress: $currentProgress,\n            direction: $direction,\n            form: $scaleForm,\n            questions: $questions,\n        },\n        filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n        fn: ({ page, progress, form }, answer) => {\n            const currentAnswer = form.answers[page - 1];\n\n            if (!isValidAnswer(currentAnswer)) return page;\n            const singleValue = (answer?.answer as SingleChoiceAnswer).value;\n\n            const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\n            if (answer.showInput || !isValidSingle) return page;\n\n            if (isValidSingle && progress < 100 && page === form.answers.length) {\n                return page + 1;\n            }\n            return page;\n        },\n        target: formPageChanged,\n    });\n\n    // --- Получение значения для шкалы (не single/multi) ---\n    sample({\n        clock: scaleFormFieldChanged,\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        filter: (_, field) => !(field.isMultiple || field.isSingle),\n        fn: ({ form, page }) => {\n            const currentPage = page - 1;\n            const current = form.answers[currentPage];\n            if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\n                if (!current.answer.value) return null;\n                return current.answer.value as unknown as ScaleChoiceAnswer;\n            }\n            return null;\n        },\n        target: $currentValue,\n    });\n\n    // --- Получение значения для текущего ответа (single/multi/scale) ---\n    sample({\n        clock: [$scaleForm, formPageChanged],\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        fn: ({ form: { answers }, page }, pages) => getCurrentValue(answers, page, pages),\n        target: $currentValue,\n    });\n\n    // --- Смена страницы и скролл вверх ---\n    sample({\n        clock: formPageChanged,\n        fn: (page) => {\n            window.scrollTo(0, 0);\n            return page;\n        },\n        target: $currentPage,\n    });\n\n    // --- Обновление прогресса ---\n    sample({\n        clock: $scaleForm,\n        source: { questions: $questions, form: $scaleForm },\n        fn: ({ questions, form: { answers } }) => getProgress(answers.length, questions.length),\n        target: $currentProgress,\n    });\n\n    /**\n     * API модели теста\n     */\n    return {\n        setSplashScreenVisibility,\n        $scaleForm,\n        $currentPage,\n        $currentProgress,\n        formReset,\n        $currentQuestion,\n        formPageChanged,\n        $currentValue,\n        directionChanged,\n        $isSplashScreenVisible,\n        scaleFormFieldChanged,\n        $questions,\n        TestGate,\n    };\n});\n",
      "start": 1750275033559,
      "end": 1750275033597,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createEffect, createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isNull } from 'lodash-es';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\nimport { DELAY_MS } from './constants';\nimport { getProgress } from './getProgress';\n\n/**\n * Модель теста, реализованная на Effector atom.\n * @returns {object} API для управления состоянием теста\n */\nexport const TestModel = atom(() => {\n  /** Гейт для инициализации/размонтирования компонента теста */\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-i4prsp\"\n    }\n  });\n\n  /** Событие сброса формы */\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-4vzytn\"\n  });\n  /** Событие для управления видимостью сплэш-экрана */\n  const setSplashScreenVisibility = createEvent<boolean>({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-7ajh1q\"\n  });\n\n  /** Событие изменения поля шкалы */\n  const scaleFormFieldChanged = createEvent<PreparedAnswer>({\n    name: \"scaleFormFieldChanged\",\n    sid: \"qu2rzx\"\n  });\n\n  /**\n   * Стор с ответами пользователя\n   */\n  const $scaleForm = createStore<Answers>({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"-e2k1ii\"\n  }).reset(formReset).on(scaleFormFieldChanged, (form, field) => {\n    const updatedAnswers = [...form.answers];\n    updatedAnswers[field.index] = field;\n    return {\n      ...form,\n      answers: updatedAnswers\n    };\n  });\n\n  /** Текущая страница теста */\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"i98h4q\"\n  }).reset(formReset);\n  /** Текущий прогресс (в процентах) */\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"-757i3u\"\n  }).reset(formReset);\n  /** Текущий вопрос */\n  const $currentQuestion = createStore<QuestionsResponse | null>(null, {\n    name: \"$currentQuestion\",\n    sid: \"x93ukm\"\n  });\n  /** Текущее значение ответа */\n  const $currentValue = createStore<PreparedAnswer['answer'] | null>(null, {\n    name: \"$currentValue\",\n    sid: \"x9xnnq\"\n  }).reset(formReset);\n  /** Видимость сплэш-экрана */\n  const $isSplashScreenVisible = createStore<boolean>(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"uybwb5\"\n  }).reset(formReset);\n\n  /** Событие смены направления (вперед/назад) */\n  const directionChanged = createEvent<'forward' | 'backward'>({\n    name: \"directionChanged\",\n    sid: \"xndu11\"\n  });\n  /** Стор направления */\n  const $direction = createStore<'forward' | 'backward'>('forward', {\n    name: \"$direction\",\n    sid: \"-sgmg7m\"\n  }).on(directionChanged, (_, dir) => dir);\n\n  /** Событие смены страницы формы */\n  const formPageChanged = createEvent<number>({\n    name: \"formPageChanged\",\n    sid: \"-dde5z4\"\n  });\n\n  /** Задержка для события изменения поля */\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-sbtku7\",\n    fn: () => delay(scaleFormFieldChanged, DELAY_MS),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n\n  /** Стор с вопросами */\n  const $questions = restore(getQuestionsQuery.finished.success.map(el => el.result), [], {\n    name: \"$questions\",\n    sid: \"dxiyd3\"\n  });\n\n  // --- Реактивные связи ---\n\n  const scrollToTopFx = createEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, {\n    name: \"scrollToTopFx\",\n    sid: \"-zehlsu\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: [$isSplashScreenVisible, scrollToTopFx]\n    }],\n    or: {\n      sid: \"vaaafu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"vd19en\"\n    }\n  });\n\n  // --- Логика перехода вперед по шкале ---\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction,\n        form: $scaleForm,\n        questions: $questions\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n      fn: ({\n        page,\n        progress,\n        form\n      }, answer) => {\n        const currentAnswer = form.answers[page - 1];\n        if (!isValidAnswer(currentAnswer)) return page;\n        const singleValue = (answer?.answer as SingleChoiceAnswer).value;\n        const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\n        if (answer.showInput || !isValidSingle) return page;\n        if (isValidSingle && progress < 100 && page === form.answers.length) {\n          return page + 1;\n        }\n        return page;\n      },\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"vwa26a\"\n    }\n  });\n\n  // --- Получение значения для шкалы (не single/multi) ---\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        const current = form.answers[currentPage];\n        if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\n          if (!current.answer.value) return null;\n          return current.answer.value as unknown as ScaleChoiceAnswer;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"fv2jse\"\n    }\n  });\n\n  // --- Получение значения для текущего ответа (single/multi/scale) ---\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => getCurrentValue(answers, page, pages),\n      target: $currentValue\n    }],\n    or: {\n      sid: \"gt5sks\"\n    }\n  });\n\n  // --- Смена страницы и скролл вверх ---\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: page => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"har7kc\"\n    }\n  });\n\n  // --- Обновление прогресса ---\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => getProgress(answers.length, questions.length),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"hrstyj\"\n    }\n  });\n\n  /**\n   * API модели теста\n   */\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});",
      "start": 1750275033597,
      "end": 1750275033602,
      "order": "pre-normal",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createEffect",
          "createEvent",
          "createStore",
          "restore",
          "sample",
          "createGate",
          "isNull",
          "delay",
          "atom",
          "getCurrentValue",
          "isValidAnswer",
          "getQuestionsQuery",
          "QuestionsResponse",
          "Answers",
          "PreparedAnswer",
          "ScaleChoiceAnswer",
          "SingleChoiceAnswer",
          "DELAY_MS",
          "getProgress",
          "TestModel",
          "TestGate",
          "and",
          "or",
          "name",
          "sid",
          "formReset",
          "setSplashScreenVisibility",
          "scaleFormFieldChanged",
          "$scaleForm",
          "answers",
          "reset",
          "on",
          "form",
          "field",
          "updatedAnswers",
          "index",
          "$currentPage",
          "$currentProgress",
          "$currentQuestion",
          "$currentValue",
          "$isSplashScreenVisible",
          "directionChanged",
          "$direction",
          "_",
          "dir",
          "formPageChanged",
          "delayedFormFieldChanged",
          "_withFactory",
          "\"-sbtku7\"",
          "fn",
          "\"delayedFormFieldChanged\"",
          "method",
          "\"delay\"",
          "$questions",
          "finished",
          "success",
          "map",
          "el",
          "result",
          "scrollToTopFx",
          "window",
          "scrollTo",
          "top",
          "behavior",
          "clock",
          "target",
          "open",
          "source",
          "page",
          "questions",
          "progress",
          "direction",
          "filter",
          "params",
          "isMultiple",
          "answer",
          "currentAnswer",
          "singleValue",
          "value",
          "isValidSingle",
          "undefined",
          "showInput",
          "length",
          "isSingle",
          "currentPage",
          "current",
          "pages"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts"],
        "sourcesContent": [
          "import { createEffect, createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isNull } from 'lodash-es';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\n\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\n\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\nimport { DELAY_MS } from './constants';\nimport { getProgress } from './getProgress';\n\n/**\n * Модель теста, реализованная на Effector atom.\n * @returns {object} API для управления состоянием теста\n */\nexport const TestModel = atom(() => {\n    /** Гейт для инициализации/размонтирования компонента теста */\n    const TestGate = createGate();\n\n    /** Событие сброса формы */\n    const formReset = createEvent();\n    /** Событие для управления видимостью сплэш-экрана */\n    const setSplashScreenVisibility = createEvent<boolean>();\n\n    /** Событие изменения поля шкалы */\n    const scaleFormFieldChanged = createEvent<PreparedAnswer>();\n\n    /**\n     * Стор с ответами пользователя\n     */\n    const $scaleForm = createStore<Answers>({\n        answers: [],\n    })\n        .reset(formReset)\n        .on(scaleFormFieldChanged, (form, field) => {\n            const updatedAnswers = [...form.answers];\n            updatedAnswers[field.index] = field;\n            return { ...form, answers: updatedAnswers };\n        });\n\n    /** Текущая страница теста */\n    const $currentPage = createStore(1).reset(formReset);\n    /** Текущий прогресс (в процентах) */\n    const $currentProgress = createStore(0).reset(formReset);\n    /** Текущий вопрос */\n    const $currentQuestion = createStore<QuestionsResponse | null>(null);\n    /** Текущее значение ответа */\n    const $currentValue = createStore<PreparedAnswer['answer'] | null>(null).reset(formReset);\n    /** Видимость сплэш-экрана */\n    const $isSplashScreenVisible = createStore<boolean>(true).reset(formReset);\n\n    /** Событие смены направления (вперед/назад) */\n    const directionChanged = createEvent<'forward' | 'backward'>();\n    /** Стор направления */\n    const $direction = createStore<'forward' | 'backward'>('forward').on(directionChanged, (_, dir) => dir);\n\n    /** Событие смены страницы формы */\n    const formPageChanged = createEvent<number>();\n\n    /** Задержка для события изменения поля */\n    const delayedFormFieldChanged = delay(scaleFormFieldChanged, DELAY_MS);\n\n    /** Стор с вопросами */\n    const $questions = restore(\n        getQuestionsQuery.finished.success.map((el) => el.result),\n        []\n    );\n\n    // --- Реактивные связи ---\n\n    const scrollToTopFx = createEffect(() => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    });\n\n    sample({\n        clock: setSplashScreenVisibility,\n        target: [$isSplashScreenVisible, scrollToTopFx],\n    });\n\n    sample({\n        clock: [$currentPage, $questions, TestGate.open],\n        source: {\n            page: $currentPage,\n            questions: $questions,\n        },\n        fn: ({ page, questions }) => {\n            if (!questions) return null;\n            return questions[page - 1];\n        },\n        target: $currentQuestion,\n    });\n\n    // --- Логика перехода вперед по шкале ---\n    sample({\n        clock: delayedFormFieldChanged,\n        source: {\n            page: $currentPage,\n            progress: $currentProgress,\n            direction: $direction,\n            form: $scaleForm,\n            questions: $questions,\n        },\n        filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n        fn: ({ page, progress, form }, answer) => {\n            const currentAnswer = form.answers[page - 1];\n\n            if (!isValidAnswer(currentAnswer)) return page;\n            const singleValue = (answer?.answer as SingleChoiceAnswer).value;\n\n            const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\n            if (answer.showInput || !isValidSingle) return page;\n\n            if (isValidSingle && progress < 100 && page === form.answers.length) {\n                return page + 1;\n            }\n            return page;\n        },\n        target: formPageChanged,\n    });\n\n    // --- Получение значения для шкалы (не single/multi) ---\n    sample({\n        clock: scaleFormFieldChanged,\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        filter: (_, field) => !(field.isMultiple || field.isSingle),\n        fn: ({ form, page }) => {\n            const currentPage = page - 1;\n            const current = form.answers[currentPage];\n            if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\n                if (!current.answer.value) return null;\n                return current.answer.value as unknown as ScaleChoiceAnswer;\n            }\n            return null;\n        },\n        target: $currentValue,\n    });\n\n    // --- Получение значения для текущего ответа (single/multi/scale) ---\n    sample({\n        clock: [$scaleForm, formPageChanged],\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        fn: ({ form: { answers }, page }, pages) => getCurrentValue(answers, page, pages),\n        target: $currentValue,\n    });\n\n    // --- Смена страницы и скролл вверх ---\n    sample({\n        clock: formPageChanged,\n        fn: (page) => {\n            window.scrollTo(0, 0);\n            return page;\n        },\n        target: $currentPage,\n    });\n\n    // --- Обновление прогресса ---\n    sample({\n        clock: $scaleForm,\n        source: { questions: $questions, form: $scaleForm },\n        fn: ({ questions, form: { answers } }) => getProgress(answers.length, questions.length),\n        target: $currentProgress,\n    });\n\n    /**\n     * API модели теста\n     */\n    return {\n        setSplashScreenVisibility,\n        $scaleForm,\n        $currentPage,\n        $currentProgress,\n        formReset,\n        $currentQuestion,\n        formPageChanged,\n        $currentValue,\n        directionChanged,\n        $isSplashScreenVisible,\n        scaleFormFieldChanged,\n        $questions,\n        TestGate,\n    };\n});\n"
        ],
        "mappings": ";AAAA,SAASA,YAAY,EAAEC,WAAW,EAAEC,WAAW,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AAClF,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,KAAK,QAAQ,UAAU;AAEhC,SAASC,IAAI,QAAQ,oBAAoB;AAEzC,SAASC,eAAe,QAAQ,uCAAuC;AACvE,SAASC,aAAa,QAAQ,qCAAqC;AAEnE,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,cAAcC,iBAAiB,QAAQ,YAAY;AACnD,cAAcC,OAAO,EAAEC,cAAc,EAAEC,iBAAiB,EAAEC,kBAAkB,QAAQ,cAAc;AAClG,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,WAAW,QAAQ,eAAe;;AAE3C;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAGX,IAAI,CAAC,MAAM;EAChC;EACA,MAAMY,QAAQ,GAAGf,UAAU;IAAAgB,GAAA;IAAAC,EAAA;MAAAC,IAAA;MAAAC,GAAA;IAAA;EAAA,CAAC,CAAC;;EAE7B;EACA,MAAMC,SAAS,GAAGxB,WAAW;IAAAsB,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;EAC/B;EACA,MAAME,yBAAyB,GAAGzB,WAAW,CAAC,OAAO,CAAC;IAAAsB,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;;EAExD;EACA,MAAMG,qBAAqB,GAAG1B,WAAW,CAACa,cAAc,CAAC;IAAAS,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;;EAE3D;AACJ;AACA;EACI,MAAMI,UAAU,GAAG1B,WAAW,CAACW,OAAO,CAAC,CAAC;IACpCgB,OAAO,EAAE;EACb,CAAC;IAAAN,IAAA;IAAAC,GAAA;EAAA,EAAC,CACGM,KAAK,CAACL,SAAS,CAAC,CAChBM,EAAE,CAACJ,qBAAqB,EAAE,CAACK,IAAI,EAAEC,KAAK,KAAK;IACxC,MAAMC,cAAc,GAAG,CAAC,GAAGF,IAAI,CAACH,OAAO,CAAC;IACxCK,cAAc,CAACD,KAAK,CAACE,KAAK,CAAC,GAAGF,KAAK;IACnC,OAAO;MAAE,GAAGD,IAAI;MAAEH,OAAO,EAAEK;IAAe,CAAC;EAC/C,CAAC,CAAC;;EAEN;EACA,MAAME,YAAY,GAAGlC,WAAW,CAAC,CAAC;IAAAqB,IAAA;IAAAC,GAAA;EAAA,EAAC,CAACM,KAAK,CAACL,SAAS,CAAC;EACpD;EACA,MAAMY,gBAAgB,GAAGnC,WAAW,CAAC,CAAC;IAAAqB,IAAA;IAAAC,GAAA;EAAA,EAAC,CAACM,KAAK,CAACL,SAAS,CAAC;EACxD;EACA,MAAMa,gBAAgB,GAAGpC,WAAW,CAACU,iBAAiB,GAAG,IAAI,CAAC,CAAC,IAAI;IAAAW,IAAA;IAAAC,GAAA;EAAA,EAAC;EACpE;EACA,MAAMe,aAAa,GAAGrC,WAAW,CAACY,cAAc,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI;IAAAS,IAAA;IAAAC,GAAA;EAAA,EAAC,CAACM,KAAK,CAACL,SAAS,CAAC;EACzF;EACA,MAAMe,sBAAsB,GAAGtC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI;IAAAqB,IAAA;IAAAC,GAAA;EAAA,EAAC,CAACM,KAAK,CAACL,SAAS,CAAC;;EAE1E;EACA,MAAMgB,gBAAgB,GAAGxC,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC;IAAAsB,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;EAC9D;EACA,MAAMkB,UAAU,GAAGxC,WAAW,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC,SAAS;IAAAqB,IAAA;IAAAC,GAAA;EAAA,EAAC,CAACO,EAAE,CAACU,gBAAgB,EAAE,CAACE,CAAC,EAAEC,GAAG,KAAKA,GAAG,CAAC;;EAEvG;EACA,MAAMC,eAAe,GAAG5C,WAAW,CAAC,MAAM,CAAC;IAAAsB,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;;EAE7C;EACA,MAAMsB,uBAAuB,GAAAC,YAAA;IAAAvB,GAAA,EAAAwB,SAAA;IAAAC,EAAA,EAAAA,CAAA,KAAG1C,KAAK,CAACoB,qBAAqB,EAAEV,QAAQ,CAAC;IAAAM,IAAA,EAAA2B,yBAAA;IAAAC,MAAA,EAAAC;EAAA;;EAEtE;EACA,MAAMC,UAAU,GAAGlD,OAAO,CACtBQ,iBAAiB,CAAC2C,QAAQ,CAACC,OAAO,CAACC,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACC,MAAM,CAAC,EACzD,EAAE;IAAAnC,IAAA;IAAAC,GAAA;EAAA,CACN,CAAC;;EAED;;EAEA,MAAMmC,aAAa,GAAG3D,YAAY,CAAC,MAAM;IACrC4D,MAAM,CAACC,QAAQ,CAAC;MAAEC,GAAG,EAAE,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EACnD,CAAC;IAAAxC,IAAA;IAAAC,GAAA;EAAA,EAAC;EAEFpB,MAAM;IAAAiB,GAAA,GAAC;MACH2C,KAAK,EAAEtC,yBAAyB;MAChCuC,MAAM,EAAE,CAACzB,sBAAsB,EAAEmB,aAAa;IAClD,CAAC;IAAArC,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;EAEFpB,MAAM;IAAAiB,GAAA,GAAC;MACH2C,KAAK,EAAE,CAAC5B,YAAY,EAAEiB,UAAU,EAAEjC,QAAQ,CAAC8C,IAAI,CAAC;MAChDC,MAAM,EAAE;QACJC,IAAI,EAAEhC,YAAY;QAClBiC,SAAS,EAAEhB;MACf,CAAC;MACDJ,EAAE,EAAEA,CAAC;QAAEmB,IAAI;QAAEC;MAAU,CAAC,KAAK;QACzB,IAAI,CAACA,SAAS,EAAE,OAAO,IAAI;QAC3B,OAAOA,SAAS,CAACD,IAAI,GAAG,CAAC,CAAC;MAC9B,CAAC;MACDH,MAAM,EAAE3B;IACZ,CAAC;IAAAhB,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;;EAEF;EACApB,MAAM;IAAAiB,GAAA,GAAC;MACH2C,KAAK,EAAElB,uBAAuB;MAC9BqB,MAAM,EAAE;QACJC,IAAI,EAAEhC,YAAY;QAClBkC,QAAQ,EAAEjC,gBAAgB;QAC1BkC,SAAS,EAAE7B,UAAU;QACrBV,IAAI,EAAEJ,UAAU;QAChByC,SAAS,EAAEhB;MACf,CAAC;MACDmB,MAAM,EAAEA,CAACC,MAAM,EAAExC,KAAK,KAAK,CAACA,KAAK,CAACyC,UAAU,IAAID,MAAM,CAACF,SAAS,KAAK,SAAS;MAC9EtB,EAAE,EAAEA,CAAC;QAAEmB,IAAI;QAAEE,QAAQ;QAAEtC;MAAK,CAAC,EAAE2C,MAAM,KAAK;QACtC,MAAMC,aAAa,GAAG5C,IAAI,CAACH,OAAO,CAACuC,IAAI,GAAG,CAAC,CAAC;QAE5C,IAAI,CAAC1D,aAAa,CAACkE,aAAa,CAAC,EAAE,OAAOR,IAAI;QAC9C,MAAMS,WAAW,GAAG,CAACF,MAAM,EAAEA,MAAM,IAAI3D,kBAAkB,EAAE8D,KAAK;QAEhE,MAAMC,aAAa,GAAGF,WAAW,KAAK,EAAE,IAAIA,WAAW,KAAKG,SAAS,IAAI,CAAC1E,MAAM,CAACuE,WAAW,CAAC;QAC7F,IAAIF,MAAM,CAACM,SAAS,IAAI,CAACF,aAAa,EAAE,OAAOX,IAAI;QAEnD,IAAIW,aAAa,IAAIT,QAAQ,GAAG,GAAG,IAAIF,IAAI,KAAKpC,IAAI,CAACH,OAAO,CAACqD,MAAM,EAAE;UACjE,OAAOd,IAAI,GAAG,CAAC;QACnB;QACA,OAAOA,IAAI;MACf,CAAC;MACDH,MAAM,EAAEpB;IACZ,CAAC;IAAAvB,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;;EAEF;EACApB,MAAM;IAAAiB,GAAA,GAAC;MACH2C,KAAK,EAAErC,qBAAqB;MAC5BwC,MAAM,EAAE;QACJnC,IAAI,EAAEJ,UAAU;QAChBwC,IAAI,EAAEhC;MACV,CAAC;MACDoC,MAAM,EAAEA,CAAC7B,CAAC,EAAEV,KAAK,KAAK,EAAEA,KAAK,CAACyC,UAAU,IAAIzC,KAAK,CAACkD,QAAQ,CAAC;MAC3DlC,EAAE,EAAEA,CAAC;QAAEjB,IAAI;QAAEoC;MAAK,CAAC,KAAK;QACpB,MAAMgB,WAAW,GAAGhB,IAAI,GAAG,CAAC;QAC5B,MAAMiB,OAAO,GAAGrD,IAAI,CAACH,OAAO,CAACuD,WAAW,CAAC;QACzC,IAAIpD,IAAI,CAACH,OAAO,IAAIG,IAAI,CAACH,OAAO,CAACqD,MAAM,GAAG,CAAC,IAAIG,OAAO,IAAI,OAAO,IAAIA,OAAO,CAACV,MAAM,EAAE;UACjF,IAAI,CAACU,OAAO,CAACV,MAAM,CAACG,KAAK,EAAE,OAAO,IAAI;UACtC,OAAOO,OAAO,CAACV,MAAM,CAACG,KAAK,IAAI,OAAO,IAAI/D,iBAAiB;QAC/D;QACA,OAAO,IAAI;MACf,CAAC;MACDkD,MAAM,EAAE1B;IACZ,CAAC;IAAAjB,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;;EAEF;EACApB,MAAM;IAAAiB,GAAA,GAAC;MACH2C,KAAK,EAAE,CAACpC,UAAU,EAAEiB,eAAe,CAAC;MACpCsB,MAAM,EAAE;QACJnC,IAAI,EAAEJ,UAAU;QAChBwC,IAAI,EAAEhC;MACV,CAAC;MACDa,EAAE,EAAEA,CAAC;QAAEjB,IAAI,EAAE;UAAEH;QAAQ,CAAC;QAAEuC;MAAK,CAAC,EAAEkB,KAAK,KAAK7E,eAAe,CAACoB,OAAO,EAAEuC,IAAI,EAAEkB,KAAK,CAAC;MACjFrB,MAAM,EAAE1B;IACZ,CAAC;IAAAjB,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;;EAEF;EACApB,MAAM;IAAAiB,GAAA,GAAC;MACH2C,KAAK,EAAEnB,eAAe;MACtBI,EAAE,EAAGmB,IAAI,IAAK;QACVR,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;QACrB,OAAOO,IAAI;MACf,CAAC;MACDH,MAAM,EAAE7B;IACZ,CAAC;IAAAd,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;;EAEF;EACApB,MAAM;IAAAiB,GAAA,GAAC;MACH2C,KAAK,EAAEpC,UAAU;MACjBuC,MAAM,EAAE;QAAEE,SAAS,EAAEhB,UAAU;QAAErB,IAAI,EAAEJ;MAAW,CAAC;MACnDqB,EAAE,EAAEA,CAAC;QAAEoB,SAAS;QAAErC,IAAI,EAAE;UAAEH;QAAQ;MAAE,CAAC,KAAKX,WAAW,CAACW,OAAO,CAACqD,MAAM,EAAEb,SAAS,CAACa,MAAM,CAAC;MACvFjB,MAAM,EAAE5B;IACZ,CAAC;IAAAf,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;;EAEF;AACJ;AACA;EACI,OAAO;IACHE,yBAAyB;IACzBE,UAAU;IACVQ,YAAY;IACZC,gBAAgB;IAChBZ,SAAS;IACTa,gBAAgB;IAChBO,eAAe;IACfN,aAAa;IACbE,gBAAgB;IAChBD,sBAAsB;IACtBb,qBAAqB;IACrB0B,UAAU;IACVjC;EACJ,CAAC;AACL,CAAC,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createEffect, createEvent, createStore, restore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { isNull } from \"lodash-es\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { getCurrentValue } from \"@/entities/Test/model/getCurrentValue\";\nimport { isValidAnswer } from \"@/entities/Test/model/isValidAnswer\";\nimport { getQuestionsQuery } from \"../api\";\nimport { DELAY_MS } from \"./constants\";\nimport { getProgress } from \"./getProgress\";\nexport const TestModel = atom(() => {\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-i4prsp\"\n    }\n  });\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-4vzytn\"\n  });\n  const setSplashScreenVisibility = createEvent({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-7ajh1q\"\n  });\n  const scaleFormFieldChanged = createEvent({\n    name: \"scaleFormFieldChanged\",\n    sid: \"qu2rzx\"\n  });\n  const $scaleForm = createStore({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"-e2k1ii\"\n  }).reset(formReset).on(scaleFormFieldChanged, (form, field) => {\n    const updatedAnswers = [...form.answers];\n    updatedAnswers[field.index] = field;\n    return {\n      ...form,\n      answers: updatedAnswers\n    };\n  });\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"i98h4q\"\n  }).reset(formReset);\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"-757i3u\"\n  }).reset(formReset);\n  const $currentQuestion = createStore(null, {\n    name: \"$currentQuestion\",\n    sid: \"x93ukm\"\n  });\n  const $currentValue = createStore(null, {\n    name: \"$currentValue\",\n    sid: \"x9xnnq\"\n  }).reset(formReset);\n  const $isSplashScreenVisible = createStore(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"uybwb5\"\n  }).reset(formReset);\n  const directionChanged = createEvent({\n    name: \"directionChanged\",\n    sid: \"xndu11\"\n  });\n  const $direction = createStore(\"forward\", {\n    name: \"$direction\",\n    sid: \"-sgmg7m\"\n  }).on(directionChanged, (_, dir) => dir);\n  const formPageChanged = createEvent({\n    name: \"formPageChanged\",\n    sid: \"-dde5z4\"\n  });\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-sbtku7\",\n    fn: () => delay(scaleFormFieldChanged, DELAY_MS),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n  const $questions = restore(getQuestionsQuery.finished.success.map((el) => el.result), [], {\n    name: \"$questions\",\n    sid: \"dxiyd3\"\n  });\n  const scrollToTopFx = createEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }, {\n    name: \"scrollToTopFx\",\n    sid: \"-zehlsu\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: [$isSplashScreenVisible, scrollToTopFx]\n    }],\n    or: {\n      sid: \"vaaafu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"vd19en\"\n    }\n  });\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction,\n        form: $scaleForm,\n        questions: $questions\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === \"forward\",\n      fn: ({\n        page,\n        progress,\n        form\n      }, answer) => {\n        const currentAnswer = form.answers[page - 1];\n        if (!isValidAnswer(currentAnswer)) return page;\n        const singleValue = (answer?.answer).value;\n        const isValidSingle = singleValue !== \"\" && singleValue !== void 0 && !isNull(singleValue);\n        if (answer.showInput || !isValidSingle) return page;\n        if (isValidSingle && progress < 100 && page === form.answers.length) {\n          return page + 1;\n        }\n        return page;\n      },\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"vwa26a\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        const current = form.answers[currentPage];\n        if (form.answers && form.answers.length > 0 && current && \"value\" in current.answer) {\n          if (!current.answer.value) return null;\n          return current.answer.value;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"fv2jse\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => getCurrentValue(answers, page, pages),\n      target: $currentValue\n    }],\n    or: {\n      sid: \"gt5sks\"\n    }\n  });\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: (page) => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"har7kc\"\n    }\n  });\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => getProgress(answers.length, questions.length),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"hrstyj\"\n    }\n  });\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});\n",
      "start": 1750275033602,
      "end": 1750275033782,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts"],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createEffect, createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isNull } from 'lodash-es';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { getCurrentValue } from '@/entities/Test/model/getCurrentValue';\nimport { isValidAnswer } from '@/entities/Test/model/isValidAnswer';\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\nimport { DELAY_MS } from './constants';\nimport { getProgress } from './getProgress';\n\n/**\n * Модель теста, реализованная на Effector atom.\n * @returns {object} API для управления состоянием теста\n */\nexport const TestModel = atom(() => {\n  /** Гейт для инициализации/размонтирования компонента теста */\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-i4prsp\"\n    }\n  });\n\n  /** Событие сброса формы */\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-4vzytn\"\n  });\n  /** Событие для управления видимостью сплэш-экрана */\n  const setSplashScreenVisibility = createEvent<boolean>({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-7ajh1q\"\n  });\n\n  /** Событие изменения поля шкалы */\n  const scaleFormFieldChanged = createEvent<PreparedAnswer>({\n    name: \"scaleFormFieldChanged\",\n    sid: \"qu2rzx\"\n  });\n\n  /**\n   * Стор с ответами пользователя\n   */\n  const $scaleForm = createStore<Answers>({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"-e2k1ii\"\n  }).reset(formReset).on(scaleFormFieldChanged, (form, field) => {\n    const updatedAnswers = [...form.answers];\n    updatedAnswers[field.index] = field;\n    return {\n      ...form,\n      answers: updatedAnswers\n    };\n  });\n\n  /** Текущая страница теста */\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"i98h4q\"\n  }).reset(formReset);\n  /** Текущий прогресс (в процентах) */\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"-757i3u\"\n  }).reset(formReset);\n  /** Текущий вопрос */\n  const $currentQuestion = createStore<QuestionsResponse | null>(null, {\n    name: \"$currentQuestion\",\n    sid: \"x93ukm\"\n  });\n  /** Текущее значение ответа */\n  const $currentValue = createStore<PreparedAnswer['answer'] | null>(null, {\n    name: \"$currentValue\",\n    sid: \"x9xnnq\"\n  }).reset(formReset);\n  /** Видимость сплэш-экрана */\n  const $isSplashScreenVisible = createStore<boolean>(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"uybwb5\"\n  }).reset(formReset);\n\n  /** Событие смены направления (вперед/назад) */\n  const directionChanged = createEvent<'forward' | 'backward'>({\n    name: \"directionChanged\",\n    sid: \"xndu11\"\n  });\n  /** Стор направления */\n  const $direction = createStore<'forward' | 'backward'>('forward', {\n    name: \"$direction\",\n    sid: \"-sgmg7m\"\n  }).on(directionChanged, (_, dir) => dir);\n\n  /** Событие смены страницы формы */\n  const formPageChanged = createEvent<number>({\n    name: \"formPageChanged\",\n    sid: \"-dde5z4\"\n  });\n\n  /** Задержка для события изменения поля */\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-sbtku7\",\n    fn: () => delay(scaleFormFieldChanged, DELAY_MS),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n\n  /** Стор с вопросами */\n  const $questions = restore(getQuestionsQuery.finished.success.map(el => el.result), [], {\n    name: \"$questions\",\n    sid: \"dxiyd3\"\n  });\n\n  // --- Реактивные связи ---\n\n  const scrollToTopFx = createEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, {\n    name: \"scrollToTopFx\",\n    sid: \"-zehlsu\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: [$isSplashScreenVisible, scrollToTopFx]\n    }],\n    or: {\n      sid: \"vaaafu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"vd19en\"\n    }\n  });\n\n  // --- Логика перехода вперед по шкале ---\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction,\n        form: $scaleForm,\n        questions: $questions\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n      fn: ({\n        page,\n        progress,\n        form\n      }, answer) => {\n        const currentAnswer = form.answers[page - 1];\n        if (!isValidAnswer(currentAnswer)) return page;\n        const singleValue = (answer?.answer as SingleChoiceAnswer).value;\n        const isValidSingle = singleValue !== '' && singleValue !== undefined && !isNull(singleValue);\n        if (answer.showInput || !isValidSingle) return page;\n        if (isValidSingle && progress < 100 && page === form.answers.length) {\n          return page + 1;\n        }\n        return page;\n      },\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"vwa26a\"\n    }\n  });\n\n  // --- Получение значения для шкалы (не single/multi) ---\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        const current = form.answers[currentPage];\n        if (form.answers && form.answers.length > 0 && current && 'value' in current.answer) {\n          if (!current.answer.value) return null;\n          return current.answer.value as unknown as ScaleChoiceAnswer;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"fv2jse\"\n    }\n  });\n\n  // --- Получение значения для текущего ответа (single/multi/scale) ---\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => getCurrentValue(answers, page, pages),\n      target: $currentValue\n    }],\n    or: {\n      sid: \"gt5sks\"\n    }\n  });\n\n  // --- Смена страницы и скролл вверх ---\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: page => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"har7kc\"\n    }\n  });\n\n  // --- Обновление прогресса ---\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => getProgress(answers.length, questions.length),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"hrstyj\"\n    }\n  });\n\n  /**\n   * API модели теста\n   */\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750275033782,
      "end": 1750275033782,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750275033783,
      "end": 1750275033783,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750275033783,
      "end": 1750275033783,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750275033783,
      "end": 1750275033783,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/entities/Test/model/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createEffect, createEvent, createStore, restore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { isNull } from \"lodash-es\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { getCurrentValue } from \"@/entities/Test/model/getCurrentValue\";\nimport { isValidAnswer } from \"@/entities/Test/model/isValidAnswer\";\nimport { getQuestionsQuery } from \"../api\";\nimport { DELAY_MS } from \"./constants\";\nimport { getProgress } from \"./getProgress\";\nexport const TestModel = atom(() => {\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-i4prsp\"\n    }\n  });\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-4vzytn\"\n  });\n  const setSplashScreenVisibility = createEvent({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-7ajh1q\"\n  });\n  const scaleFormFieldChanged = createEvent({\n    name: \"scaleFormFieldChanged\",\n    sid: \"qu2rzx\"\n  });\n  const $scaleForm = createStore({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"-e2k1ii\"\n  }).reset(formReset).on(scaleFormFieldChanged, (form, field) => {\n    const updatedAnswers = [...form.answers];\n    updatedAnswers[field.index] = field;\n    return {\n      ...form,\n      answers: updatedAnswers\n    };\n  });\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"i98h4q\"\n  }).reset(formReset);\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"-757i3u\"\n  }).reset(formReset);\n  const $currentQuestion = createStore(null, {\n    name: \"$currentQuestion\",\n    sid: \"x93ukm\"\n  });\n  const $currentValue = createStore(null, {\n    name: \"$currentValue\",\n    sid: \"x9xnnq\"\n  }).reset(formReset);\n  const $isSplashScreenVisible = createStore(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"uybwb5\"\n  }).reset(formReset);\n  const directionChanged = createEvent({\n    name: \"directionChanged\",\n    sid: \"xndu11\"\n  });\n  const $direction = createStore(\"forward\", {\n    name: \"$direction\",\n    sid: \"-sgmg7m\"\n  }).on(directionChanged, (_, dir) => dir);\n  const formPageChanged = createEvent({\n    name: \"formPageChanged\",\n    sid: \"-dde5z4\"\n  });\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-sbtku7\",\n    fn: () => delay(scaleFormFieldChanged, DELAY_MS),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n  const $questions = restore(getQuestionsQuery.finished.success.map((el) => el.result), [], {\n    name: \"$questions\",\n    sid: \"dxiyd3\"\n  });\n  const scrollToTopFx = createEffect(() => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  }, {\n    name: \"scrollToTopFx\",\n    sid: \"-zehlsu\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: [$isSplashScreenVisible, scrollToTopFx]\n    }],\n    or: {\n      sid: \"vaaafu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"vd19en\"\n    }\n  });\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction,\n        form: $scaleForm,\n        questions: $questions\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === \"forward\",\n      fn: ({\n        page,\n        progress,\n        form\n      }, answer) => {\n        const currentAnswer = form.answers[page - 1];\n        if (!isValidAnswer(currentAnswer)) return page;\n        const singleValue = (answer?.answer).value;\n        const isValidSingle = singleValue !== \"\" && singleValue !== void 0 && !isNull(singleValue);\n        if (answer.showInput || !isValidSingle) return page;\n        if (isValidSingle && progress < 100 && page === form.answers.length) {\n          return page + 1;\n        }\n        return page;\n      },\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"vwa26a\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        const current = form.answers[currentPage];\n        if (form.answers && form.answers.length > 0 && current && \"value\" in current.answer) {\n          if (!current.answer.value) return null;\n          return current.answer.value;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"fv2jse\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => getCurrentValue(answers, page, pages),\n      target: $currentValue\n    }],\n    or: {\n      sid: \"gt5sks\"\n    }\n  });\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: (page) => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"har7kc\"\n    }\n  });\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => getProgress(answers.length, questions.length),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"hrstyj\"\n    }\n  });\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});\n",
      "start": 1750275033783,
      "end": 1750275033783,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Test/model/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;"
      }
    }
  ]
}
