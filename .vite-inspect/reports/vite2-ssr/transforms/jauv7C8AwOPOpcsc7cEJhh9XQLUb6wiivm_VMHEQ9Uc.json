{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isArray, isNumber } from 'lodash-es';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\n\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, MultiChoiceAnswer, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\n\nexport const TestModel = atom(() => {\n    const TestGate = createGate();\n\n    const formReset = createEvent();\n    const setSplashScreenVisibility = createEvent<boolean>();\n\n    const $scaleForm = createStore<Answers>({\n        answers: [],\n    }).reset(formReset);\n\n    const $currentPage = createStore(1).reset(formReset);\n    const $currentProgress = createStore(0).reset(formReset);\n    const $currentQuestion = createStore<QuestionsResponse | null>(null);\n    const $currentValue = createStore<PreparedAnswer['answer'] | null>(null).reset(formReset);\n    const $isSplashScreenVisible = createStore<boolean>(true);\n\n    const directionChanged = createEvent<'forward' | 'backward'>();\n    const $direction = createStore<'forward' | 'backward'>('forward').on(directionChanged, (_, dir) => dir);\n\n    const formPageChanged = createEvent<number>();\n    const scaleFormFieldChanged = createEvent<PreparedAnswer>();\n    const delayedFormFieldChanged = delay(scaleFormFieldChanged, 250);\n\n    const $questions = restore(\n        getQuestionsQuery.finished.success.map((el) => el.result),\n        []\n    );\n\n    sample({\n        clock: setSplashScreenVisibility,\n        target: $isSplashScreenVisible,\n    });\n\n    sample({\n        clock: [$currentPage, $questions, TestGate.open],\n        source: {\n            page: $currentPage,\n            questions: $questions,\n        },\n        fn: ({ page, questions }) => {\n            if (!questions) return null;\n            return questions[page - 1];\n        },\n        target: $currentQuestion,\n    });\n\n    sample({\n        clock: scaleFormFieldChanged,\n        source: $scaleForm,\n        fn: (form, field) => {\n            form.answers[field.index] = field;\n            return { ...form };\n        },\n        target: $scaleForm,\n    });\n\n    sample({\n        clock: delayedFormFieldChanged,\n        source: { page: $currentPage, progress: $currentProgress, direction: $direction },\n        filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n        fn: ({ page, progress }, answer) =>\n            (answer?.answer as SingleChoiceAnswer).value !== null &&\n            (answer?.answer as SingleChoiceAnswer).value !== '' &&\n            (answer?.answer as SingleChoiceAnswer).value !== undefined &&\n            progress < 100\n                ? page + 1\n                : page,\n        target: formPageChanged,\n    });\n\n    sample({\n        clock: scaleFormFieldChanged,\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        filter: (_, field) => !(field.isMultiple || field.isSingle),\n        fn: ({ form, page }) => {\n            const currentPage = page - 1;\n\n            if (form.answers && form.answers.length > 0 && 'value' in form.answers[currentPage].answer) {\n                if (!form.answers[currentPage].answer.value) return null;\n                return form.answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n            }\n            return null;\n        },\n        target: $currentValue,\n    });\n\n    sample({\n        clock: [$scaleForm, formPageChanged],\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        fn: ({ form: { answers }, page }, pages) => {\n            const currentPage = (isNumber(pages) ? pages : page) - 1;\n            if (!answers[currentPage]?.answer) return null;\n\n            if (answers && answers[currentPage].answer && isArray(answers[currentPage].answer)) {\n                return answers[currentPage].answer as unknown as MultiChoiceAnswer;\n            }\n\n            if (answers && answers.length > 0 && answers[currentPage].isSingle) {\n                return answers[currentPage].answer as unknown as SingleChoiceAnswer;\n            }\n\n            if (answers && answers.length > 0 && 'value' in answers[currentPage].answer) {\n                return answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n            }\n\n            return null;\n        },\n        target: $currentValue,\n    });\n\n    sample({\n        clock: formPageChanged,\n        fn: (page) => {\n            window.scrollTo(0, 0);\n            return page;\n        },\n        target: $currentPage,\n    });\n\n    sample({\n        clock: $scaleForm,\n        source: { questions: $questions, form: $scaleForm },\n        fn: ({ questions, form: { answers } }) =>\n            Number(((answers.length / (questions?.length ?? 0)) * 100).toFixed(0)),\n        target: $currentProgress,\n    });\n\n    return {\n        setSplashScreenVisibility,\n        $scaleForm,\n        $currentPage,\n        $currentProgress,\n        formReset,\n        $currentQuestion,\n        formPageChanged,\n        $currentValue,\n        directionChanged,\n        $isSplashScreenVisible,\n        scaleFormFieldChanged,\n        $questions,\n        TestGate,\n    };\n});\n",
      "start": 1746125696205,
      "end": 1746125696253,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isArray, isNumber } from 'lodash-es';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, MultiChoiceAnswer, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\nexport const TestModel = atom(() => {\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-wt420q\"\n    }\n  });\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-k1fvfv\"\n  });\n  const setSplashScreenVisibility = createEvent<boolean>({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-mx1025\"\n  });\n  const $scaleForm = createStore<Answers>({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"sjuosy\"\n  }).reset(formReset);\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"-dgs7ab\"\n  }).reset(formReset);\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"vou922\"\n  }).reset(formReset);\n  const $currentQuestion = createStore<QuestionsResponse | null>(null, {\n    name: \"$currentQuestion\",\n    sid: \"-9cy4ww\"\n  });\n  const $currentValue = createStore<PreparedAnswer['answer'] | null>(null, {\n    name: \"$currentValue\",\n    sid: \"-9t5y7z\"\n  }).reset(formReset);\n  const $isSplashScreenVisible = createStore<boolean>(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"-cltbyr\"\n  });\n  const directionChanged = createEvent<'forward' | 'backward'>({\n    name: \"directionChanged\",\n    sid: \"-adt0n2\"\n  });\n  const $direction = createStore<'forward' | 'backward'>('forward', {\n    name: \"$direction\",\n    sid: \"-bvoxkv\"\n  }).on(directionChanged, (_, dir) => dir);\n  const formPageChanged = createEvent<number>({\n    name: \"formPageChanged\",\n    sid: \"cofsjj\"\n  });\n  const scaleFormFieldChanged = createEvent<PreparedAnswer>({\n    name: \"scaleFormFieldChanged\",\n    sid: \"rb4ee4\"\n  });\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-2r18pr\",\n    fn: () => delay(scaleFormFieldChanged, 250),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n  const $questions = restore(getQuestionsQuery.finished.success.map(el => el.result), [], {\n    name: \"$questions\",\n    sid: \"-vzudvs\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: $isSplashScreenVisible\n    }],\n    or: {\n      sid: \"te3sv2\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"tgurtv\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: $scaleForm,\n      fn: (form, field) => {\n        form.answers[field.index] = field;\n        return {\n          ...form\n        };\n      },\n      target: $scaleForm\n    }],\n    or: {\n      sid: \"tzjs05\"\n    }\n  });\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n      fn: ({\n        page,\n        progress\n      }, answer) => (answer?.answer as SingleChoiceAnswer).value !== null && (answer?.answer as SingleChoiceAnswer).value !== '' && (answer?.answer as SingleChoiceAnswer).value !== undefined && progress < 100 ? page + 1 : page,\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"ugleec\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        if (form.answers && form.answers.length > 0 && 'value' in form.answers[currentPage].answer) {\n          if (!form.answers[currentPage].answer.value) return null;\n          return form.answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"vbdvmk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => {\n        const currentPage = (isNumber(pages) ? pages : page) - 1;\n        if (!answers[currentPage]?.answer) return null;\n        if (answers && answers[currentPage].answer && isArray(answers[currentPage].answer)) {\n          return answers[currentPage].answer as unknown as MultiChoiceAnswer;\n        }\n        if (answers && answers.length > 0 && answers[currentPage].isSingle) {\n          return answers[currentPage].answer as unknown as SingleChoiceAnswer;\n        }\n        if (answers && answers.length > 0 && 'value' in answers[currentPage].answer) {\n          return answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"etojfu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: page => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"fvmcdr\"\n    }\n  });\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => Number((answers.length / (questions?.length ?? 0) * 100).toFixed(0)),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"gc466l\"\n    }\n  });\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});",
      "start": 1746125696253,
      "end": 1746125696259,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createEvent",
          "createStore",
          "restore",
          "sample",
          "createGate",
          "isArray",
          "isNumber",
          "delay",
          "atom",
          "getQuestionsQuery",
          "QuestionsResponse",
          "Answers",
          "MultiChoiceAnswer",
          "PreparedAnswer",
          "ScaleChoiceAnswer",
          "SingleChoiceAnswer",
          "TestModel",
          "TestGate",
          "and",
          "or",
          "name",
          "sid",
          "formReset",
          "setSplashScreenVisibility",
          "$scaleForm",
          "answers",
          "reset",
          "$currentPage",
          "$currentProgress",
          "$currentQuestion",
          "$currentValue",
          "$isSplashScreenVisible",
          "directionChanged",
          "$direction",
          "on",
          "_",
          "dir",
          "formPageChanged",
          "scaleFormFieldChanged",
          "delayedFormFieldChanged",
          "_withFactory",
          "\"-2r18pr\"",
          "fn",
          "\"delayedFormFieldChanged\"",
          "method",
          "\"delay\"",
          "$questions",
          "finished",
          "success",
          "map",
          "el",
          "result",
          "clock",
          "target",
          "open",
          "source",
          "page",
          "questions",
          "form",
          "field",
          "index",
          "progress",
          "direction",
          "filter",
          "params",
          "isMultiple",
          "answer",
          "value",
          "undefined",
          "isSingle",
          "currentPage",
          "length",
          "pages",
          "window",
          "scrollTo",
          "Number",
          "toFixed"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts"],
        "sourcesContent": [
          "import { createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isArray, isNumber } from 'lodash-es';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\n\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, MultiChoiceAnswer, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\n\nexport const TestModel = atom(() => {\n    const TestGate = createGate();\n\n    const formReset = createEvent();\n    const setSplashScreenVisibility = createEvent<boolean>();\n\n    const $scaleForm = createStore<Answers>({\n        answers: [],\n    }).reset(formReset);\n\n    const $currentPage = createStore(1).reset(formReset);\n    const $currentProgress = createStore(0).reset(formReset);\n    const $currentQuestion = createStore<QuestionsResponse | null>(null);\n    const $currentValue = createStore<PreparedAnswer['answer'] | null>(null).reset(formReset);\n    const $isSplashScreenVisible = createStore<boolean>(true);\n\n    const directionChanged = createEvent<'forward' | 'backward'>();\n    const $direction = createStore<'forward' | 'backward'>('forward').on(directionChanged, (_, dir) => dir);\n\n    const formPageChanged = createEvent<number>();\n    const scaleFormFieldChanged = createEvent<PreparedAnswer>();\n    const delayedFormFieldChanged = delay(scaleFormFieldChanged, 250);\n\n    const $questions = restore(\n        getQuestionsQuery.finished.success.map((el) => el.result),\n        []\n    );\n\n    sample({\n        clock: setSplashScreenVisibility,\n        target: $isSplashScreenVisible,\n    });\n\n    sample({\n        clock: [$currentPage, $questions, TestGate.open],\n        source: {\n            page: $currentPage,\n            questions: $questions,\n        },\n        fn: ({ page, questions }) => {\n            if (!questions) return null;\n            return questions[page - 1];\n        },\n        target: $currentQuestion,\n    });\n\n    sample({\n        clock: scaleFormFieldChanged,\n        source: $scaleForm,\n        fn: (form, field) => {\n            form.answers[field.index] = field;\n            return { ...form };\n        },\n        target: $scaleForm,\n    });\n\n    sample({\n        clock: delayedFormFieldChanged,\n        source: { page: $currentPage, progress: $currentProgress, direction: $direction },\n        filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n        fn: ({ page, progress }, answer) =>\n            (answer?.answer as SingleChoiceAnswer).value !== null &&\n            (answer?.answer as SingleChoiceAnswer).value !== '' &&\n            (answer?.answer as SingleChoiceAnswer).value !== undefined &&\n            progress < 100\n                ? page + 1\n                : page,\n        target: formPageChanged,\n    });\n\n    sample({\n        clock: scaleFormFieldChanged,\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        filter: (_, field) => !(field.isMultiple || field.isSingle),\n        fn: ({ form, page }) => {\n            const currentPage = page - 1;\n\n            if (form.answers && form.answers.length > 0 && 'value' in form.answers[currentPage].answer) {\n                if (!form.answers[currentPage].answer.value) return null;\n                return form.answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n            }\n            return null;\n        },\n        target: $currentValue,\n    });\n\n    sample({\n        clock: [$scaleForm, formPageChanged],\n        source: {\n            form: $scaleForm,\n            page: $currentPage,\n        },\n        fn: ({ form: { answers }, page }, pages) => {\n            const currentPage = (isNumber(pages) ? pages : page) - 1;\n            if (!answers[currentPage]?.answer) return null;\n\n            if (answers && answers[currentPage].answer && isArray(answers[currentPage].answer)) {\n                return answers[currentPage].answer as unknown as MultiChoiceAnswer;\n            }\n\n            if (answers && answers.length > 0 && answers[currentPage].isSingle) {\n                return answers[currentPage].answer as unknown as SingleChoiceAnswer;\n            }\n\n            if (answers && answers.length > 0 && 'value' in answers[currentPage].answer) {\n                return answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n            }\n\n            return null;\n        },\n        target: $currentValue,\n    });\n\n    sample({\n        clock: formPageChanged,\n        fn: (page) => {\n            window.scrollTo(0, 0);\n            return page;\n        },\n        target: $currentPage,\n    });\n\n    sample({\n        clock: $scaleForm,\n        source: { questions: $questions, form: $scaleForm },\n        fn: ({ questions, form: { answers } }) =>\n            Number(((answers.length / (questions?.length ?? 0)) * 100).toFixed(0)),\n        target: $currentProgress,\n    });\n\n    return {\n        setSplashScreenVisibility,\n        $scaleForm,\n        $currentPage,\n        $currentProgress,\n        formReset,\n        $currentQuestion,\n        formPageChanged,\n        $currentValue,\n        directionChanged,\n        $isSplashScreenVisible,\n        scaleFormFieldChanged,\n        $questions,\n        TestGate,\n    };\n});\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, restore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { isArray, isNumber } from \"lodash-es\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { getQuestionsQuery } from \"../api\";\nexport const TestModel = atom(() => {\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-wt420q\"\n    }\n  });\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-k1fvfv\"\n  });\n  const setSplashScreenVisibility = createEvent({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-mx1025\"\n  });\n  const $scaleForm = createStore({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"sjuosy\"\n  }).reset(formReset);\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"-dgs7ab\"\n  }).reset(formReset);\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"vou922\"\n  }).reset(formReset);\n  const $currentQuestion = createStore(null, {\n    name: \"$currentQuestion\",\n    sid: \"-9cy4ww\"\n  });\n  const $currentValue = createStore(null, {\n    name: \"$currentValue\",\n    sid: \"-9t5y7z\"\n  }).reset(formReset);\n  const $isSplashScreenVisible = createStore(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"-cltbyr\"\n  });\n  const directionChanged = createEvent({\n    name: \"directionChanged\",\n    sid: \"-adt0n2\"\n  });\n  const $direction = createStore(\"forward\", {\n    name: \"$direction\",\n    sid: \"-bvoxkv\"\n  }).on(directionChanged, (_, dir) => dir);\n  const formPageChanged = createEvent({\n    name: \"formPageChanged\",\n    sid: \"cofsjj\"\n  });\n  const scaleFormFieldChanged = createEvent({\n    name: \"scaleFormFieldChanged\",\n    sid: \"rb4ee4\"\n  });\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-2r18pr\",\n    fn: () => delay(scaleFormFieldChanged, 250),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n  const $questions = restore(getQuestionsQuery.finished.success.map((el) => el.result), [], {\n    name: \"$questions\",\n    sid: \"-vzudvs\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: $isSplashScreenVisible\n    }],\n    or: {\n      sid: \"te3sv2\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"tgurtv\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: $scaleForm,\n      fn: (form, field) => {\n        form.answers[field.index] = field;\n        return {\n          ...form\n        };\n      },\n      target: $scaleForm\n    }],\n    or: {\n      sid: \"tzjs05\"\n    }\n  });\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === \"forward\",\n      fn: ({\n        page,\n        progress\n      }, answer) => (answer?.answer).value !== null && (answer?.answer).value !== \"\" && (answer?.answer).value !== void 0 && progress < 100 ? page + 1 : page,\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"ugleec\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        if (form.answers && form.answers.length > 0 && \"value\" in form.answers[currentPage].answer) {\n          if (!form.answers[currentPage].answer.value) return null;\n          return form.answers[currentPage].answer.value;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"vbdvmk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => {\n        const currentPage = (isNumber(pages) ? pages : page) - 1;\n        if (!answers[currentPage]?.answer) return null;\n        if (answers && answers[currentPage].answer && isArray(answers[currentPage].answer)) {\n          return answers[currentPage].answer;\n        }\n        if (answers && answers.length > 0 && answers[currentPage].isSingle) {\n          return answers[currentPage].answer;\n        }\n        if (answers && answers.length > 0 && \"value\" in answers[currentPage].answer) {\n          return answers[currentPage].answer.value;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"etojfu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: (page) => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"fvmcdr\"\n    }\n  });\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => Number((answers.length / (questions?.length ?? 0) * 100).toFixed(0)),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"gc466l\"\n    }\n  });\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});\n",
      "start": 1746125696259,
      "end": 1746125696443,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/model/index.ts"],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, restore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { isArray, isNumber } from 'lodash-es';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { getQuestionsQuery } from '../api';\nimport type { QuestionsResponse } from '../api/dto';\nimport type { Answers, MultiChoiceAnswer, PreparedAnswer, ScaleChoiceAnswer, SingleChoiceAnswer } from '../api/types';\nexport const TestModel = atom(() => {\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-wt420q\"\n    }\n  });\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-k1fvfv\"\n  });\n  const setSplashScreenVisibility = createEvent<boolean>({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-mx1025\"\n  });\n  const $scaleForm = createStore<Answers>({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"sjuosy\"\n  }).reset(formReset);\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"-dgs7ab\"\n  }).reset(formReset);\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"vou922\"\n  }).reset(formReset);\n  const $currentQuestion = createStore<QuestionsResponse | null>(null, {\n    name: \"$currentQuestion\",\n    sid: \"-9cy4ww\"\n  });\n  const $currentValue = createStore<PreparedAnswer['answer'] | null>(null, {\n    name: \"$currentValue\",\n    sid: \"-9t5y7z\"\n  }).reset(formReset);\n  const $isSplashScreenVisible = createStore<boolean>(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"-cltbyr\"\n  });\n  const directionChanged = createEvent<'forward' | 'backward'>({\n    name: \"directionChanged\",\n    sid: \"-adt0n2\"\n  });\n  const $direction = createStore<'forward' | 'backward'>('forward', {\n    name: \"$direction\",\n    sid: \"-bvoxkv\"\n  }).on(directionChanged, (_, dir) => dir);\n  const formPageChanged = createEvent<number>({\n    name: \"formPageChanged\",\n    sid: \"cofsjj\"\n  });\n  const scaleFormFieldChanged = createEvent<PreparedAnswer>({\n    name: \"scaleFormFieldChanged\",\n    sid: \"rb4ee4\"\n  });\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-2r18pr\",\n    fn: () => delay(scaleFormFieldChanged, 250),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n  const $questions = restore(getQuestionsQuery.finished.success.map(el => el.result), [], {\n    name: \"$questions\",\n    sid: \"-vzudvs\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: $isSplashScreenVisible\n    }],\n    or: {\n      sid: \"te3sv2\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"tgurtv\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: $scaleForm,\n      fn: (form, field) => {\n        form.answers[field.index] = field;\n        return {\n          ...form\n        };\n      },\n      target: $scaleForm\n    }],\n    or: {\n      sid: \"tzjs05\"\n    }\n  });\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === 'forward',\n      fn: ({\n        page,\n        progress\n      }, answer) => (answer?.answer as SingleChoiceAnswer).value !== null && (answer?.answer as SingleChoiceAnswer).value !== '' && (answer?.answer as SingleChoiceAnswer).value !== undefined && progress < 100 ? page + 1 : page,\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"ugleec\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        if (form.answers && form.answers.length > 0 && 'value' in form.answers[currentPage].answer) {\n          if (!form.answers[currentPage].answer.value) return null;\n          return form.answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"vbdvmk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => {\n        const currentPage = (isNumber(pages) ? pages : page) - 1;\n        if (!answers[currentPage]?.answer) return null;\n        if (answers && answers[currentPage].answer && isArray(answers[currentPage].answer)) {\n          return answers[currentPage].answer as unknown as MultiChoiceAnswer;\n        }\n        if (answers && answers.length > 0 && answers[currentPage].isSingle) {\n          return answers[currentPage].answer as unknown as SingleChoiceAnswer;\n        }\n        if (answers && answers.length > 0 && 'value' in answers[currentPage].answer) {\n          return answers[currentPage].answer.value as unknown as ScaleChoiceAnswer;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"etojfu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: page => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"fvmcdr\"\n    }\n  });\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => Number((answers.length / (questions?.length ?? 0) * 100).toFixed(0)),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"gc466l\"\n    }\n  });\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Test/model/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createEvent, createStore, restore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { isArray, isNumber } from \"lodash-es\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { getQuestionsQuery } from \"../api\";\nexport const TestModel = atom(() => {\n  const TestGate = createGate({\n    and: [],\n    or: {\n      name: \"TestGate\",\n      sid: \"-wt420q\"\n    }\n  });\n  const formReset = createEvent({\n    name: \"formReset\",\n    sid: \"-k1fvfv\"\n  });\n  const setSplashScreenVisibility = createEvent({\n    name: \"setSplashScreenVisibility\",\n    sid: \"-mx1025\"\n  });\n  const $scaleForm = createStore({\n    answers: []\n  }, {\n    name: \"$scaleForm\",\n    sid: \"sjuosy\"\n  }).reset(formReset);\n  const $currentPage = createStore(1, {\n    name: \"$currentPage\",\n    sid: \"-dgs7ab\"\n  }).reset(formReset);\n  const $currentProgress = createStore(0, {\n    name: \"$currentProgress\",\n    sid: \"vou922\"\n  }).reset(formReset);\n  const $currentQuestion = createStore(null, {\n    name: \"$currentQuestion\",\n    sid: \"-9cy4ww\"\n  });\n  const $currentValue = createStore(null, {\n    name: \"$currentValue\",\n    sid: \"-9t5y7z\"\n  }).reset(formReset);\n  const $isSplashScreenVisible = createStore(true, {\n    name: \"$isSplashScreenVisible\",\n    sid: \"-cltbyr\"\n  });\n  const directionChanged = createEvent({\n    name: \"directionChanged\",\n    sid: \"-adt0n2\"\n  });\n  const $direction = createStore(\"forward\", {\n    name: \"$direction\",\n    sid: \"-bvoxkv\"\n  }).on(directionChanged, (_, dir) => dir);\n  const formPageChanged = createEvent({\n    name: \"formPageChanged\",\n    sid: \"cofsjj\"\n  });\n  const scaleFormFieldChanged = createEvent({\n    name: \"scaleFormFieldChanged\",\n    sid: \"rb4ee4\"\n  });\n  const delayedFormFieldChanged = _withFactory({\n    sid: \"-2r18pr\",\n    fn: () => delay(scaleFormFieldChanged, 250),\n    name: \"delayedFormFieldChanged\",\n    method: \"delay\"\n  });\n  const $questions = restore(getQuestionsQuery.finished.success.map((el) => el.result), [], {\n    name: \"$questions\",\n    sid: \"-vzudvs\"\n  });\n  sample({\n    and: [{\n      clock: setSplashScreenVisibility,\n      target: $isSplashScreenVisible\n    }],\n    or: {\n      sid: \"te3sv2\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$currentPage, $questions, TestGate.open],\n      source: {\n        page: $currentPage,\n        questions: $questions\n      },\n      fn: ({\n        page,\n        questions\n      }) => {\n        if (!questions) return null;\n        return questions[page - 1];\n      },\n      target: $currentQuestion\n    }],\n    or: {\n      sid: \"tgurtv\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: $scaleForm,\n      fn: (form, field) => {\n        form.answers[field.index] = field;\n        return {\n          ...form\n        };\n      },\n      target: $scaleForm\n    }],\n    or: {\n      sid: \"tzjs05\"\n    }\n  });\n  sample({\n    and: [{\n      clock: delayedFormFieldChanged,\n      source: {\n        page: $currentPage,\n        progress: $currentProgress,\n        direction: $direction\n      },\n      filter: (params, field) => !field.isMultiple && params.direction === \"forward\",\n      fn: ({\n        page,\n        progress\n      }, answer) => (answer?.answer).value !== null && (answer?.answer).value !== \"\" && (answer?.answer).value !== void 0 && progress < 100 ? page + 1 : page,\n      target: formPageChanged\n    }],\n    or: {\n      sid: \"ugleec\"\n    }\n  });\n  sample({\n    and: [{\n      clock: scaleFormFieldChanged,\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      filter: (_, field) => !(field.isMultiple || field.isSingle),\n      fn: ({\n        form,\n        page\n      }) => {\n        const currentPage = page - 1;\n        if (form.answers && form.answers.length > 0 && \"value\" in form.answers[currentPage].answer) {\n          if (!form.answers[currentPage].answer.value) return null;\n          return form.answers[currentPage].answer.value;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"vbdvmk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: [$scaleForm, formPageChanged],\n      source: {\n        form: $scaleForm,\n        page: $currentPage\n      },\n      fn: ({\n        form: {\n          answers\n        },\n        page\n      }, pages) => {\n        const currentPage = (isNumber(pages) ? pages : page) - 1;\n        if (!answers[currentPage]?.answer) return null;\n        if (answers && answers[currentPage].answer && isArray(answers[currentPage].answer)) {\n          return answers[currentPage].answer;\n        }\n        if (answers && answers.length > 0 && answers[currentPage].isSingle) {\n          return answers[currentPage].answer;\n        }\n        if (answers && answers.length > 0 && \"value\" in answers[currentPage].answer) {\n          return answers[currentPage].answer.value;\n        }\n        return null;\n      },\n      target: $currentValue\n    }],\n    or: {\n      sid: \"etojfu\"\n    }\n  });\n  sample({\n    and: [{\n      clock: formPageChanged,\n      fn: (page) => {\n        window.scrollTo(0, 0);\n        return page;\n      },\n      target: $currentPage\n    }],\n    or: {\n      sid: \"fvmcdr\"\n    }\n  });\n  sample({\n    and: [{\n      clock: $scaleForm,\n      source: {\n        questions: $questions,\n        form: $scaleForm\n      },\n      fn: ({\n        questions,\n        form: {\n          answers\n        }\n      }) => Number((answers.length / (questions?.length ?? 0) * 100).toFixed(0)),\n      target: $currentProgress\n    }],\n    or: {\n      sid: \"gc466l\"\n    }\n  });\n  return {\n    setSplashScreenVisibility,\n    $scaleForm,\n    $currentPage,\n    $currentProgress,\n    formReset,\n    $currentQuestion,\n    formPageChanged,\n    $currentValue,\n    directionChanged,\n    $isSplashScreenVisible,\n    scaleFormFieldChanged,\n    $questions,\n    TestGate\n  };\n});\n",
      "start": 1746125696443,
      "end": 1746125696443,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Test/model/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACphC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CA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AAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACppG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtrF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;"
      }
    }
  ]
}
