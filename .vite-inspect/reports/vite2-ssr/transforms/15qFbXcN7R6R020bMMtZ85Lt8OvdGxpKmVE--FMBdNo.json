{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/FreeReportNavigation/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { useScrollSpy } from '@mantine/hooks';\nimport { useStoreMap, useUnit } from 'effector-react';\n\nimport {\n    convertFromUrlId,\n    convertToUrlId,\n    getFreeResultQuery,\n    ReportModel,\n    ReportNavigationTemplate,\n    TYPE_TO_COLOR_MAP,\n} from '@/entities/Report';\n\nexport const FreeReportNavigation = () => {\n    const [page, onPageChange] = useUnit([ReportModel.$currentContentPage, ReportModel.currentPageChanged]);\n    const content = useStoreMap({\n        store: getFreeResultQuery.$data,\n        keys: ['title', page],\n        fn: (content) => content?.content?.map(({ title }) => title),\n    });\n\n    const spy = useScrollSpy({\n        selector: `:is(${content?.map((title) => `#${convertToUrlId(title)}`).join(', ')})`,\n    });\n\n    const activeMenu = convertFromUrlId(spy.data?.[spy.active]?.id) ?? content?.[page];\n\n    const mbti = useUnit(getFreeResultQuery.$data.map((el) => el?.mbti_type));\n    const color = TYPE_TO_COLOR_MAP[mbti ?? ''];\n\n    if (!content) return;\n\n    return (\n        <ReportNavigationTemplate activeMenu={activeMenu} color={color} content={content} onPageChange={onPageChange} />\n    );\n};\n",
      "start": 1750278466947,
      "end": 1750278466988,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { useScrollSpy } from '@mantine/hooks';\nimport { useStoreMap, useUnit } from 'effector-react';\nimport { convertFromUrlId, convertToUrlId, getFreeResultQuery, ReportModel, ReportNavigationTemplate, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nexport const FreeReportNavigation = () => {\n  const [page, onPageChange] = useUnit([ReportModel.$currentContentPage, ReportModel.currentPageChanged]);\n  const content = useStoreMap({\n    store: getFreeResultQuery.$data,\n    keys: ['title', page],\n    fn: content => content?.content?.map(({\n      title\n    }) => title)\n  });\n  const spy = useScrollSpy({\n    selector: `:is(${content?.map(title => `#${convertToUrlId(title)}`).join(', ')})`\n  });\n  const activeMenu = convertFromUrlId(spy.data?.[spy.active]?.id) ?? content?.[page];\n  const mbti = useUnit(getFreeResultQuery.$data.map(el => el?.mbti_type));\n  const color = TYPE_TO_COLOR_MAP[mbti ?? ''];\n  if (!content) return;\n  return <ReportNavigationTemplate activeMenu={activeMenu} color={color} content={content} onPageChange={onPageChange} />;\n};",
      "start": 1750278466988,
      "end": 1750278466990,
      "order": "pre-normal",
      "sourcemaps": {
        "version": 3,
        "names": [
          "useScrollSpy",
          "useStoreMap",
          "useUnit",
          "convertFromUrlId",
          "convertToUrlId",
          "getFreeResultQuery",
          "ReportModel",
          "ReportNavigationTemplate",
          "TYPE_TO_COLOR_MAP",
          "FreeReportNavigation",
          "page",
          "onPageChange",
          "$currentContentPage",
          "currentPageChanged",
          "content",
          "store",
          "$data",
          "keys",
          "fn",
          "map",
          "title",
          "spy",
          "selector",
          "join",
          "activeMenu",
          "data",
          "active",
          "id",
          "mbti",
          "el",
          "mbti_type",
          "color"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/FreeReportNavigation/index.tsx"],
        "sourcesContent": [
          "import { useScrollSpy } from '@mantine/hooks';\nimport { useStoreMap, useUnit } from 'effector-react';\n\nimport {\n    convertFromUrlId,\n    convertToUrlId,\n    getFreeResultQuery,\n    ReportModel,\n    ReportNavigationTemplate,\n    TYPE_TO_COLOR_MAP,\n} from '@/entities/Report';\n\nexport const FreeReportNavigation = () => {\n    const [page, onPageChange] = useUnit([ReportModel.$currentContentPage, ReportModel.currentPageChanged]);\n    const content = useStoreMap({\n        store: getFreeResultQuery.$data,\n        keys: ['title', page],\n        fn: (content) => content?.content?.map(({ title }) => title),\n    });\n\n    const spy = useScrollSpy({\n        selector: `:is(${content?.map((title) => `#${convertToUrlId(title)}`).join(', ')})`,\n    });\n\n    const activeMenu = convertFromUrlId(spy.data?.[spy.active]?.id) ?? content?.[page];\n\n    const mbti = useUnit(getFreeResultQuery.$data.map((el) => el?.mbti_type));\n    const color = TYPE_TO_COLOR_MAP[mbti ?? ''];\n\n    if (!content) return;\n\n    return (\n        <ReportNavigationTemplate activeMenu={activeMenu} color={color} content={content} onPageChange={onPageChange} />\n    );\n};\n"
        ],
        "mappings": "AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,WAAW,EAAEC,OAAO,QAAQ,gBAAgB;AAErD,SACIC,gBAAgB,EAChBC,cAAc,EACdC,kBAAkB,EAClBC,WAAW,EACXC,wBAAwB,EACxBC,iBAAiB,QACd,mBAAmB;AAE1B,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACtC,MAAM,CAACC,IAAI,EAAEC,YAAY,CAAC,GAAGT,OAAO,CAAC,CAACI,WAAW,CAACM,mBAAmB,EAAEN,WAAW,CAACO,kBAAkB,CAAC,CAAC;EACvG,MAAMC,OAAO,GAAGb,WAAW,CAAC;IACxBc,KAAK,EAAEV,kBAAkB,CAACW,KAAK;IAC/BC,IAAI,EAAE,CAAC,OAAO,EAAEP,IAAI,CAAC;IACrBQ,EAAE,EAAGJ,OAAO,IAAKA,OAAO,EAAEA,OAAO,EAAEK,GAAG,CAAC,CAAC;MAAEC;IAAM,CAAC,KAAKA,KAAK;EAC/D,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAGrB,YAAY,CAAC;IACrBsB,QAAQ,EAAE,OAAOR,OAAO,EAAEK,GAAG,CAAEC,KAAK,IAAK,IAAIhB,cAAc,CAACgB,KAAK,CAAC,EAAE,CAAC,CAACG,IAAI,CAAC,IAAI,CAAC;EACpF,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAGrB,gBAAgB,CAACkB,GAAG,CAACI,IAAI,GAAGJ,GAAG,CAACK,MAAM,CAAC,EAAEC,EAAE,CAAC,IAAIb,OAAO,GAAGJ,IAAI,CAAC;EAElF,MAAMkB,IAAI,GAAG1B,OAAO,CAACG,kBAAkB,CAACW,KAAK,CAACG,GAAG,CAAEU,EAAE,IAAKA,EAAE,EAAEC,SAAS,CAAC,CAAC;EACzE,MAAMC,KAAK,GAAGvB,iBAAiB,CAACoB,IAAI,IAAI,EAAE,CAAC;EAE3C,IAAI,CAACd,OAAO,EAAE;EAEd,OACI,CAAC,wBAAwB,CAAC,UAAU,CAAC,CAACU,UAAU,CAAC,CAAC,KAAK,CAAC,CAACO,KAAK,CAAC,CAAC,OAAO,CAAC,CAACjB,OAAO,CAAC,CAAC,YAAY,CAAC,CAACH,YAAY,CAAC,GAAG;AAExH,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx } from \"react/jsx-runtime\";\nimport { useScrollSpy } from \"@mantine/hooks\";\nimport { useStoreMap, useUnit } from \"effector-react\";\nimport { convertFromUrlId, convertToUrlId, getFreeResultQuery, ReportModel, ReportNavigationTemplate, TYPE_TO_COLOR_MAP } from \"@/entities/Report\";\nexport const FreeReportNavigation = () => {\n  const [page, onPageChange] = useUnit([ReportModel.$currentContentPage, ReportModel.currentPageChanged]);\n  const content = useStoreMap({\n    store: getFreeResultQuery.$data,\n    keys: [\"title\", page],\n    fn: (content2) => content2?.content?.map(({\n      title\n    }) => title)\n  });\n  const spy = useScrollSpy({\n    selector: `:is(${content?.map((title) => `#${convertToUrlId(title)}`).join(\", \")})`\n  });\n  const activeMenu = convertFromUrlId(spy.data?.[spy.active]?.id) ?? content?.[page];\n  const mbti = useUnit(getFreeResultQuery.$data.map((el) => el?.mbti_type));\n  const color = TYPE_TO_COLOR_MAP[mbti ?? \"\"];\n  if (!content) return;\n  return /* @__PURE__ */ jsx(ReportNavigationTemplate, { activeMenu, color, content, onPageChange });\n};\n",
      "start": 1750278466990,
      "end": 1750278467133,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/FreeReportNavigation/index.tsx"],
        "sourcesContent": [
          "import { useScrollSpy } from '@mantine/hooks';\nimport { useStoreMap, useUnit } from 'effector-react';\nimport { convertFromUrlId, convertToUrlId, getFreeResultQuery, ReportModel, ReportNavigationTemplate, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nexport const FreeReportNavigation = () => {\n  const [page, onPageChange] = useUnit([ReportModel.$currentContentPage, ReportModel.currentPageChanged]);\n  const content = useStoreMap({\n    store: getFreeResultQuery.$data,\n    keys: ['title', page],\n    fn: content => content?.content?.map(({\n      title\n    }) => title)\n  });\n  const spy = useScrollSpy({\n    selector: `:is(${content?.map(title => `#${convertToUrlId(title)}`).join(', ')})`\n  });\n  const activeMenu = convertFromUrlId(spy.data?.[spy.active]?.id) ?? content?.[page];\n  const mbti = useUnit(getFreeResultQuery.$data.map(el => el?.mbti_type));\n  const color = TYPE_TO_COLOR_MAP[mbti ?? ''];\n  if (!content) return;\n  return <ReportNavigationTemplate activeMenu={activeMenu} color={color} content={content} onPageChange={onPageChange} />;\n};"
        ],
        "mappings": "AAmBS;AAnBT,SAAS,oBAAoB;AAC7B,SAAS,aAAa,eAAe;AACrC,SAAS,kBAAkB,gBAAgB,oBAAoB,aAAa,0BAA0B,yBAAyB;AACxH,aAAM,uBAAuB,MAAM;AACxC,QAAM,CAAC,MAAM,YAAY,IAAI,QAAQ,CAAC,YAAY,qBAAqB,YAAY,kBAAkB,CAAC;AACtG,QAAM,UAAU,YAAY;AAAA,IAC1B,OAAO,mBAAmB;AAAA,IAC1B,MAAM,CAAC,SAAS,IAAI;AAAA,IACpB,IAAI,CAAAA,aAAWA,UAAS,SAAS,IAAI,CAAC;AAAA,MACpC;AAAA,IACF,MAAM,KAAK;AAAA,EACb,CAAC;AACD,QAAM,MAAM,aAAa;AAAA,IACvB,UAAU,OAAO,SAAS,IAAI,WAAS,IAAI,eAAe,KAAK,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC;AAAA,EAChF,CAAC;AACD,QAAM,aAAa,iBAAiB,IAAI,OAAO,IAAI,MAAM,GAAG,EAAE,KAAK,UAAU,IAAI;AACjF,QAAM,OAAO,QAAQ,mBAAmB,MAAM,IAAI,QAAM,IAAI,SAAS,CAAC;AACtE,QAAM,QAAQ,kBAAkB,QAAQ,EAAE;AAC1C,MAAI,CAAC,QAAS;AACd,SAAO,oBAAC,4BAAyB,YAAwB,OAAc,SAAkB,cAA4B;AACvH;",
        "names": ["content"]
      }
    },
    {
      "name": "vite:worker",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/widgets/FreeReportNavigation/index.tsx [vike:pluginModuleBanner] */\nimport { jsx } from \"react/jsx-runtime\";\nimport { useScrollSpy } from \"@mantine/hooks\";\nimport { useStoreMap, useUnit } from \"effector-react\";\nimport { convertFromUrlId, convertToUrlId, getFreeResultQuery, ReportModel, ReportNavigationTemplate, TYPE_TO_COLOR_MAP } from \"@/entities/Report\";\nexport const FreeReportNavigation = () => {\n  const [page, onPageChange] = useUnit([ReportModel.$currentContentPage, ReportModel.currentPageChanged]);\n  const content = useStoreMap({\n    store: getFreeResultQuery.$data,\n    keys: [\"title\", page],\n    fn: (content2) => content2?.content?.map(({\n      title\n    }) => title)\n  });\n  const spy = useScrollSpy({\n    selector: `:is(${content?.map((title) => `#${convertToUrlId(title)}`).join(\", \")})`\n  });\n  const activeMenu = convertFromUrlId(spy.data?.[spy.active]?.id) ?? content?.[page];\n  const mbti = useUnit(getFreeResultQuery.$data.map((el) => el?.mbti_type));\n  const color = TYPE_TO_COLOR_MAP[mbti ?? \"\"];\n  if (!content) return;\n  return /* @__PURE__ */ jsx(ReportNavigationTemplate, { activeMenu, color, content, onPageChange });\n};\n",
      "start": 1750278467133,
      "end": 1750278467133,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/widgets/FreeReportNavigation/index.tsx"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvrlzG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACftF,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACptB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpG,CAAC;"
      }
    }
  ]
}
