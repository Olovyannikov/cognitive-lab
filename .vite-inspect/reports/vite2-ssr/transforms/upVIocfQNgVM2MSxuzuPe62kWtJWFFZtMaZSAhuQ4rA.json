{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\n\nimport { atom } from '@/shared/factories';\n\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\nimport { normalizePersonalities } from '../lib';\n\nexport const PersonalitiesModel = atom(() => {\n    const PersonalitiesInitialGate = createGate();\n    const $personalitiesMap = createStore<Record<string, string>>({});\n\n    sample({\n        clock: PersonalitiesInitialGate.open,\n        target: getPersonalityTypesWithCategoriesQuery.start,\n    });\n\n    sample({\n        clock: getPersonalityTypesWithCategoriesQuery.$data,\n        fn: normalizePersonalities,\n        target: $personalitiesMap,\n    });\n\n    return {\n        $personalitiesMap,\n        PersonalitiesInitialGate,\n    };\n});\n",
      "start": 1750105187497,
      "end": 1750105187555,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { atom } from '@/shared/factories';\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\nimport { normalizePersonalities } from '../lib';\nexport const PersonalitiesModel = atom(() => {\n  const PersonalitiesInitialGate = createGate({\n    and: [],\n    or: {\n      name: \"PersonalitiesInitialGate\",\n      sid: \"-ny01mw\"\n    }\n  });\n  const $personalitiesMap = createStore<Record<string, string>>({}, {\n    name: \"$personalitiesMap\",\n    sid: \"uipdgv\"\n  });\n  sample({\n    and: [{\n      clock: PersonalitiesInitialGate.open,\n      target: getPersonalityTypesWithCategoriesQuery.start\n    }],\n    or: {\n      sid: \"ubjsnk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: getPersonalityTypesWithCategoriesQuery.$data,\n      fn: normalizePersonalities,\n      target: $personalitiesMap\n    }],\n    or: {\n      sid: \"uearmd\"\n    }\n  });\n  return {\n    $personalitiesMap,\n    PersonalitiesInitialGate\n  };\n});",
      "start": 1750105187555,
      "end": 1750105187556,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createStore",
          "sample",
          "createGate",
          "atom",
          "getPersonalityTypesWithCategoriesQuery",
          "normalizePersonalities",
          "PersonalitiesModel",
          "PersonalitiesInitialGate",
          "and",
          "or",
          "name",
          "sid",
          "$personalitiesMap",
          "Record",
          "clock",
          "open",
          "target",
          "start",
          "$data",
          "fn"
        ],
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/model/index.ts"
        ],
        "sourcesContent": [
          "import { createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\n\nimport { atom } from '@/shared/factories';\n\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\nimport { normalizePersonalities } from '../lib';\n\nexport const PersonalitiesModel = atom(() => {\n    const PersonalitiesInitialGate = createGate();\n    const $personalitiesMap = createStore<Record<string, string>>({});\n\n    sample({\n        clock: PersonalitiesInitialGate.open,\n        target: getPersonalityTypesWithCategoriesQuery.start,\n    });\n\n    sample({\n        clock: getPersonalityTypesWithCategoriesQuery.$data,\n        fn: normalizePersonalities,\n        target: $personalitiesMap,\n    });\n\n    return {\n        $personalitiesMap,\n        PersonalitiesInitialGate,\n    };\n});\n"
        ],
        "mappings": "AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,UAAU;AAC9C,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,SAASC,IAAI,QAAQ,oBAAoB;AAEzC,SAASC,sCAAsC,QAAQ,QAAQ;AAC/D,SAASC,sBAAsB,QAAQ,QAAQ;AAE/C,OAAO,MAAMC,kBAAkB,GAAGH,IAAI,CAAC,MAAM;EACzC,MAAMI,wBAAwB,GAAGL,UAAU;IAAAM,GAAA;IAAAC,EAAA;MAAAC,IAAA;MAAAC,GAAA;IAAA;EAAA,CAAC,CAAC;EAC7C,MAAMC,iBAAiB,GAAGZ,WAAW,CAACa,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAAAH,IAAA;IAAAC,GAAA;EAAA,EAAC;EAEjEV,MAAM;IAAAO,GAAA,GAAC;MACHM,KAAK,EAAEP,wBAAwB,CAACQ,IAAI;MACpCC,MAAM,EAAEZ,sCAAsC,CAACa;IACnD,CAAC;IAAAR,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;EAEFV,MAAM;IAAAO,GAAA,GAAC;MACHM,KAAK,EAAEV,sCAAsC,CAACc,KAAK;MACnDC,EAAE,EAAEd,sBAAsB;MAC1BW,MAAM,EAAEJ;IACZ,CAAC;IAAAH,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;EAEF,OAAO;IACHC,iBAAiB;IACjBL;EACJ,CAAC;AACL,CAAC,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { createStore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { atom } from \"@/shared/factories\";\nimport { getPersonalityTypesWithCategoriesQuery } from \"../api\";\nimport { normalizePersonalities } from \"../lib\";\nexport const PersonalitiesModel = atom(() => {\n  const PersonalitiesInitialGate = createGate({\n    and: [],\n    or: {\n      name: \"PersonalitiesInitialGate\",\n      sid: \"-ny01mw\"\n    }\n  });\n  const $personalitiesMap = createStore({}, {\n    name: \"$personalitiesMap\",\n    sid: \"uipdgv\"\n  });\n  sample({\n    and: [{\n      clock: PersonalitiesInitialGate.open,\n      target: getPersonalityTypesWithCategoriesQuery.start\n    }],\n    or: {\n      sid: \"ubjsnk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: getPersonalityTypesWithCategoriesQuery.$data,\n      fn: normalizePersonalities,\n      target: $personalitiesMap\n    }],\n    or: {\n      sid: \"uearmd\"\n    }\n  });\n  return {\n    $personalitiesMap,\n    PersonalitiesInitialGate\n  };\n});\n",
      "start": 1750105187556,
      "end": 1750105187670,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/model/index.ts"
        ],
        "sourcesContent": [
          "import { createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { atom } from '@/shared/factories';\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\nimport { normalizePersonalities } from '../lib';\nexport const PersonalitiesModel = atom(() => {\n  const PersonalitiesInitialGate = createGate({\n    and: [],\n    or: {\n      name: \"PersonalitiesInitialGate\",\n      sid: \"-ny01mw\"\n    }\n  });\n  const $personalitiesMap = createStore<Record<string, string>>({}, {\n    name: \"$personalitiesMap\",\n    sid: \"uipdgv\"\n  });\n  sample({\n    and: [{\n      clock: PersonalitiesInitialGate.open,\n      target: getPersonalityTypesWithCategoriesQuery.start\n    }],\n    or: {\n      sid: \"ubjsnk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: getPersonalityTypesWithCategoriesQuery.$data,\n      fn: normalizePersonalities,\n      target: $personalitiesMap\n    }],\n    or: {\n      sid: \"uearmd\"\n    }\n  });\n  return {\n    $personalitiesMap,\n    PersonalitiesInitialGate\n  };\n});"
        ],
        "mappings": "AAAA,SAAS,aAAa,cAAc;AACpC,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,8CAA8C;AACvD,SAAS,8BAA8B;AAChC,aAAM,qBAAqB,KAAK,MAAM;AAC3C,QAAM,2BAA2B,WAAW;AAAA,IAC1C,KAAK,CAAC;AAAA,IACN,IAAI;AAAA,MACF,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,QAAM,oBAAoB,YAAoC,CAAC,GAAG;AAAA,IAChE,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO,yBAAyB;AAAA,MAChC,QAAQ,uCAAuC;AAAA,IACjD,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO,uCAAuC;AAAA,MAC9C,IAAI;AAAA,MACJ,QAAQ;AAAA,IACV,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Personality/model/index.ts [vike:pluginModuleBanner] */\nimport { createStore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { atom } from \"@/shared/factories\";\nimport { getPersonalityTypesWithCategoriesQuery } from \"../api\";\nimport { normalizePersonalities } from \"../lib\";\nexport const PersonalitiesModel = atom(() => {\n  const PersonalitiesInitialGate = createGate({\n    and: [],\n    or: {\n      name: \"PersonalitiesInitialGate\",\n      sid: \"-ny01mw\"\n    }\n  });\n  const $personalitiesMap = createStore({}, {\n    name: \"$personalitiesMap\",\n    sid: \"uipdgv\"\n  });\n  sample({\n    and: [{\n      clock: PersonalitiesInitialGate.open,\n      target: getPersonalityTypesWithCategoriesQuery.start\n    }],\n    or: {\n      sid: \"ubjsnk\"\n    }\n  });\n  sample({\n    and: [{\n      clock: getPersonalityTypesWithCategoriesQuery.$data,\n      fn: normalizePersonalities,\n      target: $personalitiesMap\n    }],\n    or: {\n      sid: \"uearmd\"\n    }\n  });\n  return {\n    $personalitiesMap,\n    PersonalitiesInitialGate\n  };\n});\n",
      "start": 1750105187670,
      "end": 1750105187670,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "src/entities/Personality/model/index.ts"
        ],
        "names": [],
        "mappings": "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"
      }
    }
  ]
}
