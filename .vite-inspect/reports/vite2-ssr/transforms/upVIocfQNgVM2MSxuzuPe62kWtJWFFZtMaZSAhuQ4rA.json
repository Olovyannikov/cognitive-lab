{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\n\nimport { atom } from '@/shared/factories';\n\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\nimport { normalizePersonalities } from '../lib';\n\nexport const PersonalitiesModel = atom(() => {\n    const PersonalitiesInitialGate = createGate();\n    const $personalitiesMap = createStore<Record<string, string>>({});\n\n    sample({\n        clock: PersonalitiesInitialGate.open,\n        target: getPersonalityTypesWithCategoriesQuery.start,\n    });\n\n    sample({\n        clock: getPersonalityTypesWithCategoriesQuery.$data,\n        fn: normalizePersonalities,\n        target: $personalitiesMap,\n    });\n\n    return {\n        $personalitiesMap,\n        PersonalitiesInitialGate,\n    };\n});\n",
      "start": 1750239308266,
      "end": 1750239308277,
      "sourcemaps": null
    },
    {
      "name": "vite:react-swc",
      "result": "import { withFactory as _effector$factory } from 'effector';\nimport { createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { atom } from '@/shared/factories';\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\nimport { normalizePersonalities } from '../lib';\nexport const PersonalitiesModel = _effector$factory({\n    sid: \"9e4vypa3\",\n    fn: ()=>atom(()=>{\n            const PersonalitiesInitialGate = createGate({\n                and: [],\n                or: {\n                    sid: \"ci6vurr8\"\n                }\n            });\n            const $personalitiesMap = createStore({}, {\n                sid: \"4vltlh1\"\n            });\n            sample({\n                and: [\n                    {\n                        clock: PersonalitiesInitialGate.open,\n                        target: getPersonalityTypesWithCategoriesQuery.start\n                    }\n                ],\n                or: {\n                    sid: \"8b4s2ojx\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: getPersonalityTypesWithCategoriesQuery.$data,\n                        fn: normalizePersonalities,\n                        target: $personalitiesMap\n                    }\n                ],\n                or: {\n                    sid: \"8pqo62wx\"\n                }\n            });\n            return {\n                $personalitiesMap,\n                PersonalitiesInitialGate\n            };\n        })\n});\n",
      "start": 1750239308277,
      "end": 1750239308282,
      "order": "pre",
      "sourcemaps": "{\"version\":3,\"sources\":[\"/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/model/index.ts\"],\"sourcesContent\":[\"import { createStore, sample } from 'effector';\\nimport { createGate } from 'effector-react';\\n\\nimport { atom } from '@/shared/factories';\\n\\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\\nimport { normalizePersonalities } from '../lib';\\n\\nexport const PersonalitiesModel = atom(() => {\\n    const PersonalitiesInitialGate = createGate();\\n    const $personalitiesMap = createStore<Record<string, string>>({});\\n\\n    sample({\\n        clock: PersonalitiesInitialGate.open,\\n        target: getPersonalityTypesWithCategoriesQuery.start,\\n    });\\n\\n    sample({\\n        clock: getPersonalityTypesWithCategoriesQuery.$data,\\n        fn: normalizePersonalities,\\n        target: $personalitiesMap,\\n    });\\n\\n    return {\\n        $personalitiesMap,\\n        PersonalitiesInitialGate,\\n    };\\n});\\n\"],\"names\":[\"createStore\",\"sample\",\"createGate\",\"atom\",\"getPersonalityTypesWithCategoriesQuery\",\"normalizePersonalities\",\"PersonalitiesModel\",\"PersonalitiesInitialGate\",\"$personalitiesMap\",\"clock\",\"open\",\"target\",\"start\",\"$data\",\"fn\"],\"mappings\":\";AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,WAAW;AAC/C,SAASC,UAAU,QAAQ,iBAAiB;AAE5C,SAASC,IAAI,QAAQ,qBAAqB;AAE1C,SAASC,sCAAsC,QAAQ,SAAS;AAChE,SAASC,sBAAsB,QAAQ,SAAS;AAEhD,OAAO,MAAMC;;YAAqBH,KAAK;YACnC,MAAMI,2BAA2BL;;;;;;YACjC,MAAMM,oBAAoBR,YAAoC,CAAC;;;YAE/DC;;oBAAO;wBACHQ,OAAOF,yBAAyBG,IAAI;wBACpCC,QAAQP,uCAAuCQ,KAAK;oBACxD;;;;;;YAEAX;;oBAAO;wBACHQ,OAAOL,uCAAuCS,KAAK;wBACnDC,IAAIT;wBACJM,QAAQH;oBACZ;;;;;;YAEA,OAAO;gBACHA;gBACAD;YACJ;QACJ;GAAG\"}"
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _effector$factory } from \"effector\";\nimport { createStore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { atom } from \"@/shared/factories\";\nimport { getPersonalityTypesWithCategoriesQuery } from \"../api\";\nimport { normalizePersonalities } from \"../lib\";\nexport const PersonalitiesModel = _effector$factory({\n  sid: \"9e4vypa3\",\n  fn: () => atom(() => {\n    const PersonalitiesInitialGate = createGate({\n      and: [],\n      or: {\n        sid: \"ci6vurr8\"\n      }\n    });\n    const $personalitiesMap = createStore({}, {\n      sid: \"4vltlh1\"\n    });\n    sample({\n      and: [\n        {\n          clock: PersonalitiesInitialGate.open,\n          target: getPersonalityTypesWithCategoriesQuery.start\n        }\n      ],\n      or: {\n        sid: \"8b4s2ojx\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: getPersonalityTypesWithCategoriesQuery.$data,\n          fn: normalizePersonalities,\n          target: $personalitiesMap\n        }\n      ],\n      or: {\n        sid: \"8pqo62wx\"\n      }\n    });\n    return {\n      $personalitiesMap,\n      PersonalitiesInitialGate\n    };\n  })\n});\n",
      "start": 1750239308282,
      "end": 1750239308322,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/model/index.ts"],
        "sourcesContent": [
          "import { withFactory as _effector$factory } from 'effector';\nimport { createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { atom } from '@/shared/factories';\nimport { getPersonalityTypesWithCategoriesQuery } from '../api';\nimport { normalizePersonalities } from '../lib';\nexport const PersonalitiesModel = _effector$factory({\n    sid: \"9e4vypa3\",\n    fn: ()=>atom(()=>{\n            const PersonalitiesInitialGate = createGate({\n                and: [],\n                or: {\n                    sid: \"ci6vurr8\"\n                }\n            });\n            const $personalitiesMap = createStore({}, {\n                sid: \"4vltlh1\"\n            });\n            sample({\n                and: [\n                    {\n                        clock: PersonalitiesInitialGate.open,\n                        target: getPersonalityTypesWithCategoriesQuery.start\n                    }\n                ],\n                or: {\n                    sid: \"8b4s2ojx\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: getPersonalityTypesWithCategoriesQuery.$data,\n                        fn: normalizePersonalities,\n                        target: $personalitiesMap\n                    }\n                ],\n                or: {\n                    sid: \"8pqo62wx\"\n                }\n            });\n            return {\n                $personalitiesMap,\n                PersonalitiesInitialGate\n            };\n        })\n});\n"
        ],
        "mappings": "AAAA,SAAS,eAAe,yBAAyB;AACjD,SAAS,aAAa,cAAc;AACpC,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,8CAA8C;AACvD,SAAS,8BAA8B;AAChC,aAAM,qBAAqB,kBAAkB;AAAA,EAChD,KAAK;AAAA,EACL,IAAI,MAAI,KAAK,MAAI;AACT,UAAM,2BAA2B,WAAW;AAAA,MACxC,KAAK,CAAC;AAAA,MACN,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,UAAM,oBAAoB,YAAY,CAAC,GAAG;AAAA,MACtC,KAAK;AAAA,IACT,CAAC;AACD,WAAO;AAAA,MACH,KAAK;AAAA,QACD;AAAA,UACI,OAAO,yBAAyB;AAAA,UAChC,QAAQ,uCAAuC;AAAA,QACnD;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH,KAAK;AAAA,QACD;AAAA,UACI,OAAO,uCAAuC;AAAA,UAC9C,IAAI;AAAA,UACJ,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ,CAAC;AACT,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750239308322,
      "end": 1750239308322,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750239308322,
      "end": 1750239308323,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750239308323,
      "end": 1750239308323,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750239308323,
      "end": 1750239308323,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Personality/model/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _effector$factory } from \"effector\";\nimport { createStore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { atom } from \"@/shared/factories\";\nimport { getPersonalityTypesWithCategoriesQuery } from \"../api\";\nimport { normalizePersonalities } from \"../lib\";\nexport const PersonalitiesModel = _effector$factory({\n  sid: \"9e4vypa3\",\n  fn: () => atom(() => {\n    const PersonalitiesInitialGate = createGate({\n      and: [],\n      or: {\n        sid: \"ci6vurr8\"\n      }\n    });\n    const $personalitiesMap = createStore({}, {\n      sid: \"4vltlh1\"\n    });\n    sample({\n      and: [\n        {\n          clock: PersonalitiesInitialGate.open,\n          target: getPersonalityTypesWithCategoriesQuery.start\n        }\n      ],\n      or: {\n        sid: \"8b4s2ojx\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: getPersonalityTypesWithCategoriesQuery.$data,\n          fn: normalizePersonalities,\n          target: $personalitiesMap\n        }\n      ],\n      or: {\n        sid: \"8pqo62wx\"\n      }\n    });\n    return {\n      $personalitiesMap,\n      PersonalitiesInitialGate\n    };\n  })\n});\n",
      "start": 1750239308323,
      "end": 1750239308323,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Personality/model/index.ts"],
        "names": [],
        "mappingszpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC;"
      }
    }
  ]
}
