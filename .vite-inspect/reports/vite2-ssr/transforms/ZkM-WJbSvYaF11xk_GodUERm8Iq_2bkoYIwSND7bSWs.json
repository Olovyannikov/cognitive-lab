{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/HelpForm/api/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createQuery } from '@farfetched/core';\n\nimport { API, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { SendIssueRequest } from './dto';\n\nexport const sendIssueMutation = createQuery({\n    effect: createInternalRequestFx<SendIssueRequest, { id: string }>((body) => ({\n        url: API.support.issues,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n",
      "start": 1750275034082,
      "end": 1750275034106,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createQuery } from '@farfetched/core';\nimport { API, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { SendIssueRequest } from './dto';\nexport const sendIssueMutation = _withFactory({\n  sid: \"-y6so3x\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx<SendIssueRequest, {\n      id: string;\n    }>(body => ({\n      url: API.support.issues,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"sendIssueMutation\",\n  method: \"createQuery\"\n});",
      "start": 1750275034106,
      "end": 1750275034108,
      "order": "pre-normal",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createQuery",
          "API",
          "createInternalRequestFx",
          "HTTP_METHODS",
          "SendIssueRequest",
          "sendIssueMutation",
          "_withFactory",
          "sid",
          "\"-y6so3x\"",
          "fn",
          "effect",
          "id",
          "body",
          "url",
          "support",
          "issues",
          "method",
          "POST",
          "name",
          "\"sendIssueMutation\"",
          "\"createQuery\""
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/HelpForm/api/index.ts"],
        "sourcesContent": [
          "import { createQuery } from '@farfetched/core';\n\nimport { API, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { SendIssueRequest } from './dto';\n\nexport const sendIssueMutation = createQuery({\n    effect: createInternalRequestFx<SendIssueRequest, { id: string }>((body) => ({\n        url: API.support.issues,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n"
        ],
        "mappings": ";AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SAASC,GAAG,EAAEC,uBAAuB,EAAEC,YAAY,QAAQ,cAAc;AAEzE,cAAcC,gBAAgB,QAAQ,OAAO;AAE7C,OAAO,MAAMC,iBAAiB,GAAAC,YAAA;EAAAC,GAAA,EAAAC,SAAA;EAAAC,EAAA,EAAAA,CAAA,KAAGT,WAAW,CAAC;IACzCU,MAAM,EAAER,uBAAuB,CAACE,gBAAgB,EAAE;MAAEO,EAAE,EAAE,MAAM;IAAC,CAAC,CAAC,CAAEC,IAAI,KAAM;MACzEC,GAAG,EAAEZ,GAAG,CAACa,OAAO,CAACC,MAAM;MACvBC,MAAM,EAAEb,YAAY,CAACc,IAAI;MACzBL;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAAAM,IAAA,EAAAC,mBAAA;EAAAH,MAAA,EAAAI;AAAA",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createQuery } from \"@farfetched/core\";\nimport { API, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const sendIssueMutation = _withFactory({\n  sid: \"-y6so3x\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx((body) => ({\n      url: API.support.issues,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"sendIssueMutation\",\n  method: \"createQuery\"\n});\n",
      "start": 1750275034108,
      "end": 1750275034282,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/HelpForm/api/index.ts"],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createQuery } from '@farfetched/core';\nimport { API, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { SendIssueRequest } from './dto';\nexport const sendIssueMutation = _withFactory({\n  sid: \"-y6so3x\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx<SendIssueRequest, {\n      id: string;\n    }>(body => ({\n      url: API.support.issues,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"sendIssueMutation\",\n  method: \"createQuery\"\n});"
        ],
        "mappings": "AAAA,SAAS,eAAe,oBAAoB;AAC5C,SAAS,mBAAmB;AAC5B,SAAS,KAAK,yBAAyB,oBAAoB;AAEpD,aAAM,oBAAoB,aAAa;AAAA,EAC5C,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,QAAQ,wBAEL,WAAS;AAAA,MACV,KAAK,IAAI,QAAQ;AAAA,MACjB,QAAQ,aAAa;AAAA,MACrB;AAAA,IACF,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/widgets/HelpForm/api/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createQuery } from \"@farfetched/core\";\nimport { API, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const sendIssueMutation = _withFactory({\n  sid: \"-y6so3x\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx((body) => ({\n      url: API.support.issues,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"sendIssueMutation\",\n  method: \"createQuery\"\n});\n",
      "start": 1750275034282,
      "end": 1750275034282,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/widgets/HelpForm/api/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxtB,CAAC,CAAC;"
      }
    }
  ]
}
