{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/features/TakeTestAgain/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createEvent, sample } from 'effector';\nimport { createAction } from 'effector-action';\n\nimport { atom } from '@/shared/factories';\n\nimport { RootModel } from '@/entities/Root';\nimport { clearLocalStorageTestUnits, takeTestAgainMutation, TestModel } from '@/entities/Test';\nimport { UserModel } from '@/entities/User';\n\nexport const TakeTestAgainModel = atom(() => {\n    const takeTestAgainClicked = createEvent();\n\n    createAction({\n        clock: takeTestAgainMutation.finished.success,\n        target: {\n            surveyId: UserModel.$surveyId,\n            form: TestModel.$scaleForm,\n            page: TestModel.$currentPage,\n            progress: TestModel.$currentProgress,\n            redirect: UserModel.redirectToTestPageFx,\n            takeTestAgain: takeTestAgainMutation.start,\n            closeAllModals: RootModel.allMenusClosed,\n        },\n        fn: (target) => {\n            target.surveyId.reinit();\n            target.page.reinit();\n            target.progress.reinit();\n            target.form.reinit();\n            target.closeAllModals(false);\n        },\n    });\n\n    sample({\n        clock: takeTestAgainClicked,\n        fn: clearLocalStorageTestUnits,\n        target: takeTestAgainMutation.start,\n    });\n\n    sample({\n        clock: takeTestAgainMutation.finished.success,\n        target: TestModel.formReset,\n    });\n\n    return {\n        takeTestAgainClicked,\n    };\n});\n",
      "start": 1746125082479,
      "end": 1746125082512,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { createEvent, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { atom } from '@/shared/factories';\nimport { RootModel } from '@/entities/Root';\nimport { clearLocalStorageTestUnits, takeTestAgainMutation, TestModel } from '@/entities/Test';\nimport { UserModel } from '@/entities/User';\nexport const TakeTestAgainModel = atom(() => {\n  const takeTestAgainClicked = createEvent({\n    name: \"takeTestAgainClicked\",\n    sid: \"i1qe25\"\n  });\n  createAction({\n    clock: takeTestAgainMutation.finished.success,\n    target: {\n      surveyId: UserModel.$surveyId,\n      form: TestModel.$scaleForm,\n      page: TestModel.$currentPage,\n      progress: TestModel.$currentProgress,\n      redirect: UserModel.redirectToTestPageFx,\n      takeTestAgain: takeTestAgainMutation.start,\n      closeAllModals: RootModel.allMenusClosed\n    },\n    fn: target => {\n      target.surveyId.reinit();\n      target.page.reinit();\n      target.progress.reinit();\n      target.form.reinit();\n      target.closeAllModals(false);\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainClicked,\n      fn: clearLocalStorageTestUnits,\n      target: takeTestAgainMutation.start\n    }],\n    or: {\n      sid: \"-7716mf\"\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainMutation.finished.success,\n      target: TestModel.formReset\n    }],\n    or: {\n      sid: \"-73qf29\"\n    }\n  });\n  return {\n    takeTestAgainClicked\n  };\n});",
      "start": 1746125082512,
      "end": 1746125082513,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createEvent",
          "sample",
          "createAction",
          "atom",
          "RootModel",
          "clearLocalStorageTestUnits",
          "takeTestAgainMutation",
          "TestModel",
          "UserModel",
          "TakeTestAgainModel",
          "takeTestAgainClicked",
          "name",
          "sid",
          "clock",
          "finished",
          "success",
          "target",
          "surveyId",
          "$surveyId",
          "form",
          "$scaleForm",
          "page",
          "$currentPage",
          "progress",
          "$currentProgress",
          "redirect",
          "redirectToTestPageFx",
          "takeTestAgain",
          "start",
          "closeAllModals",
          "allMenusClosed",
          "fn",
          "reinit",
          "and",
          "or",
          "formReset"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/features/TakeTestAgain/model/index.ts"],
        "sourcesContent": [
          "import { createEvent, sample } from 'effector';\nimport { createAction } from 'effector-action';\n\nimport { atom } from '@/shared/factories';\n\nimport { RootModel } from '@/entities/Root';\nimport { clearLocalStorageTestUnits, takeTestAgainMutation, TestModel } from '@/entities/Test';\nimport { UserModel } from '@/entities/User';\n\nexport const TakeTestAgainModel = atom(() => {\n    const takeTestAgainClicked = createEvent();\n\n    createAction({\n        clock: takeTestAgainMutation.finished.success,\n        target: {\n            surveyId: UserModel.$surveyId,\n            form: TestModel.$scaleForm,\n            page: TestModel.$currentPage,\n            progress: TestModel.$currentProgress,\n            redirect: UserModel.redirectToTestPageFx,\n            takeTestAgain: takeTestAgainMutation.start,\n            closeAllModals: RootModel.allMenusClosed,\n        },\n        fn: (target) => {\n            target.surveyId.reinit();\n            target.page.reinit();\n            target.progress.reinit();\n            target.form.reinit();\n            target.closeAllModals(false);\n        },\n    });\n\n    sample({\n        clock: takeTestAgainClicked,\n        fn: clearLocalStorageTestUnits,\n        target: takeTestAgainMutation.start,\n    });\n\n    sample({\n        clock: takeTestAgainMutation.finished.success,\n        target: TestModel.formReset,\n    });\n\n    return {\n        takeTestAgainClicked,\n    };\n});\n"
        ],
        "mappings": "AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,UAAU;AAC9C,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,IAAI,QAAQ,oBAAoB;AAEzC,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,0BAA0B,EAAEC,qBAAqB,EAAEC,SAAS,QAAQ,iBAAiB;AAC9F,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,OAAO,MAAMC,kBAAkB,GAAGN,IAAI,CAAC,MAAM;EACzC,MAAMO,oBAAoB,GAAGV,WAAW;IAAAW,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;EAE1CV,YAAY,CAAC;IACTW,KAAK,EAAEP,qBAAqB,CAACQ,QAAQ,CAACC,OAAO;IAC7CC,MAAM,EAAE;MACJC,QAAQ,EAAET,SAAS,CAACU,SAAS;MAC7BC,IAAI,EAAEZ,SAAS,CAACa,UAAU;MAC1BC,IAAI,EAAEd,SAAS,CAACe,YAAY;MAC5BC,QAAQ,EAAEhB,SAAS,CAACiB,gBAAgB;MACpCC,QAAQ,EAAEjB,SAAS,CAACkB,oBAAoB;MACxCC,aAAa,EAAErB,qBAAqB,CAACsB,KAAK;MAC1CC,cAAc,EAAEzB,SAAS,CAAC0B;IAC9B,CAAC;IACDC,EAAE,EAAGf,MAAM,IAAK;MACZA,MAAM,CAACC,QAAQ,CAACe,MAAM,CAAC,CAAC;MACxBhB,MAAM,CAACK,IAAI,CAACW,MAAM,CAAC,CAAC;MACpBhB,MAAM,CAACO,QAAQ,CAACS,MAAM,CAAC,CAAC;MACxBhB,MAAM,CAACG,IAAI,CAACa,MAAM,CAAC,CAAC;MACpBhB,MAAM,CAACa,cAAc,CAAC,KAAK,CAAC;IAChC;EACJ,CAAC,CAAC;EAEF5B,MAAM;IAAAgC,GAAA,GAAC;MACHpB,KAAK,EAAEH,oBAAoB;MAC3BqB,EAAE,EAAE1B,0BAA0B;MAC9BW,MAAM,EAAEV,qBAAqB,CAACsB;IAClC,CAAC;IAAAM,EAAA;MAAAtB,GAAA;IAAA;EAAA,EAAC;EAEFX,MAAM;IAAAgC,GAAA,GAAC;MACHpB,KAAK,EAAEP,qBAAqB,CAACQ,QAAQ,CAACC,OAAO;MAC7CC,MAAM,EAAET,SAAS,CAAC4B;IACtB,CAAC;IAAAD,EAAA;MAAAtB,GAAA;IAAA;EAAA,EAAC;EAEF,OAAO;IACHF;EACJ,CAAC;AACL,CAAC,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { createEvent, sample } from \"effector\";\nimport { createAction } from \"effector-action\";\nimport { atom } from \"@/shared/factories\";\nimport { RootModel } from \"@/entities/Root\";\nimport { clearLocalStorageTestUnits, takeTestAgainMutation, TestModel } from \"@/entities/Test\";\nimport { UserModel } from \"@/entities/User\";\nexport const TakeTestAgainModel = atom(() => {\n  const takeTestAgainClicked = createEvent({\n    name: \"takeTestAgainClicked\",\n    sid: \"i1qe25\"\n  });\n  createAction({\n    clock: takeTestAgainMutation.finished.success,\n    target: {\n      surveyId: UserModel.$surveyId,\n      form: TestModel.$scaleForm,\n      page: TestModel.$currentPage,\n      progress: TestModel.$currentProgress,\n      redirect: UserModel.redirectToTestPageFx,\n      takeTestAgain: takeTestAgainMutation.start,\n      closeAllModals: RootModel.allMenusClosed\n    },\n    fn: (target) => {\n      target.surveyId.reinit();\n      target.page.reinit();\n      target.progress.reinit();\n      target.form.reinit();\n      target.closeAllModals(false);\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainClicked,\n      fn: clearLocalStorageTestUnits,\n      target: takeTestAgainMutation.start\n    }],\n    or: {\n      sid: \"-7716mf\"\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainMutation.finished.success,\n      target: TestModel.formReset\n    }],\n    or: {\n      sid: \"-73qf29\"\n    }\n  });\n  return {\n    takeTestAgainClicked\n  };\n});\n",
      "start": 1746125082513,
      "end": 1746125082580,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/features/TakeTestAgain/model/index.ts"],
        "sourcesContent": [
          "import { createEvent, sample } from 'effector';\nimport { createAction } from 'effector-action';\nimport { atom } from '@/shared/factories';\nimport { RootModel } from '@/entities/Root';\nimport { clearLocalStorageTestUnits, takeTestAgainMutation, TestModel } from '@/entities/Test';\nimport { UserModel } from '@/entities/User';\nexport const TakeTestAgainModel = atom(() => {\n  const takeTestAgainClicked = createEvent({\n    name: \"takeTestAgainClicked\",\n    sid: \"i1qe25\"\n  });\n  createAction({\n    clock: takeTestAgainMutation.finished.success,\n    target: {\n      surveyId: UserModel.$surveyId,\n      form: TestModel.$scaleForm,\n      page: TestModel.$currentPage,\n      progress: TestModel.$currentProgress,\n      redirect: UserModel.redirectToTestPageFx,\n      takeTestAgain: takeTestAgainMutation.start,\n      closeAllModals: RootModel.allMenusClosed\n    },\n    fn: target => {\n      target.surveyId.reinit();\n      target.page.reinit();\n      target.progress.reinit();\n      target.form.reinit();\n      target.closeAllModals(false);\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainClicked,\n      fn: clearLocalStorageTestUnits,\n      target: takeTestAgainMutation.start\n    }],\n    or: {\n      sid: \"-7716mf\"\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainMutation.finished.success,\n      target: TestModel.formReset\n    }],\n    or: {\n      sid: \"-73qf29\"\n    }\n  });\n  return {\n    takeTestAgainClicked\n  };\n});"
        ],
        "mappings": "AAAA,SAAS,aAAa,cAAc;AACpC,SAAS,oBAAoB;AAC7B,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAC1B,SAAS,4BAA4B,uBAAuB,iBAAiB;AAC7E,SAAS,iBAAiB;AACnB,aAAM,qBAAqB,KAAK,MAAM;AAC3C,QAAM,uBAAuB,YAAY;AAAA,IACvC,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AACD,eAAa;AAAA,IACX,OAAO,sBAAsB,SAAS;AAAA,IACtC,QAAQ;AAAA,MACN,UAAU,UAAU;AAAA,MACpB,MAAM,UAAU;AAAA,MAChB,MAAM,UAAU;AAAA,MAChB,UAAU,UAAU;AAAA,MACpB,UAAU,UAAU;AAAA,MACpB,eAAe,sBAAsB;AAAA,MACrC,gBAAgB,UAAU;AAAA,IAC5B;AAAA,IACA,IAAI,YAAU;AACZ,aAAO,SAAS,OAAO;AACvB,aAAO,KAAK,OAAO;AACnB,aAAO,SAAS,OAAO;AACvB,aAAO,KAAK,OAAO;AACnB,aAAO,eAAe,KAAK;AAAA,IAC7B;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,QAAQ,sBAAsB;AAAA,IAChC,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO,sBAAsB,SAAS;AAAA,MACtC,QAAQ,UAAU;AAAA,IACpB,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL;AAAA,EACF;AACF,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/features/TakeTestAgain/model/index.ts [vike:pluginModuleBanner] */\nimport { createEvent, sample } from \"effector\";\nimport { createAction } from \"effector-action\";\nimport { atom } from \"@/shared/factories\";\nimport { RootModel } from \"@/entities/Root\";\nimport { clearLocalStorageTestUnits, takeTestAgainMutation, TestModel } from \"@/entities/Test\";\nimport { UserModel } from \"@/entities/User\";\nexport const TakeTestAgainModel = atom(() => {\n  const takeTestAgainClicked = createEvent({\n    name: \"takeTestAgainClicked\",\n    sid: \"i1qe25\"\n  });\n  createAction({\n    clock: takeTestAgainMutation.finished.success,\n    target: {\n      surveyId: UserModel.$surveyId,\n      form: TestModel.$scaleForm,\n      page: TestModel.$currentPage,\n      progress: TestModel.$currentProgress,\n      redirect: UserModel.redirectToTestPageFx,\n      takeTestAgain: takeTestAgainMutation.start,\n      closeAllModals: RootModel.allMenusClosed\n    },\n    fn: (target) => {\n      target.surveyId.reinit();\n      target.page.reinit();\n      target.progress.reinit();\n      target.form.reinit();\n      target.closeAllModals(false);\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainClicked,\n      fn: clearLocalStorageTestUnits,\n      target: takeTestAgainMutation.start\n    }],\n    or: {\n      sid: \"-7716mf\"\n    }\n  });\n  sample({\n    and: [{\n      clock: takeTestAgainMutation.finished.success,\n      target: TestModel.formReset\n    }],\n    or: {\n      sid: \"-73qf29\"\n    }\n  });\n  return {\n    takeTestAgainClicked\n  };\n});\n",
      "start": 1746125082580,
      "end": 1746125082580,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/features/TakeTestAgain/model/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzhC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAA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"
      }
    }
  ]
}
