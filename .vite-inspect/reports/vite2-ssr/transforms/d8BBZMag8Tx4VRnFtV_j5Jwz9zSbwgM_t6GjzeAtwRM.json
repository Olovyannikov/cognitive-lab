{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createMutation, createQuery } from '@farfetched/core';\n\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\n\nexport const getQuestionsQuery = createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n        url: `/surveys/questions`,\n    })),\n});\n\nexport const submitAnswersMutation = createMutation({\n    effect: createInternalRequestFx<Answers, { id: string; user_free_report: string }>((body) => ({\n        url: `/surveys/answers/submit`,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n\nexport const takeTestAgainMutation = createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n        url: API.surveys.start,\n        method: HTTP_METHODS.POST,\n    })),\n});\n",
      "start": 1746125696208,
      "end": 1746125696260,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from '@farfetched/core';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-iugphm\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n      url: `/surveys/questions`\n    }))\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-r691yw\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx<Answers, {\n      id: string;\n      user_free_report: string;\n    }>(body => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"fib76p\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});",
      "start": 1746125696260,
      "end": 1746125696262,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createMutation",
          "createQuery",
          "API",
          "createCommonRequestFx",
          "createInternalRequestFx",
          "HTTP_METHODS",
          "QuestionsResponse",
          "Answers",
          "getQuestionsQuery",
          "_withFactory",
          "sid",
          "\"-iugphm\"",
          "fn",
          "effect",
          "url",
          "name",
          "\"getQuestionsQuery\"",
          "method",
          "\"createQuery\"",
          "submitAnswersMutation",
          "\"-r691yw\"",
          "id",
          "user_free_report",
          "body",
          "POST",
          "\"submitAnswersMutation\"",
          "\"createMutation\"",
          "takeTestAgainMutation",
          "\"fib76p\"",
          "surveys",
          "start",
          "\"takeTestAgainMutation\""
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts"],
        "sourcesContent": [
          "import { createMutation, createQuery } from '@farfetched/core';\n\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\n\nexport const getQuestionsQuery = createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n        url: `/surveys/questions`,\n    })),\n});\n\nexport const submitAnswersMutation = createMutation({\n    effect: createInternalRequestFx<Answers, { id: string; user_free_report: string }>((body) => ({\n        url: `/surveys/answers/submit`,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n\nexport const takeTestAgainMutation = createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n        url: API.surveys.start,\n        method: HTTP_METHODS.POST,\n    })),\n});\n"
        ],
        "mappings": ";AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAE9D,SAASC,GAAG,EAAEC,qBAAqB,EAAEC,uBAAuB,EAAEC,YAAY,QAAQ,cAAc;AAEhG,cAAcC,iBAAiB,QAAQ,OAAO;AAC9C,cAAcC,OAAO,QAAQ,SAAS;AAEtC,OAAO,MAAMC,iBAAiB,GAAAC,YAAA;EAAAC,GAAA,EAAAC,SAAA;EAAAC,EAAA,EAAAA,CAAA,KAAGX,WAAW,CAAC;IACzCY,MAAM,EAAEV,qBAAqB,CAAC,IAAI,EAAEG,iBAAiB,EAAE,CAAC,CAAC,OAAO;MAC5DQ,GAAG,EAAE;IACT,CAAC,CAAC;EACN,CAAC,CAAC;EAAAC,IAAA,EAAAC,mBAAA;EAAAC,MAAA,EAAAC;AAAA;AAEF,OAAO,MAAMC,qBAAqB,GAAAV,YAAA;EAAAC,GAAA,EAAAU,SAAA;EAAAR,EAAA,EAAAA,CAAA,KAAGZ,cAAc,CAAC;IAChDa,MAAM,EAAET,uBAAuB,CAACG,OAAO,EAAE;MAAEc,EAAE,EAAE,MAAM;MAAEC,gBAAgB,EAAE,MAAM;IAAC,CAAC,CAAC,CAAEC,IAAI,KAAM;MAC1FT,GAAG,EAAE,yBAAyB;MAC9BG,MAAM,EAAEZ,YAAY,CAACmB,IAAI;MACzBD;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAAAR,IAAA,EAAAU,uBAAA;EAAAR,MAAA,EAAAS;AAAA;AAEF,OAAO,MAAMC,qBAAqB,GAAAlB,YAAA;EAAAC,GAAA,EAAAkB,QAAA;EAAAhB,EAAA,EAAAA,CAAA,KAAGX,WAAW,CAAC;IAC7CY,MAAM,EAAET,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO;MAC/CU,GAAG,EAAEZ,GAAG,CAAC2B,OAAO,CAACC,KAAK;MACtBb,MAAM,EAAEZ,YAAY,CAACmB;IACzB,CAAC,CAAC;EACN,CAAC,CAAC;EAAAT,IAAA,EAAAgB,uBAAA;EAAAd,MAAA,EAAAC;AAAA",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-iugphm\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx(() => ({\n      url: `/surveys/questions`\n    }))\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-r691yw\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"fib76p\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});\n",
      "start": 1746125696262,
      "end": 1746125696415,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts"],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from '@farfetched/core';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-iugphm\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n      url: `/surveys/questions`\n    }))\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-r691yw\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx<Answers, {\n      id: string;\n      user_free_report: string;\n    }>(body => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"fib76p\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});"
        ],
        "mappings": "AAAA,SAAS,eAAe,oBAAoB;AAC5C,SAAS,gBAAgB,mBAAmB;AAC5C,SAAS,KAAK,uBAAuB,yBAAyB,oBAAoB;AAG3E,aAAM,oBAAoB,aAAa;AAAA,EAC5C,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,QAAQ,sBAAiD,OAAO;AAAA,MAC9D,KAAK;AAAA,IACP,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACM,aAAM,wBAAwB,aAAa;AAAA,EAChD,KAAK;AAAA,EACL,IAAI,MAAM,eAAe;AAAA,IACvB,QAAQ,wBAGL,WAAS;AAAA,MACV,KAAK;AAAA,MACL,QAAQ,aAAa;AAAA,MACrB;AAAA,IACF,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACM,aAAM,wBAAwB,aAAa;AAAA,EAChD,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,QAAQ,wBAAoC,OAAO;AAAA,MACjD,KAAK,IAAI,QAAQ;AAAA,MACjB,QAAQ,aAAa;AAAA,IACvB,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125696415,
      "end": 1746125696415,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Test/api/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-iugphm\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx(() => ({\n      url: `/surveys/questions`\n    }))\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-r691yw\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"fib76p\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});\n",
      "start": 1746125696415,
      "end": 1746125696416,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Test/api/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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"
      }
    }
  ]
}
