{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createMutation, createQuery } from '@farfetched/core';\nimport { v4 } from 'uuid';\n\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\n\nexport const getQuestionsQuery = createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n        url: `/surveys/questions`,\n    })),\n    mapData: (data) => [\n        ...data.result,\n        {\n            id: v4(),\n            text: 'Ваш Email',\n            type: 'email',\n            category: '',\n            reverse_scored: false,\n            hint: 'Пришлем отчет и бонусные материалы',\n        },\n    ],\n});\n\nexport const submitAnswersMutation = createMutation({\n    effect: createInternalRequestFx<Answers, { id: string; user_free_report: string }>((body) => ({\n        url: `/surveys/answers/submit`,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n\nexport const takeTestAgainMutation = createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n        url: API.surveys.start,\n        method: HTTP_METHODS.POST,\n    })),\n});\n",
      "start": 1750275033562,
      "end": 1750275033607,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from '@farfetched/core';\nimport { v4 } from 'uuid';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-idf33f\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n      url: `/surveys/questions`\n    })),\n    mapData: data => [...data.result, {\n      id: v4(),\n      text: 'Ваш Email',\n      type: 'email',\n      category: '',\n      reverse_scored: false,\n      hint: 'Пришлем отчет и бонусные материалы'\n    }]\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-bjriyh\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx<Answers, {\n      id: string;\n      user_free_report: string;\n    }>(body => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"v4sq74\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});",
      "start": 1750275033607,
      "end": 1750275033608,
      "order": "pre-normal",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createMutation",
          "createQuery",
          "v4",
          "API",
          "createCommonRequestFx",
          "createInternalRequestFx",
          "HTTP_METHODS",
          "QuestionsResponse",
          "Answers",
          "getQuestionsQuery",
          "_withFactory",
          "sid",
          "\"-idf33f\"",
          "fn",
          "effect",
          "url",
          "mapData",
          "data",
          "result",
          "id",
          "text",
          "type",
          "category",
          "reverse_scored",
          "hint",
          "name",
          "\"getQuestionsQuery\"",
          "method",
          "\"createQuery\"",
          "submitAnswersMutation",
          "\"-bjriyh\"",
          "user_free_report",
          "body",
          "POST",
          "\"submitAnswersMutation\"",
          "\"createMutation\"",
          "takeTestAgainMutation",
          "\"v4sq74\"",
          "surveys",
          "start",
          "\"takeTestAgainMutation\""
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts"],
        "sourcesContent": [
          "import { createMutation, createQuery } from '@farfetched/core';\nimport { v4 } from 'uuid';\n\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\n\nexport const getQuestionsQuery = createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n        url: `/surveys/questions`,\n    })),\n    mapData: (data) => [\n        ...data.result,\n        {\n            id: v4(),\n            text: 'Ваш Email',\n            type: 'email',\n            category: '',\n            reverse_scored: false,\n            hint: 'Пришлем отчет и бонусные материалы',\n        },\n    ],\n});\n\nexport const submitAnswersMutation = createMutation({\n    effect: createInternalRequestFx<Answers, { id: string; user_free_report: string }>((body) => ({\n        url: `/surveys/answers/submit`,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n\nexport const takeTestAgainMutation = createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n        url: API.surveys.start,\n        method: HTTP_METHODS.POST,\n    })),\n});\n"
        ],
        "mappings": ";AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,SAASC,EAAE,QAAQ,MAAM;AAEzB,SAASC,GAAG,EAAEC,qBAAqB,EAAEC,uBAAuB,EAAEC,YAAY,QAAQ,cAAc;AAEhG,cAAcC,iBAAiB,QAAQ,OAAO;AAC9C,cAAcC,OAAO,QAAQ,SAAS;AAEtC,OAAO,MAAMC,iBAAiB,GAAAC,YAAA;EAAAC,GAAA,EAAAC,SAAA;EAAAC,EAAA,EAAAA,CAAA,KAAGZ,WAAW,CAAC;IACzCa,MAAM,EAAEV,qBAAqB,CAAC,IAAI,EAAEG,iBAAiB,EAAE,CAAC,CAAC,OAAO;MAC5DQ,GAAG,EAAE;IACT,CAAC,CAAC,CAAC;IACHC,OAAO,EAAGC,IAAI,IAAK,CACf,GAAGA,IAAI,CAACC,MAAM,EACd;MACIC,EAAE,EAAEjB,EAAE,CAAC,CAAC;MACRkB,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE,KAAK;MACrBC,IAAI,EAAE;IACV,CAAC;EAET,CAAC,CAAC;EAAAC,IAAA,EAAAC,mBAAA;EAAAC,MAAA,EAAAC;AAAA;AAEF,OAAO,MAAMC,qBAAqB,GAAAnB,YAAA;EAAAC,GAAA,EAAAmB,SAAA;EAAAjB,EAAA,EAAAA,CAAA,KAAGb,cAAc,CAAC;IAChDc,MAAM,EAAET,uBAAuB,CAACG,OAAO,EAAE;MAAEW,EAAE,EAAE,MAAM;MAAEY,gBAAgB,EAAE,MAAM;IAAC,CAAC,CAAC,CAAEC,IAAI,KAAM;MAC1FjB,GAAG,EAAE,yBAAyB;MAC9BY,MAAM,EAAErB,YAAY,CAAC2B,IAAI;MACzBD;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAAAP,IAAA,EAAAS,uBAAA;EAAAP,MAAA,EAAAQ;AAAA;AAEF,OAAO,MAAMC,qBAAqB,GAAA1B,YAAA;EAAAC,GAAA,EAAA0B,QAAA;EAAAxB,EAAA,EAAAA,CAAA,KAAGZ,WAAW,CAAC;IAC7Ca,MAAM,EAAET,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,OAAO;MAC/CU,GAAG,EAAEZ,GAAG,CAACmC,OAAO,CAACC,KAAK;MACtBZ,MAAM,EAAErB,YAAY,CAAC2B;IACzB,CAAC,CAAC;EACN,CAAC,CAAC;EAAAR,IAAA,EAAAe,uBAAA;EAAAb,MAAA,EAAAC;AAAA",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { v4 } from \"uuid\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-idf33f\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx(() => ({\n      url: `/surveys/questions`\n    })),\n    mapData: (data) => [...data.result, {\n      id: v4(),\n      text: \"Ваш Email\",\n      type: \"email\",\n      category: \"\",\n      reverse_scored: false,\n      hint: \"Пришлем отчет и бонусные материалы\"\n    }]\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-bjriyh\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"v4sq74\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});\n",
      "start": 1750275033608,
      "end": 1750275033732,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts"],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from '@farfetched/core';\nimport { v4 } from 'uuid';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-idf33f\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n      url: `/surveys/questions`\n    })),\n    mapData: data => [...data.result, {\n      id: v4(),\n      text: 'Ваш Email',\n      type: 'email',\n      category: '',\n      reverse_scored: false,\n      hint: 'Пришлем отчет и бонусные материалы'\n    }]\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-bjriyh\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx<Answers, {\n      id: string;\n      user_free_report: string;\n    }>(body => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"v4sq74\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});"
        ],
        "mappings": "AAAA,SAAS,eAAe,oBAAoB;AAC5C,SAAS,gBAAgB,mBAAmB;AAC5C,SAAS,UAAU;AACnB,SAAS,KAAK,uBAAuB,yBAAyB,oBAAoB;AAG3E,aAAM,oBAAoB,aAAa;AAAA,EAC5C,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,QAAQ,sBAAiD,OAAO;AAAA,MAC9D,KAAK;AAAA,IACP,EAAE;AAAA,IACF,SAAS,UAAQ,CAAC,GAAG,KAAK,QAAQ;AAAA,MAChC,IAAI,GAAG;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,MACV,gBAAgB;AAAA,MAChB,MAAM;AAAA,IACR,CAAC;AAAA,EACH,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACM,aAAM,wBAAwB,aAAa;AAAA,EAChD,KAAK;AAAA,EACL,IAAI,MAAM,eAAe;AAAA,IACvB,QAAQ,wBAGL,WAAS;AAAA,MACV,KAAK;AAAA,MACL,QAAQ,aAAa;AAAA,MACrB;AAAA,IACF,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACM,aAAM,wBAAwB,aAAa;AAAA,EAChD,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,QAAQ,wBAAoC,OAAO;AAAA,MACjD,KAAK,IAAI,QAAQ;AAAA,MACjB,QAAQ,aAAa;AAAA,IACvB,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750275033732,
      "end": 1750275033732,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/entities/Test/api/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { v4 } from \"uuid\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getQuestionsQuery = _withFactory({\n  sid: \"-idf33f\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx(() => ({\n      url: `/surveys/questions`\n    })),\n    mapData: (data) => [...data.result, {\n      id: v4(),\n      text: \"Ваш Email\",\n      type: \"email\",\n      category: \"\",\n      reverse_scored: false,\n      hint: \"Пришлем отчет и бонусные материалы\"\n    }]\n  }),\n  name: \"getQuestionsQuery\",\n  method: \"createQuery\"\n});\nexport const submitAnswersMutation = _withFactory({\n  sid: \"-bjriyh\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"submitAnswersMutation\",\n  method: \"createMutation\"\n});\nexport const takeTestAgainMutation = _withFactory({\n  sid: \"v4sq74\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  }),\n  name: \"takeTestAgainMutation\",\n  method: \"createQuery\"\n});\n",
      "start": 1750275033733,
      "end": 1750275033733,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Test/api/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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AC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpzB,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxtB,CAAC,CAAC;"
      }
    }
  ]
}
