{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createMutation, createQuery } from '@farfetched/core';\nimport { v4 } from 'uuid';\n\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { QuestionsResponse } from './dto';\nimport type { Answers } from './types';\n\nexport const getQuestionsQuery = createQuery({\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\n        url: `/surveys/questions`,\n    })),\n    mapData: (data) => [\n        ...data.result,\n        {\n            id: v4(),\n            text: 'Ваш Email',\n            type: 'email',\n            category: '',\n            reverse_scored: false,\n            hint: 'Пришлем отчет и бонусные материалы',\n        },\n    ],\n});\n\nexport const submitAnswersMutation = createMutation({\n    effect: createInternalRequestFx<Answers, { id: string; user_free_report: string }>((body) => ({\n        url: `/surveys/answers/submit`,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n\nexport const takeTestAgainMutation = createQuery({\n    effect: createInternalRequestFx<void, void>(() => ({\n        url: API.surveys.start,\n        method: HTTP_METHODS.POST,\n    })),\n});\n",
      "start": 1750271784854,
      "end": 1750271784873,
      "sourcemaps": null
    },
    {
      "name": "vite:react-swc",
      "result": "import { withFactory as _effector$factory } from 'effector';\nimport { createMutation, createQuery } from '@farfetched/core';\nimport { v4 } from 'uuid';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nexport const getQuestionsQuery = _effector$factory({\n    sid: \"5jo1a502\",\n    fn: ()=>createQuery({\n            effect: createCommonRequestFx(()=>({\n                    url: `/surveys/questions`\n                })),\n            mapData: (data)=>[\n                    ...data.result,\n                    {\n                        id: v4(),\n                        text: 'Ваш Email',\n                        type: 'email',\n                        category: '',\n                        reverse_scored: false,\n                        hint: 'Пришлем отчет и бонусные материалы'\n                    }\n                ]\n        })\n});\nexport const submitAnswersMutation = _effector$factory({\n    sid: \"asgnuxxg\",\n    fn: ()=>createMutation({\n            effect: createInternalRequestFx((body)=>({\n                    url: `/surveys/answers/submit`,\n                    method: HTTP_METHODS.POST,\n                    body\n                }))\n        })\n});\nexport const takeTestAgainMutation = _effector$factory({\n    sid: \"921yrpdr\",\n    fn: ()=>createQuery({\n            effect: createInternalRequestFx(()=>({\n                    url: API.surveys.start,\n                    method: HTTP_METHODS.POST\n                }))\n        })\n});\n",
      "start": 1750271784873,
      "end": 1750271784878,
      "order": "pre",
      "sourcemaps": "{\"version\":3,\"sources\":[\"/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts\"],\"sourcesContent\":[\"import { createMutation, createQuery } from '@farfetched/core';\\nimport { v4 } from 'uuid';\\n\\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\\n\\nimport type { QuestionsResponse } from './dto';\\nimport type { Answers } from './types';\\n\\nexport const getQuestionsQuery = createQuery({\\n    effect: createCommonRequestFx<void, QuestionsResponse[]>(() => ({\\n        url: `/surveys/questions`,\\n    })),\\n    mapData: (data) => [\\n        ...data.result,\\n        {\\n            id: v4(),\\n            text: 'Ваш Email',\\n            type: 'email',\\n            category: '',\\n            reverse_scored: false,\\n            hint: 'Пришлем отчет и бонусные материалы',\\n        },\\n    ],\\n});\\n\\nexport const submitAnswersMutation = createMutation({\\n    effect: createInternalRequestFx<Answers, { id: string; user_free_report: string }>((body) => ({\\n        url: `/surveys/answers/submit`,\\n        method: HTTP_METHODS.POST,\\n        body,\\n    })),\\n});\\n\\nexport const takeTestAgainMutation = createQuery({\\n    effect: createInternalRequestFx<void, void>(() => ({\\n        url: API.surveys.start,\\n        method: HTTP_METHODS.POST,\\n    })),\\n});\\n\"],\"names\":[\"createMutation\",\"createQuery\",\"v4\",\"API\",\"createCommonRequestFx\",\"createInternalRequestFx\",\"HTTP_METHODS\",\"getQuestionsQuery\",\"effect\",\"url\",\"mapData\",\"data\",\"result\",\"id\",\"text\",\"type\",\"category\",\"reverse_scored\",\"hint\",\"submitAnswersMutation\",\"body\",\"method\",\"POST\",\"takeTestAgainMutation\",\"surveys\",\"start\"],\"mappings\":\";AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,mBAAmB;AAC/D,SAASC,EAAE,QAAQ,OAAO;AAE1B,SAASC,GAAG,EAAEC,qBAAqB,EAAEC,uBAAuB,EAAEC,YAAY,QAAQ,eAAe;AAKjG,OAAO,MAAMC;;YAAoBN,YAAY;YACzCO,QAAQJ,sBAAiD,IAAO,CAAA;oBAC5DK,KAAK,CAAC,kBAAkB,CAAC;gBAC7B,CAAA;YACAC,SAAS,CAACC,OAAS;uBACZA,KAAKC,MAAM;oBACd;wBACIC,IAAIX;wBACJY,MAAM;wBACNC,MAAM;wBACNC,UAAU;wBACVC,gBAAgB;wBAChBC,MAAM;oBACV;iBACH;QACL;GAAG;AAEH,OAAO,MAAMC;;YAAwBnB,eAAe;YAChDQ,QAAQH,wBAA2E,CAACe,OAAU,CAAA;oBAC1FX,KAAK,CAAC,uBAAuB,CAAC;oBAC9BY,QAAQf,aAAagB,IAAI;oBACzBF;gBACJ,CAAA;QACJ;GAAG;AAEH,OAAO,MAAMG;;YAAwBtB,YAAY;YAC7CO,QAAQH,wBAAoC,IAAO,CAAA;oBAC/CI,KAAKN,IAAIqB,OAAO,CAACC,KAAK;oBACtBJ,QAAQf,aAAagB,IAAI;gBAC7B,CAAA;QACJ;GAAG\"}"
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _effector$factory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { v4 } from \"uuid\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getQuestionsQuery = _effector$factory({\n  sid: \"5jo1a502\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx(() => ({\n      url: `/surveys/questions`\n    })),\n    mapData: (data) => [\n      ...data.result,\n      {\n        id: v4(),\n        text: \"Ваш Email\",\n        type: \"email\",\n        category: \"\",\n        reverse_scored: false,\n        hint: \"Пришлем отчет и бонусные материалы\"\n      }\n    ]\n  })\n});\nexport const submitAnswersMutation = _effector$factory({\n  sid: \"asgnuxxg\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  })\n});\nexport const takeTestAgainMutation = _effector$factory({\n  sid: \"921yrpdr\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  })\n});\n",
      "start": 1750271784878,
      "end": 1750271784975,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Test/api/index.ts"],
        "sourcesContent": [
          "import { withFactory as _effector$factory } from 'effector';\nimport { createMutation, createQuery } from '@farfetched/core';\nimport { v4 } from 'uuid';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nexport const getQuestionsQuery = _effector$factory({\n    sid: \"5jo1a502\",\n    fn: ()=>createQuery({\n            effect: createCommonRequestFx(()=>({\n                    url: `/surveys/questions`\n                })),\n            mapData: (data)=>[\n                    ...data.result,\n                    {\n                        id: v4(),\n                        text: 'Ваш Email',\n                        type: 'email',\n                        category: '',\n                        reverse_scored: false,\n                        hint: 'Пришлем отчет и бонусные материалы'\n                    }\n                ]\n        })\n});\nexport const submitAnswersMutation = _effector$factory({\n    sid: \"asgnuxxg\",\n    fn: ()=>createMutation({\n            effect: createInternalRequestFx((body)=>({\n                    url: `/surveys/answers/submit`,\n                    method: HTTP_METHODS.POST,\n                    body\n                }))\n        })\n});\nexport const takeTestAgainMutation = _effector$factory({\n    sid: \"921yrpdr\",\n    fn: ()=>createQuery({\n            effect: createInternalRequestFx(()=>({\n                    url: API.surveys.start,\n                    method: HTTP_METHODS.POST\n                }))\n        })\n});\n"
        ],
        "mappings": "AAAA,SAAS,eAAe,yBAAyB;AACjD,SAAS,gBAAgB,mBAAmB;AAC5C,SAAS,UAAU;AACnB,SAAS,KAAK,uBAAuB,yBAAyB,oBAAoB;AAC3E,aAAM,oBAAoB,kBAAkB;AAAA,EAC/C,KAAK;AAAA,EACL,IAAI,MAAI,YAAY;AAAA,IACZ,QAAQ,sBAAsB,OAAK;AAAA,MAC3B,KAAK;AAAA,IACT,EAAE;AAAA,IACN,SAAS,CAAC,SAAO;AAAA,MACT,GAAG,KAAK;AAAA,MACR;AAAA,QACI,IAAI,GAAG;AAAA,QACP,MAAM;AAAA,QACN,MAAM;AAAA,QACN,UAAU;AAAA,QACV,gBAAgB;AAAA,QAChB,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACR,CAAC;AACT,CAAC;AACM,aAAM,wBAAwB,kBAAkB;AAAA,EACnD,KAAK;AAAA,EACL,IAAI,MAAI,eAAe;AAAA,IACf,QAAQ,wBAAwB,CAAC,UAAQ;AAAA,MACjC,KAAK;AAAA,MACL,QAAQ,aAAa;AAAA,MACrB;AAAA,IACJ,EAAE;AAAA,EACV,CAAC;AACT,CAAC;AACM,aAAM,wBAAwB,kBAAkB;AAAA,EACnD,KAAK;AAAA,EACL,IAAI,MAAI,YAAY;AAAA,IACZ,QAAQ,wBAAwB,OAAK;AAAA,MAC7B,KAAK,IAAI,QAAQ;AAAA,MACjB,QAAQ,aAAa;AAAA,IACzB,EAAE;AAAA,EACV,CAAC;AACT,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/entities/Test/api/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _effector$factory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { v4 } from \"uuid\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getQuestionsQuery = _effector$factory({\n  sid: \"5jo1a502\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx(() => ({\n      url: `/surveys/questions`\n    })),\n    mapData: (data) => [\n      ...data.result,\n      {\n        id: v4(),\n        text: \"Ваш Email\",\n        type: \"email\",\n        category: \"\",\n        reverse_scored: false,\n        hint: \"Пришлем отчет и бонусные материалы\"\n      }\n    ]\n  })\n});\nexport const submitAnswersMutation = _effector$factory({\n  sid: \"asgnuxxg\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: `/surveys/answers/submit`,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  })\n});\nexport const takeTestAgainMutation = _effector$factory({\n  sid: \"921yrpdr\",\n  fn: () => createQuery({\n    effect: createInternalRequestFx(() => ({\n      url: API.surveys.start,\n      method: HTTP_METHODS.POST\n    }))\n  })\n});\n",
      "start": 1750271784975,
      "end": 1750271784975,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Test/api/index.ts"],
        "names": [],
        "mappingszB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC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
      }
    }
  ]
}
