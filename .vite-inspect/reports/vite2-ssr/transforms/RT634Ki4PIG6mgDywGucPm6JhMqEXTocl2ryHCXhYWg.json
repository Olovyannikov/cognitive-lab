{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/reportContent.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createStore, sample } from 'effector';\n\nimport { getPersonalityTypeQuery } from '../api';\nimport type { ContentBlock } from '../types';\n\nexport const $reportContent = createStore<{ title: string; content: ContentBlock[] }[]>([]);\nsample({\n    clock: getPersonalityTypeQuery.finished.success,\n    fn: ({ result: { content } }) => content,\n    target: $reportContent,\n});\n",
      "start": 1750271784943,
      "end": 1750271784962,
      "sourcemaps": null
    },
    {
      "name": "vite:react-swc",
      "result": "import { createStore, sample } from 'effector';\nimport { getPersonalityTypeQuery } from '../api';\nexport const $reportContent = createStore([], {\n    sid: \"79c6waqf\"\n});\nsample({\n    and: [\n        {\n            clock: getPersonalityTypeQuery.finished.success,\n            fn: ({ result: { content } })=>content,\n            target: $reportContent\n        }\n    ],\n    or: {\n        sid: \"4eff6sqj\"\n    }\n});\n",
      "start": 1750271784962,
      "end": 1750271784971,
      "order": "pre",
      "sourcemaps": "{\"version\":3,\"sources\":[\"/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/reportContent.ts\"],\"sourcesContent\":[\"import { createStore, sample } from 'effector';\\n\\nimport { getPersonalityTypeQuery } from '../api';\\nimport type { ContentBlock } from '../types';\\n\\nexport const $reportContent = createStore<{ title: string; content: ContentBlock[] }[]>([]);\\nsample({\\n    clock: getPersonalityTypeQuery.finished.success,\\n    fn: ({ result: { content } }) => content,\\n    target: $reportContent,\\n});\\n\"],\"names\":[\"createStore\",\"sample\",\"getPersonalityTypeQuery\",\"$reportContent\",\"clock\",\"finished\",\"success\",\"fn\",\"result\",\"content\",\"target\"],\"mappings\":\"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,WAAW;AAE/C,SAASC,uBAAuB,QAAQ,SAAS;AAGjD,OAAO,MAAMC,iBAAiBH,YAA0D,EAAE;;GAAE;AAC5FC;;QAAO;YACHG,OAAOF,wBAAwBG,QAAQ,CAACC,OAAO;YAC/CC,IAAI,CAAC,EAAEC,QAAQ,EAAEC,OAAO,EAAE,EAAE,GAAKA;YACjCC,QAAQP;QACZ\"}"
    },
    {
      "name": "vite:esbuild",
      "result": "import { createStore, sample } from \"effector\";\nimport { getPersonalityTypeQuery } from \"../api\";\nexport const $reportContent = createStore([], {\n  sid: \"79c6waqf\"\n});\nsample({\n  and: [\n    {\n      clock: getPersonalityTypeQuery.finished.success,\n      fn: ({ result: { content } }) => content,\n      target: $reportContent\n    }\n  ],\n  or: {\n    sid: \"4eff6sqj\"\n  }\n});\n",
      "start": 1750271784971,
      "end": 1750271785104,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Report/model/reportContent.ts"],
        "sourcesContent": [
          "import { createStore, sample } from 'effector';\nimport { getPersonalityTypeQuery } from '../api';\nexport const $reportContent = createStore([], {\n    sid: \"79c6waqf\"\n});\nsample({\n    and: [\n        {\n            clock: getPersonalityTypeQuery.finished.success,\n            fn: ({ result: { content } })=>content,\n            target: $reportContent\n        }\n    ],\n    or: {\n        sid: \"4eff6sqj\"\n    }\n});\n"
        ],
        "mappings": "AAAA,SAAS,aAAa,cAAc;AACpC,SAAS,+BAA+B;AACjC,aAAM,iBAAiB,YAAY,CAAC,GAAG;AAAA,EAC1C,KAAK;AACT,CAAC;AACD,OAAO;AAAA,EACH,KAAK;AAAA,IACD;AAAA,MACI,OAAO,wBAAwB,SAAS;AAAA,MACxC,IAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAI;AAAA,MAC/B,QAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EACA,IAAI;AAAA,IACA,KAAK;AAAA,EACT;AACJ,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/entities/Report/model/reportContent.ts [vike:pluginModuleBanner] */\nimport { createStore, sample } from \"effector\";\nimport { getPersonalityTypeQuery } from \"../api\";\nexport const $reportContent = createStore([], {\n  sid: \"79c6waqf\"\n});\nsample({\n  and: [\n    {\n      clock: getPersonalityTypeQuery.finished.success,\n      fn: ({ result: { content } }) => content,\n      target: $reportContent\n    }\n  ],\n  or: {\n    sid: \"4eff6sqj\"\n  }\n});\n",
      "start": 1750271785104,
      "end": 1750271785104,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Report/model/reportContent.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC;AACF,CAAC,CAAC;"
      }
    }
  ]
}
