{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type { ReactNode } from 'react';\nimport { useForm } from '@effector-reform/react';\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\n\nimport { useIsLarge } from '@/shared/lib';\nimport { PageLoader } from '@/shared/ui';\n\nimport {\n    EmailFieldWrapper,\n    type SingleChoiceAnswer,\n    takeTestAgainMutation,\n    TestContainer,\n    TestEmailFormModel,\n    TestModel,\n    TestMultipleQuestion,\n    TestProgress,\n    TestScaleQuestion,\n    TestSingleChoiceQuestion,\n} from '@/entities/Test';\n\nimport { RephrasingModel } from '@/features/Rephrasing';\n\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\n\nexport const TestPage = () => {\n    const isLarge = useIsLarge();\n\n    useGate(TestModel.TestGate);\n    const data = useUnit(TestModel.$questions);\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n        TestModel.$currentPage,\n        TestModel.$currentQuestion,\n        TestModel.$currentProgress,\n        TestModel.$currentValue,\n        TestModel.$isSplashScreenVisible,\n        takeTestAgainMutation.$pending,\n    ]);\n\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\n\n    const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n\n    const { fields } = useForm(TestEmailFormModel.form);\n\n    if (!data || !question) return null;\n    if (isLoading) return <PageLoader />;\n\n    const Map: Record<string, ReactNode> = {\n        scale: (\n            <TestScaleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                value={String(value)}\n                page={page}\n                onChange={onChange}\n            />\n        ),\n        multiple_choice: question.options && (\n            <TestMultipleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                value={isArray(value) ? value : null}\n            />\n        ),\n        single_choice: question.options && (\n            <TestSingleChoiceQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                showInput={Boolean(\n                    question.options.find((el) => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input\n                )}\n                value={value as SingleChoiceAnswer}\n            />\n        ),\n        email: (\n            <EmailFieldWrapper\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex] ?? ''}\n            >\n                <TextInput\n                    size={isLarge ? 'xl' : 'md'}\n                    placeholder='mymail.@mail.ru'\n                    label='Введите Email для отчёта'\n                    value={fields.email.value}\n                    onChange={(e) => fields.email.onChange(e.target.value)}\n                    leftSection={<EnvelopeSimple color='var(--mantine-color-gray-5)' size={isLarge ? 32 : 20} />}\n                />\n                <Checkbox\n                    size={isLarge ? 'md' : 'sm'}\n                    radius='xxs'\n                    checked={fields.approve_subscription.value}\n                    onChange={() => fields.approve_subscription.onChange(!fields.approve_subscription.value)}\n                    label={\n                        <Text\n                            size={isLarge ? 'md' : 'sm'}\n                            style={{\n                                lineHeight: 'normal',\n                            }}\n                        >\n                            Согласен(-на) на получение новостей, персональных акций и{' '}\n                            <Box\n                                td='none'\n                                c='blue.7'\n                                component='a'\n                                target='_blank'\n                                href='https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf'\n                            >\n                                рекламных материалов\n                            </Box>{' '}\n                            от CognitiveLab по электронной почте\n                        </Text>\n                    }\n                    styles={{\n                        label: {\n                            paddingLeft: 'var(--mantine-spacing-xs)',\n                        },\n                    }}\n                />\n            </EmailFieldWrapper>\n        ),\n    };\n\n    if (isSplashScreen) return <TestSplashScreen />;\n\n    return (\n        <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>\n    );\n};\n",
      "start": 1750105187457,
      "end": 1750105187493,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import type { ReactNode } from 'react';\nimport { useForm } from '@effector-reform/react';\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\nimport { useIsLarge } from '@/shared/lib';\nimport { PageLoader } from '@/shared/ui';\nimport { EmailFieldWrapper, type SingleChoiceAnswer, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from '@/entities/Test';\nimport { RephrasingModel } from '@/features/Rephrasing';\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\nexport const TestPage = () => {\n  const isLarge = useIsLarge();\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  const {\n    fields\n  } = useForm(TestEmailFormModel.form);\n  if (!data || !question) return null;\n  if (isLoading) return <PageLoader />;\n  const Map: Record<string, ReactNode> = {\n    scale: <TestScaleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} value={String(value)} page={page} onChange={onChange} />,\n    multiple_choice: question.options && <TestMultipleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} value={isArray(value) ? value : null} />,\n    single_choice: question.options && <TestSingleChoiceQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} showInput={Boolean(question.options.find(el => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input)} value={value as SingleChoiceAnswer} />,\n    email: <EmailFieldWrapper {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex] ?? ''}>\n                <TextInput size={isLarge ? 'xl' : 'md'} placeholder='mymail.@mail.ru' label='Введите Email для отчёта' value={fields.email.value} onChange={e => fields.email.onChange(e.target.value)} leftSection={<EnvelopeSimple color='var(--mantine-color-gray-5)' size={isLarge ? 32 : 20} />} />\n                <Checkbox size={isLarge ? 'md' : 'sm'} radius='xxs' checked={fields.approve_subscription.value} onChange={() => fields.approve_subscription.onChange(!fields.approve_subscription.value)} label={<Text size={isLarge ? 'md' : 'sm'} style={{\n        lineHeight: 'normal'\n      }}>\n                            Согласен(-на) на получение новостей, персональных акций и{' '}\n                            <Box td='none' c='blue.7' component='a' target='_blank' href='https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf'>\n                                рекламных материалов\n                            </Box>{' '}\n                            от CognitiveLab по электронной почте\n                        </Text>} styles={{\n        label: {\n          paddingLeft: 'var(--mantine-spacing-xs)'\n        }\n      }} />\n            </EmailFieldWrapper>\n  };\n  if (isSplashScreen) return <TestSplashScreen />;\n  return <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>;\n};",
      "start": 1750105187493,
      "end": 1750105187496,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "ReactNode",
          "useForm",
          "Box",
          "Checkbox",
          "Text",
          "TextInput",
          "EnvelopeSimple",
          "useGate",
          "useUnit",
          "isArray",
          "useIsLarge",
          "PageLoader",
          "EmailFieldWrapper",
          "SingleChoiceAnswer",
          "takeTestAgainMutation",
          "TestContainer",
          "TestEmailFormModel",
          "TestModel",
          "TestMultipleQuestion",
          "TestProgress",
          "TestScaleQuestion",
          "TestSingleChoiceQuestion",
          "RephrasingModel",
          "Controls",
          "SubmitTestModal",
          "TestSplashScreen",
          "TestPage",
          "isLarge",
          "TestGate",
          "data",
          "$questions",
          "page",
          "question",
          "progress",
          "value",
          "isSplashScreen",
          "isLoading",
          "$currentPage",
          "$currentQuestion",
          "$currentProgress",
          "$currentValue",
          "$isSplashScreenVisible",
          "$pending",
          "onChange",
          "scaleFormFieldChanged",
          "phraseIndex",
          "phrases",
          "$currentPhraseIndex",
          "$currentPhrases",
          "fields",
          "form",
          "Map",
          "Record",
          "scale",
          "texts",
          "hints",
          "String",
          "multiple_choice",
          "options",
          "single_choice",
          "Boolean",
          "find",
          "el",
          "id",
          "requires_input",
          "email",
          "e",
          "target",
          "approve_subscription",
          "lineHeight",
          "label",
          "paddingLeft",
          "length",
          "type"
        ],
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx"
        ],
        "sourcesContent": [
          "import type { ReactNode } from 'react';\nimport { useForm } from '@effector-reform/react';\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\n\nimport { useIsLarge } from '@/shared/lib';\nimport { PageLoader } from '@/shared/ui';\n\nimport {\n    EmailFieldWrapper,\n    type SingleChoiceAnswer,\n    takeTestAgainMutation,\n    TestContainer,\n    TestEmailFormModel,\n    TestModel,\n    TestMultipleQuestion,\n    TestProgress,\n    TestScaleQuestion,\n    TestSingleChoiceQuestion,\n} from '@/entities/Test';\n\nimport { RephrasingModel } from '@/features/Rephrasing';\n\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\n\nexport const TestPage = () => {\n    const isLarge = useIsLarge();\n\n    useGate(TestModel.TestGate);\n    const data = useUnit(TestModel.$questions);\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n        TestModel.$currentPage,\n        TestModel.$currentQuestion,\n        TestModel.$currentProgress,\n        TestModel.$currentValue,\n        TestModel.$isSplashScreenVisible,\n        takeTestAgainMutation.$pending,\n    ]);\n\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\n\n    const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n\n    const { fields } = useForm(TestEmailFormModel.form);\n\n    if (!data || !question) return null;\n    if (isLoading) return <PageLoader />;\n\n    const Map: Record<string, ReactNode> = {\n        scale: (\n            <TestScaleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                value={String(value)}\n                page={page}\n                onChange={onChange}\n            />\n        ),\n        multiple_choice: question.options && (\n            <TestMultipleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                value={isArray(value) ? value : null}\n            />\n        ),\n        single_choice: question.options && (\n            <TestSingleChoiceQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                showInput={Boolean(\n                    question.options.find((el) => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input\n                )}\n                value={value as SingleChoiceAnswer}\n            />\n        ),\n        email: (\n            <EmailFieldWrapper\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex] ?? ''}\n            >\n                <TextInput\n                    size={isLarge ? 'xl' : 'md'}\n                    placeholder='mymail.@mail.ru'\n                    label='Введите Email для отчёта'\n                    value={fields.email.value}\n                    onChange={(e) => fields.email.onChange(e.target.value)}\n                    leftSection={<EnvelopeSimple color='var(--mantine-color-gray-5)' size={isLarge ? 32 : 20} />}\n                />\n                <Checkbox\n                    size={isLarge ? 'md' : 'sm'}\n                    radius='xxs'\n                    checked={fields.approve_subscription.value}\n                    onChange={() => fields.approve_subscription.onChange(!fields.approve_subscription.value)}\n                    label={\n                        <Text\n                            size={isLarge ? 'md' : 'sm'}\n                            style={{\n                                lineHeight: 'normal',\n                            }}\n                        >\n                            Согласен(-на) на получение новостей, персональных акций и{' '}\n                            <Box\n                                td='none'\n                                c='blue.7'\n                                component='a'\n                                target='_blank'\n                                href='https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf'\n                            >\n                                рекламных материалов\n                            </Box>{' '}\n                            от CognitiveLab по электронной почте\n                        </Text>\n                    }\n                    styles={{\n                        label: {\n                            paddingLeft: 'var(--mantine-spacing-xs)',\n                        },\n                    }}\n                />\n            </EmailFieldWrapper>\n        ),\n    };\n\n    if (isSplashScreen) return <TestSplashScreen />;\n\n    return (\n        <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>\n    );\n};\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { useForm } from \"@effector-reform/react\";\nimport { Box, Checkbox, Text, TextInput } from \"@mantine/core\";\nimport { EnvelopeSimple } from \"@phosphor-icons/react/dist/ssr\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { isArray } from \"lodash-es\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { PageLoader } from \"@/shared/ui\";\nimport { EmailFieldWrapper, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from \"@/entities/Test\";\nimport { RephrasingModel } from \"@/features/Rephrasing\";\nimport { Controls, SubmitTestModal, TestSplashScreen } from \"@/widgets/Test\";\nexport const TestPage = () => {\n  const isLarge = useIsLarge();\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  const {\n    fields\n  } = useForm(TestEmailFormModel.form);\n  if (!data || !question) return null;\n  if (isLoading) return /* @__PURE__ */ jsx(PageLoader, {});\n  const Map = {\n    scale: /* @__PURE__ */ jsx(TestScaleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], value: String(value), page, onChange }),\n    multiple_choice: question.options && /* @__PURE__ */ jsx(TestMultipleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, value: isArray(value) ? value : null }),\n    single_choice: question.options && /* @__PURE__ */ jsx(TestSingleChoiceQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, showInput: Boolean(question.options.find((el) => el.id === value?.value)?.requires_input), value }),\n    email: /* @__PURE__ */ jsxs(EmailFieldWrapper, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex] ?? \"\", children: [\n      /* @__PURE__ */ jsx(TextInput, { size: isLarge ? \"xl\" : \"md\", placeholder: \"mymail.@mail.ru\", label: \"Введите Email для отчёта\", value: fields.email.value, onChange: (e) => fields.email.onChange(e.target.value), leftSection: /* @__PURE__ */ jsx(EnvelopeSimple, { color: \"var(--mantine-color-gray-5)\", size: isLarge ? 32 : 20 }) }),\n      /* @__PURE__ */ jsx(Checkbox, { size: isLarge ? \"md\" : \"sm\", radius: \"xxs\", checked: fields.approve_subscription.value, onChange: () => fields.approve_subscription.onChange(!fields.approve_subscription.value), label: /* @__PURE__ */ jsxs(Text, { size: isLarge ? \"md\" : \"sm\", style: {\n        lineHeight: \"normal\"\n      }, children: [\n        \"Согласен(-на) на получение новостей, персональных акций и\",\n        \" \",\n        /* @__PURE__ */ jsx(Box, { td: \"none\", c: \"blue.7\", component: \"a\", target: \"_blank\", href: \"https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf\", children: \"рекламных материалов\" }),\n        \" \",\n        \"от CognitiveLab по электронной почте\"\n      ] }), styles: {\n        label: {\n          paddingLeft: \"var(--mantine-spacing-xs)\"\n        }\n      } })\n    ] })\n  };\n  if (isSplashScreen) return /* @__PURE__ */ jsx(TestSplashScreen, {});\n  return /* @__PURE__ */ jsxs(TestContainer, { children: [\n    /* @__PURE__ */ jsx(TestProgress, { value: progress, page, total: data.length }),\n    Map[question?.type],\n    /* @__PURE__ */ jsx(Controls, {}),\n    /* @__PURE__ */ jsx(SubmitTestModal, {})\n  ] });\n};\n",
      "start": 1750105187496,
      "end": 1750105187584,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx"
        ],
        "sourcesContent": [
          "import type { ReactNode } from 'react';\nimport { useForm } from '@effector-reform/react';\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\nimport { useIsLarge } from '@/shared/lib';\nimport { PageLoader } from '@/shared/ui';\nimport { EmailFieldWrapper, type SingleChoiceAnswer, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from '@/entities/Test';\nimport { RephrasingModel } from '@/features/Rephrasing';\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\nexport const TestPage = () => {\n  const isLarge = useIsLarge();\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  const {\n    fields\n  } = useForm(TestEmailFormModel.form);\n  if (!data || !question) return null;\n  if (isLoading) return <PageLoader />;\n  const Map: Record<string, ReactNode> = {\n    scale: <TestScaleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} value={String(value)} page={page} onChange={onChange} />,\n    multiple_choice: question.options && <TestMultipleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} value={isArray(value) ? value : null} />,\n    single_choice: question.options && <TestSingleChoiceQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} showInput={Boolean(question.options.find(el => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input)} value={value as SingleChoiceAnswer} />,\n    email: <EmailFieldWrapper {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex] ?? ''}>\n                <TextInput size={isLarge ? 'xl' : 'md'} placeholder='mymail.@mail.ru' label='Введите Email для отчёта' value={fields.email.value} onChange={e => fields.email.onChange(e.target.value)} leftSection={<EnvelopeSimple color='var(--mantine-color-gray-5)' size={isLarge ? 32 : 20} />} />\n                <Checkbox size={isLarge ? 'md' : 'sm'} radius='xxs' checked={fields.approve_subscription.value} onChange={() => fields.approve_subscription.onChange(!fields.approve_subscription.value)} label={<Text size={isLarge ? 'md' : 'sm'} style={{\n        lineHeight: 'normal'\n      }}>\n                            Согласен(-на) на получение новостей, персональных акций и{' '}\n                            <Box td='none' c='blue.7' component='a' target='_blank' href='https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf'>\n                                рекламных материалов\n                            </Box>{' '}\n                            от CognitiveLab по электронной почте\n                        </Text>} styles={{\n        label: {\n          paddingLeft: 'var(--mantine-spacing-xs)'\n        }\n      }} />\n            </EmailFieldWrapper>\n  };\n  if (isSplashScreen) return <TestSplashScreen />;\n  return <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>;\n};"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750105187584,
      "end": 1750105187584,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750105187584,
      "end": 1750105187585,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750105187585,
      "end": 1750105187585,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750105187585,
      "end": 1750105187585,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/pages/TestPage/index.tsx [vike:pluginModuleBanner] */\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { useForm } from \"@effector-reform/react\";\nimport { Box, Checkbox, Text, TextInput } from \"@mantine/core\";\nimport { EnvelopeSimple } from \"@phosphor-icons/react/dist/ssr\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { isArray } from \"lodash-es\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { PageLoader } from \"@/shared/ui\";\nimport { EmailFieldWrapper, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from \"@/entities/Test\";\nimport { RephrasingModel } from \"@/features/Rephrasing\";\nimport { Controls, SubmitTestModal, TestSplashScreen } from \"@/widgets/Test\";\nexport const TestPage = () => {\n  const isLarge = useIsLarge();\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  const {\n    fields\n  } = useForm(TestEmailFormModel.form);\n  if (!data || !question) return null;\n  if (isLoading) return /* @__PURE__ */ jsx(PageLoader, {});\n  const Map = {\n    scale: /* @__PURE__ */ jsx(TestScaleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], value: String(value), page, onChange }),\n    multiple_choice: question.options && /* @__PURE__ */ jsx(TestMultipleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, value: isArray(value) ? value : null }),\n    single_choice: question.options && /* @__PURE__ */ jsx(TestSingleChoiceQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, showInput: Boolean(question.options.find((el) => el.id === value?.value)?.requires_input), value }),\n    email: /* @__PURE__ */ jsxs(EmailFieldWrapper, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex] ?? \"\", children: [\n      /* @__PURE__ */ jsx(TextInput, { size: isLarge ? \"xl\" : \"md\", placeholder: \"mymail.@mail.ru\", label: \"Введите Email для отчёта\", value: fields.email.value, onChange: (e) => fields.email.onChange(e.target.value), leftSection: /* @__PURE__ */ jsx(EnvelopeSimple, { color: \"var(--mantine-color-gray-5)\", size: isLarge ? 32 : 20 }) }),\n      /* @__PURE__ */ jsx(Checkbox, { size: isLarge ? \"md\" : \"sm\", radius: \"xxs\", checked: fields.approve_subscription.value, onChange: () => fields.approve_subscription.onChange(!fields.approve_subscription.value), label: /* @__PURE__ */ jsxs(Text, { size: isLarge ? \"md\" : \"sm\", style: {\n        lineHeight: \"normal\"\n      }, children: [\n        \"Согласен(-на) на получение новостей, персональных акций и\",\n        \" \",\n        /* @__PURE__ */ jsx(Box, { td: \"none\", c: \"blue.7\", component: \"a\", target: \"_blank\", href: \"https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf\", children: \"рекламных материалов\" }),\n        \" \",\n        \"от CognitiveLab по электронной почте\"\n      ] }), styles: {\n        label: {\n          paddingLeft: \"var(--mantine-spacing-xs)\"\n        }\n      } })\n    ] })\n  };\n  if (isSplashScreen) return /* @__PURE__ */ jsx(TestSplashScreen, {});\n  return /* @__PURE__ */ jsxs(TestContainer, { children: [\n    /* @__PURE__ */ jsx(TestProgress, { value: progress, page, total: data.length }),\n    Map[question?.type],\n    /* @__PURE__ */ jsx(Controls, {}),\n    /* @__PURE__ */ jsx(SubmitTestModal, {})\n  ] });\n};\n",
      "start": 1750105187585,
      "end": 1750105187585,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "src/pages/TestPage/index.tsx"
        ],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxzM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvhH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACdlnjhhS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;"
      }
    }
  ]
}
