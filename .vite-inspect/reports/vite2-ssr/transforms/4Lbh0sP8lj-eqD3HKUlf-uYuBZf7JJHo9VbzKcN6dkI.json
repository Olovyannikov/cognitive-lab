{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type { ReactNode } from 'react';\nimport { useForm } from '@effector-reform/react';\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\n\nimport { useIsLarge } from '@/shared/lib';\nimport { PageLoader } from '@/shared/ui';\n\nimport {\n    EmailFieldWrapper,\n    type SingleChoiceAnswer,\n    takeTestAgainMutation,\n    TestContainer,\n    TestEmailFormModel,\n    TestModel,\n    TestMultipleQuestion,\n    TestProgress,\n    TestScaleQuestion,\n    TestSingleChoiceQuestion,\n} from '@/entities/Test';\n\nimport { RephrasingModel } from '@/features/Rephrasing';\n\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\n\nexport const TestPage = () => {\n    const isLarge = useIsLarge();\n\n    useGate(TestModel.TestGate);\n    const data = useUnit(TestModel.$questions);\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n        TestModel.$currentPage,\n        TestModel.$currentQuestion,\n        TestModel.$currentProgress,\n        TestModel.$currentValue,\n        TestModel.$isSplashScreenVisible,\n        takeTestAgainMutation.$pending,\n    ]);\n\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\n\n    const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n\n    const { fields } = useForm(TestEmailFormModel.form);\n\n    if (!data || !question) return null;\n    if (isLoading) return <PageLoader />;\n\n    const Map: Record<string, ReactNode> = {\n        scale: (\n            <TestScaleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                value={String(value)}\n                page={page}\n                onChange={onChange}\n            />\n        ),\n        multiple_choice: question.options && (\n            <TestMultipleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                value={isArray(value) ? value : null}\n            />\n        ),\n        single_choice: question.options && (\n            <TestSingleChoiceQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                showInput={Boolean(\n                    question.options.find((el) => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input\n                )}\n                value={value as SingleChoiceAnswer}\n            />\n        ),\n        email: (\n            <EmailFieldWrapper\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex] ?? ''}\n            >\n                <TextInput\n                    size={isLarge ? 'xl' : 'md'}\n                    placeholder='mymail.@mail.ru'\n                    label='Введите Email для отчёта'\n                    value={fields.email.value}\n                    onChange={(e) => fields.email.onChange(e.target.value)}\n                    leftSection={<EnvelopeSimple color='var(--mantine-color-gray-5)' size={isLarge ? 32 : 20} />}\n                />\n                <Checkbox\n                    size={isLarge ? 'md' : 'sm'}\n                    radius='xxs'\n                    checked={fields.approve_subscription.value}\n                    onChange={() => fields.approve_subscription.onChange(!fields.approve_subscription.value)}\n                    label={\n                        <Text\n                            size={isLarge ? 'md' : 'sm'}\n                            style={{\n                                lineHeight: 'normal',\n                            }}\n                        >\n                            Согласен(-на) на получение новостей, персональных акций и{' '}\n                            <Box\n                                td='none'\n                                c='blue.7'\n                                component='a'\n                                target='_blank'\n                                href='https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf'\n                            >\n                                рекламных материалов\n                            </Box>{' '}\n                            от CognitiveLab по электронной почте\n                        </Text>\n                    }\n                    styles={{\n                        label: {\n                            paddingLeft: 'var(--mantine-spacing-xs)',\n                        },\n                    }}\n                />\n            </EmailFieldWrapper>\n        ),\n    };\n\n    if (isSplashScreen) return <TestSplashScreen />;\n\n    return (\n        <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>\n    );\n};\n",
      "start": 1750239308228,
      "end": 1750239308240,
      "sourcemaps": null
    },
    {
      "name": "vite:react-swc",
      "result": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useForm } from '@effector-reform/react';\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\nimport { useIsLarge } from '@/shared/lib';\nimport { PageLoader } from '@/shared/ui';\nimport { EmailFieldWrapper, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from '@/entities/Test';\nimport { RephrasingModel } from '@/features/Rephrasing';\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\nexport const TestPage = ()=>{\n    const isLarge = useIsLarge();\n    useGate(TestModel.TestGate);\n    const data = useUnit(TestModel.$questions);\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n        TestModel.$currentPage,\n        TestModel.$currentQuestion,\n        TestModel.$currentProgress,\n        TestModel.$currentValue,\n        TestModel.$isSplashScreenVisible,\n        takeTestAgainMutation.$pending\n    ]);\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\n    const [phraseIndex, phrases] = useUnit([\n        RephrasingModel.$currentPhraseIndex,\n        RephrasingModel.$currentPhrases\n    ]);\n    const { fields } = useForm(TestEmailFormModel.form);\n    if (!data || !question) return null;\n    if (isLoading) return /*#__PURE__*/ _jsx(PageLoader, {});\n    const Map = {\n        scale: /*#__PURE__*/ _jsx(TestScaleQuestion, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex],\n            value: String(value),\n            page: page,\n            onChange: onChange\n        }),\n        multiple_choice: question.options && /*#__PURE__*/ _jsx(TestMultipleQuestion, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex],\n            page: page,\n            onChange: onChange,\n            value: isArray(value) ? value : null\n        }),\n        single_choice: question.options && /*#__PURE__*/ _jsx(TestSingleChoiceQuestion, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex],\n            page: page,\n            onChange: onChange,\n            showInput: Boolean(question.options.find((el)=>el.id === value?.value)?.requires_input),\n            value: value\n        }),\n        email: /*#__PURE__*/ _jsxs(EmailFieldWrapper, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex] ?? '',\n            children: [\n                /*#__PURE__*/ _jsx(TextInput, {\n                    size: isLarge ? 'xl' : 'md',\n                    placeholder: \"mymail.@mail.ru\",\n                    label: \"Введите Email для отчёта\",\n                    value: fields.email.value,\n                    onChange: (e)=>fields.email.onChange(e.target.value),\n                    leftSection: /*#__PURE__*/ _jsx(EnvelopeSimple, {\n                        color: \"var(--mantine-color-gray-5)\",\n                        size: isLarge ? 32 : 20\n                    })\n                }),\n                /*#__PURE__*/ _jsx(Checkbox, {\n                    size: isLarge ? 'md' : 'sm',\n                    radius: \"xxs\",\n                    checked: fields.approve_subscription.value,\n                    onChange: ()=>fields.approve_subscription.onChange(!fields.approve_subscription.value),\n                    label: /*#__PURE__*/ _jsxs(Text, {\n                        size: isLarge ? 'md' : 'sm',\n                        style: {\n                            lineHeight: 'normal'\n                        },\n                        children: [\n                            \"Согласен(-на) на получение новостей, персональных акций и\",\n                            ' ',\n                            /*#__PURE__*/ _jsx(Box, {\n                                td: \"none\",\n                                c: \"blue.7\",\n                                component: \"a\",\n                                target: \"_blank\",\n                                href: \"https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf\",\n                                children: \"рекламных материалов\"\n                            }),\n                            ' ',\n                            \"от CognitiveLab по электронной почте\"\n                        ]\n                    }),\n                    styles: {\n                        label: {\n                            paddingLeft: 'var(--mantine-spacing-xs)'\n                        }\n                    }\n                })\n            ]\n        })\n    };\n    if (isSplashScreen) return /*#__PURE__*/ _jsx(TestSplashScreen, {});\n    return /*#__PURE__*/ _jsxs(TestContainer, {\n        children: [\n            /*#__PURE__*/ _jsx(TestProgress, {\n                value: progress,\n                page: page,\n                total: data.length\n            }),\n            Map[question?.type],\n            /*#__PURE__*/ _jsx(Controls, {}),\n            /*#__PURE__*/ _jsx(SubmitTestModal, {})\n        ]\n    });\n};\n",
      "start": 1750239308240,
      "end": 1750239308264,
      "order": "pre",
      "sourcemaps": "{\"version\":3,\"sources\":[\"/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx\"],\"sourcesContent\":[\"import type { ReactNode } from 'react';\\nimport { useForm } from '@effector-reform/react';\\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\\nimport { useGate, useUnit } from 'effector-react';\\nimport { isArray } from 'lodash-es';\\n\\nimport { useIsLarge } from '@/shared/lib';\\nimport { PageLoader } from '@/shared/ui';\\n\\nimport {\\n    EmailFieldWrapper,\\n    type SingleChoiceAnswer,\\n    takeTestAgainMutation,\\n    TestContainer,\\n    TestEmailFormModel,\\n    TestModel,\\n    TestMultipleQuestion,\\n    TestProgress,\\n    TestScaleQuestion,\\n    TestSingleChoiceQuestion,\\n} from '@/entities/Test';\\n\\nimport { RephrasingModel } from '@/features/Rephrasing';\\n\\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\\n\\nexport const TestPage = () => {\\n    const isLarge = useIsLarge();\\n\\n    useGate(TestModel.TestGate);\\n    const data = useUnit(TestModel.$questions);\\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\\n        TestModel.$currentPage,\\n        TestModel.$currentQuestion,\\n        TestModel.$currentProgress,\\n        TestModel.$currentValue,\\n        TestModel.$isSplashScreenVisible,\\n        takeTestAgainMutation.$pending,\\n    ]);\\n\\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\\n\\n    const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\\n\\n    const { fields } = useForm(TestEmailFormModel.form);\\n\\n    if (!data || !question) return null;\\n    if (isLoading) return <PageLoader />;\\n\\n    const Map: Record<string, ReactNode> = {\\n        scale: (\\n            <TestScaleQuestion\\n                {...question}\\n                text={phrases.texts[phraseIndex] ?? ''}\\n                hint={phrases.hints[phraseIndex]}\\n                value={String(value)}\\n                page={page}\\n                onChange={onChange}\\n            />\\n        ),\\n        multiple_choice: question.options && (\\n            <TestMultipleQuestion\\n                {...question}\\n                text={phrases.texts[phraseIndex] ?? ''}\\n                hint={phrases.hints[phraseIndex]}\\n                page={page}\\n                onChange={onChange}\\n                value={isArray(value) ? value : null}\\n            />\\n        ),\\n        single_choice: question.options && (\\n            <TestSingleChoiceQuestion\\n                {...question}\\n                text={phrases.texts[phraseIndex] ?? ''}\\n                hint={phrases.hints[phraseIndex]}\\n                page={page}\\n                onChange={onChange}\\n                showInput={Boolean(\\n                    question.options.find((el) => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input\\n                )}\\n                value={value as SingleChoiceAnswer}\\n            />\\n        ),\\n        email: (\\n            <EmailFieldWrapper\\n                {...question}\\n                text={phrases.texts[phraseIndex] ?? ''}\\n                hint={phrases.hints[phraseIndex] ?? ''}\\n            >\\n                <TextInput\\n                    size={isLarge ? 'xl' : 'md'}\\n                    placeholder='mymail.@mail.ru'\\n                    label='Введите Email для отчёта'\\n                    value={fields.email.value}\\n                    onChange={(e) => fields.email.onChange(e.target.value)}\\n                    leftSection={<EnvelopeSimple color='var(--mantine-color-gray-5)' size={isLarge ? 32 : 20} />}\\n                />\\n                <Checkbox\\n                    size={isLarge ? 'md' : 'sm'}\\n                    radius='xxs'\\n                    checked={fields.approve_subscription.value}\\n                    onChange={() => fields.approve_subscription.onChange(!fields.approve_subscription.value)}\\n                    label={\\n                        <Text\\n                            size={isLarge ? 'md' : 'sm'}\\n                            style={{\\n                                lineHeight: 'normal',\\n                            }}\\n                        >\\n                            Согласен(-на) на получение новостей, персональных акций и{' '}\\n                            <Box\\n                                td='none'\\n                                c='blue.7'\\n                                component='a'\\n                                target='_blank'\\n                                href='https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf'\\n                            >\\n                                рекламных материалов\\n                            </Box>{' '}\\n                            от CognitiveLab по электронной почте\\n                        </Text>\\n                    }\\n                    styles={{\\n                        label: {\\n                            paddingLeft: 'var(--mantine-spacing-xs)',\\n                        },\\n                    }}\\n                />\\n            </EmailFieldWrapper>\\n        ),\\n    };\\n\\n    if (isSplashScreen) return <TestSplashScreen />;\\n\\n    return (\\n        <TestContainer>\\n            <TestProgress value={progress} page={page} total={data.length} />\\n            {Map[question?.type]}\\n            <Controls />\\n            <SubmitTestModal />\\n        </TestContainer>\\n    );\\n};\\n\"],\"names\":[\"useForm\",\"Box\",\"Checkbox\",\"Text\",\"TextInput\",\"EnvelopeSimple\",\"useGate\",\"useUnit\",\"isArray\",\"useIsLarge\",\"PageLoader\",\"EmailFieldWrapper\",\"takeTestAgainMutation\",\"TestContainer\",\"TestEmailFormModel\",\"TestModel\",\"TestMultipleQuestion\",\"TestProgress\",\"TestScaleQuestion\",\"TestSingleChoiceQuestion\",\"RephrasingModel\",\"Controls\",\"SubmitTestModal\",\"TestSplashScreen\",\"TestPage\",\"isLarge\",\"TestGate\",\"data\",\"$questions\",\"page\",\"question\",\"progress\",\"value\",\"isSplashScreen\",\"isLoading\",\"$currentPage\",\"$currentQuestion\",\"$currentProgress\",\"$currentValue\",\"$isSplashScreenVisible\",\"$pending\",\"onChange\",\"scaleFormFieldChanged\",\"phraseIndex\",\"phrases\",\"$currentPhraseIndex\",\"$currentPhrases\",\"fields\",\"form\",\"Map\",\"scale\",\"text\",\"texts\",\"hint\",\"hints\",\"String\",\"multiple_choice\",\"options\",\"single_choice\",\"showInput\",\"Boolean\",\"find\",\"el\",\"id\",\"requires_input\",\"email\",\"size\",\"placeholder\",\"label\",\"e\",\"target\",\"leftSection\",\"color\",\"radius\",\"checked\",\"approve_subscription\",\"style\",\"lineHeight\",\"td\",\"c\",\"component\",\"href\",\"styles\",\"paddingLeft\",\"total\",\"length\",\"type\"],\"mappings\":\"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\"}"
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useForm } from \"@effector-reform/react\";\nimport { Box, Checkbox, Text, TextInput } from \"@mantine/core\";\nimport { EnvelopeSimple } from \"@phosphor-icons/react/dist/ssr\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { isArray } from \"lodash-es\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { PageLoader } from \"@/shared/ui\";\nimport { EmailFieldWrapper, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from \"@/entities/Test\";\nimport { RephrasingModel } from \"@/features/Rephrasing\";\nimport { Controls, SubmitTestModal, TestSplashScreen } from \"@/widgets/Test\";\nexport const TestPage = () => {\n  const isLarge = useIsLarge();\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n    TestModel.$currentPage,\n    TestModel.$currentQuestion,\n    TestModel.$currentProgress,\n    TestModel.$currentValue,\n    TestModel.$isSplashScreenVisible,\n    takeTestAgainMutation.$pending\n  ]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([\n    RephrasingModel.$currentPhraseIndex,\n    RephrasingModel.$currentPhrases\n  ]);\n  const { fields } = useForm(TestEmailFormModel.form);\n  if (!data || !question) return null;\n  if (isLoading) return /* @__PURE__ */ _jsx(PageLoader, {});\n  const Map = {\n    scale: /* @__PURE__ */ _jsx(TestScaleQuestion, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex],\n      value: String(value),\n      page,\n      onChange\n    }),\n    multiple_choice: question.options && /* @__PURE__ */ _jsx(TestMultipleQuestion, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex],\n      page,\n      onChange,\n      value: isArray(value) ? value : null\n    }),\n    single_choice: question.options && /* @__PURE__ */ _jsx(TestSingleChoiceQuestion, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex],\n      page,\n      onChange,\n      showInput: Boolean(question.options.find((el) => el.id === value?.value)?.requires_input),\n      value\n    }),\n    email: /* @__PURE__ */ _jsxs(EmailFieldWrapper, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex] ?? \"\",\n      children: [\n        /* @__PURE__ */ _jsx(TextInput, {\n          size: isLarge ? \"xl\" : \"md\",\n          placeholder: \"mymail.@mail.ru\",\n          label: \"Введите Email для отчёта\",\n          value: fields.email.value,\n          onChange: (e) => fields.email.onChange(e.target.value),\n          leftSection: /* @__PURE__ */ _jsx(EnvelopeSimple, {\n            color: \"var(--mantine-color-gray-5)\",\n            size: isLarge ? 32 : 20\n          })\n        }),\n        /* @__PURE__ */ _jsx(Checkbox, {\n          size: isLarge ? \"md\" : \"sm\",\n          radius: \"xxs\",\n          checked: fields.approve_subscription.value,\n          onChange: () => fields.approve_subscription.onChange(!fields.approve_subscription.value),\n          label: /* @__PURE__ */ _jsxs(Text, {\n            size: isLarge ? \"md\" : \"sm\",\n            style: {\n              lineHeight: \"normal\"\n            },\n            children: [\n              \"Согласен(-на) на получение новостей, персональных акций и\",\n              \" \",\n              /* @__PURE__ */ _jsx(Box, {\n                td: \"none\",\n                c: \"blue.7\",\n                component: \"a\",\n                target: \"_blank\",\n                href: \"https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf\",\n                children: \"рекламных материалов\"\n              }),\n              \" \",\n              \"от CognitiveLab по электронной почте\"\n            ]\n          }),\n          styles: {\n            label: {\n              paddingLeft: \"var(--mantine-spacing-xs)\"\n            }\n          }\n        })\n      ]\n    })\n  };\n  if (isSplashScreen) return /* @__PURE__ */ _jsx(TestSplashScreen, {});\n  return /* @__PURE__ */ _jsxs(TestContainer, {\n    children: [\n      /* @__PURE__ */ _jsx(TestProgress, {\n        value: progress,\n        page,\n        total: data.length\n      }),\n      Map[question?.type],\n      /* @__PURE__ */ _jsx(Controls, {}),\n      /* @__PURE__ */ _jsx(SubmitTestModal, {})\n    ]\n  });\n};\n",
      "start": 1750239308264,
      "end": 1750239308282,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx"],
        "sourcesContent": [
          "import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useForm } from '@effector-reform/react';\nimport { Box, Checkbox, Text, TextInput } from '@mantine/core';\nimport { EnvelopeSimple } from '@phosphor-icons/react/dist/ssr';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\nimport { useIsLarge } from '@/shared/lib';\nimport { PageLoader } from '@/shared/ui';\nimport { EmailFieldWrapper, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from '@/entities/Test';\nimport { RephrasingModel } from '@/features/Rephrasing';\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\nexport const TestPage = ()=>{\n    const isLarge = useIsLarge();\n    useGate(TestModel.TestGate);\n    const data = useUnit(TestModel.$questions);\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n        TestModel.$currentPage,\n        TestModel.$currentQuestion,\n        TestModel.$currentProgress,\n        TestModel.$currentValue,\n        TestModel.$isSplashScreenVisible,\n        takeTestAgainMutation.$pending\n    ]);\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\n    const [phraseIndex, phrases] = useUnit([\n        RephrasingModel.$currentPhraseIndex,\n        RephrasingModel.$currentPhrases\n    ]);\n    const { fields } = useForm(TestEmailFormModel.form);\n    if (!data || !question) return null;\n    if (isLoading) return /*#__PURE__*/ _jsx(PageLoader, {});\n    const Map = {\n        scale: /*#__PURE__*/ _jsx(TestScaleQuestion, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex],\n            value: String(value),\n            page: page,\n            onChange: onChange\n        }),\n        multiple_choice: question.options && /*#__PURE__*/ _jsx(TestMultipleQuestion, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex],\n            page: page,\n            onChange: onChange,\n            value: isArray(value) ? value : null\n        }),\n        single_choice: question.options && /*#__PURE__*/ _jsx(TestSingleChoiceQuestion, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex],\n            page: page,\n            onChange: onChange,\n            showInput: Boolean(question.options.find((el)=>el.id === value?.value)?.requires_input),\n            value: value\n        }),\n        email: /*#__PURE__*/ _jsxs(EmailFieldWrapper, {\n            ...question,\n            text: phrases.texts[phraseIndex] ?? '',\n            hint: phrases.hints[phraseIndex] ?? '',\n            children: [\n                /*#__PURE__*/ _jsx(TextInput, {\n                    size: isLarge ? 'xl' : 'md',\n                    placeholder: \"mymail.@mail.ru\",\n                    label: \"Введите Email для отчёта\",\n                    value: fields.email.value,\n                    onChange: (e)=>fields.email.onChange(e.target.value),\n                    leftSection: /*#__PURE__*/ _jsx(EnvelopeSimple, {\n                        color: \"var(--mantine-color-gray-5)\",\n                        size: isLarge ? 32 : 20\n                    })\n                }),\n                /*#__PURE__*/ _jsx(Checkbox, {\n                    size: isLarge ? 'md' : 'sm',\n                    radius: \"xxs\",\n                    checked: fields.approve_subscription.value,\n                    onChange: ()=>fields.approve_subscription.onChange(!fields.approve_subscription.value),\n                    label: /*#__PURE__*/ _jsxs(Text, {\n                        size: isLarge ? 'md' : 'sm',\n                        style: {\n                            lineHeight: 'normal'\n                        },\n                        children: [\n                            \"Согласен(-на) на получение новостей, персональных акций и\",\n                            ' ',\n                            /*#__PURE__*/ _jsx(Box, {\n                                td: \"none\",\n                                c: \"blue.7\",\n                                component: \"a\",\n                                target: \"_blank\",\n                                href: \"https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf\",\n                                children: \"рекламных материалов\"\n                            }),\n                            ' ',\n                            \"от CognitiveLab по электронной почте\"\n                        ]\n                    }),\n                    styles: {\n                        label: {\n                            paddingLeft: 'var(--mantine-spacing-xs)'\n                        }\n                    }\n                })\n            ]\n        })\n    };\n    if (isSplashScreen) return /*#__PURE__*/ _jsx(TestSplashScreen, {});\n    return /*#__PURE__*/ _jsxs(TestContainer, {\n        children: [\n            /*#__PURE__*/ _jsx(TestProgress, {\n                value: progress,\n                page: page,\n                total: data.length\n            }),\n            Map[question?.type],\n            /*#__PURE__*/ _jsx(Controls, {}),\n            /*#__PURE__*/ _jsx(SubmitTestModal, {})\n        ]\n    });\n};\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750239308282,
      "end": 1750239308282,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750239308282,
      "end": 1750239308283,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750239308283,
      "end": 1750239308283,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750239308283,
      "end": 1750239308283,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/pages/TestPage/index.tsx [vike:pluginModuleBanner] */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useForm } from \"@effector-reform/react\";\nimport { Box, Checkbox, Text, TextInput } from \"@mantine/core\";\nimport { EnvelopeSimple } from \"@phosphor-icons/react/dist/ssr\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { isArray } from \"lodash-es\";\nimport { useIsLarge } from \"@/shared/lib\";\nimport { PageLoader } from \"@/shared/ui\";\nimport { EmailFieldWrapper, takeTestAgainMutation, TestContainer, TestEmailFormModel, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from \"@/entities/Test\";\nimport { RephrasingModel } from \"@/features/Rephrasing\";\nimport { Controls, SubmitTestModal, TestSplashScreen } from \"@/widgets/Test\";\nexport const TestPage = () => {\n  const isLarge = useIsLarge();\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n    TestModel.$currentPage,\n    TestModel.$currentQuestion,\n    TestModel.$currentProgress,\n    TestModel.$currentValue,\n    TestModel.$isSplashScreenVisible,\n    takeTestAgainMutation.$pending\n  ]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([\n    RephrasingModel.$currentPhraseIndex,\n    RephrasingModel.$currentPhrases\n  ]);\n  const { fields } = useForm(TestEmailFormModel.form);\n  if (!data || !question) return null;\n  if (isLoading) return /* @__PURE__ */ _jsx(PageLoader, {});\n  const Map = {\n    scale: /* @__PURE__ */ _jsx(TestScaleQuestion, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex],\n      value: String(value),\n      page,\n      onChange\n    }),\n    multiple_choice: question.options && /* @__PURE__ */ _jsx(TestMultipleQuestion, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex],\n      page,\n      onChange,\n      value: isArray(value) ? value : null\n    }),\n    single_choice: question.options && /* @__PURE__ */ _jsx(TestSingleChoiceQuestion, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex],\n      page,\n      onChange,\n      showInput: Boolean(question.options.find((el) => el.id === value?.value)?.requires_input),\n      value\n    }),\n    email: /* @__PURE__ */ _jsxs(EmailFieldWrapper, {\n      ...question,\n      text: phrases.texts[phraseIndex] ?? \"\",\n      hint: phrases.hints[phraseIndex] ?? \"\",\n      children: [\n        /* @__PURE__ */ _jsx(TextInput, {\n          size: isLarge ? \"xl\" : \"md\",\n          placeholder: \"mymail.@mail.ru\",\n          label: \"Введите Email для отчёта\",\n          value: fields.email.value,\n          onChange: (e) => fields.email.onChange(e.target.value),\n          leftSection: /* @__PURE__ */ _jsx(EnvelopeSimple, {\n            color: \"var(--mantine-color-gray-5)\",\n            size: isLarge ? 32 : 20\n          })\n        }),\n        /* @__PURE__ */ _jsx(Checkbox, {\n          size: isLarge ? \"md\" : \"sm\",\n          radius: \"xxs\",\n          checked: fields.approve_subscription.value,\n          onChange: () => fields.approve_subscription.onChange(!fields.approve_subscription.value),\n          label: /* @__PURE__ */ _jsxs(Text, {\n            size: isLarge ? \"md\" : \"sm\",\n            style: {\n              lineHeight: \"normal\"\n            },\n            children: [\n              \"Согласен(-на) на получение новостей, персональных акций и\",\n              \" \",\n              /* @__PURE__ */ _jsx(Box, {\n                td: \"none\",\n                c: \"blue.7\",\n                component: \"a\",\n                target: \"_blank\",\n                href: \"https://storage.yandexcloud.net/cognitive-lab-public/marketing.pdf\",\n                children: \"рекламных материалов\"\n              }),\n              \" \",\n              \"от CognitiveLab по электронной почте\"\n            ]\n          }),\n          styles: {\n            label: {\n              paddingLeft: \"var(--mantine-spacing-xs)\"\n            }\n          }\n        })\n      ]\n    })\n  };\n  if (isSplashScreen) return /* @__PURE__ */ _jsx(TestSplashScreen, {});\n  return /* @__PURE__ */ _jsxs(TestContainer, {\n    children: [\n      /* @__PURE__ */ _jsx(TestProgress, {\n        value: progress,\n        page,\n        total: data.length\n      }),\n      Map[question?.type],\n      /* @__PURE__ */ _jsx(Controls, {}),\n      /* @__PURE__ */ _jsx(SubmitTestModal, {})\n    ]\n  });\n};\n",
      "start": 1750239308283,
      "end": 1750239308283,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/pages/TestPage/index.tsx"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxzM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACdpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjhB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChhD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxhhB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC;"
      }
    }
  ]
}
