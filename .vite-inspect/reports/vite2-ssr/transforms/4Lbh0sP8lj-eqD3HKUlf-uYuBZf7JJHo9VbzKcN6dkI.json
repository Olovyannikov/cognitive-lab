{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type { ReactNode } from 'react';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\n\nimport { PageLoader } from '@/shared/ui';\n\nimport {\n    type SingleChoiceAnswer,\n    takeTestAgainMutation,\n    TestContainer,\n    TestModel,\n    TestMultipleQuestion,\n    TestProgress,\n    TestScaleQuestion,\n    TestSingleChoiceQuestion,\n} from '@/entities/Test';\n\nimport { RephrasingModel } from '@/features/Rephrasing';\n\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\n\nexport const TestPage = () => {\n    useGate(TestModel.TestGate);\n    const data = useUnit(TestModel.$questions);\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n        TestModel.$currentPage,\n        TestModel.$currentQuestion,\n        TestModel.$currentProgress,\n        TestModel.$currentValue,\n        TestModel.$isSplashScreenVisible,\n        takeTestAgainMutation.$pending,\n    ]);\n\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\n\n    const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n\n    if (!data || !question) return null;\n    if (isLoading) return <PageLoader />;\n\n    const Map: Record<string, ReactNode> = {\n        scale: (\n            <TestScaleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                value={String(value)}\n                page={page}\n                onChange={onChange}\n            />\n        ),\n        multiple_choice: question.options && (\n            <TestMultipleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                value={isArray(value) ? value : null}\n            />\n        ),\n        single_choice: question.options && (\n            <TestSingleChoiceQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                showInput={Boolean(\n                    question.options.find((el) => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input\n                )}\n                value={value as SingleChoiceAnswer}\n            />\n        ),\n    };\n\n    if (isSplashScreen) return <TestSplashScreen />;\n\n    return (\n        <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>\n    );\n};\n",
      "start": 1746125081625,
      "end": 1746125081654,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import type { ReactNode } from 'react';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\nimport { PageLoader } from '@/shared/ui';\nimport { type SingleChoiceAnswer, takeTestAgainMutation, TestContainer, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from '@/entities/Test';\nimport { RephrasingModel } from '@/features/Rephrasing';\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\nexport const TestPage = () => {\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  if (!data || !question) return null;\n  if (isLoading) return <PageLoader />;\n  const Map: Record<string, ReactNode> = {\n    scale: <TestScaleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} value={String(value)} page={page} onChange={onChange} />,\n    multiple_choice: question.options && <TestMultipleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} value={isArray(value) ? value : null} />,\n    single_choice: question.options && <TestSingleChoiceQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} showInput={Boolean(question.options.find(el => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input)} value={value as SingleChoiceAnswer} />\n  };\n  if (isSplashScreen) return <TestSplashScreen />;\n  return <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>;\n};",
      "start": 1746125081654,
      "end": 1746125081656,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "ReactNode",
          "useGate",
          "useUnit",
          "isArray",
          "PageLoader",
          "SingleChoiceAnswer",
          "takeTestAgainMutation",
          "TestContainer",
          "TestModel",
          "TestMultipleQuestion",
          "TestProgress",
          "TestScaleQuestion",
          "TestSingleChoiceQuestion",
          "RephrasingModel",
          "Controls",
          "SubmitTestModal",
          "TestSplashScreen",
          "TestPage",
          "TestGate",
          "data",
          "$questions",
          "page",
          "question",
          "progress",
          "value",
          "isSplashScreen",
          "isLoading",
          "$currentPage",
          "$currentQuestion",
          "$currentProgress",
          "$currentValue",
          "$isSplashScreenVisible",
          "$pending",
          "onChange",
          "scaleFormFieldChanged",
          "phraseIndex",
          "phrases",
          "$currentPhraseIndex",
          "$currentPhrases",
          "Map",
          "Record",
          "scale",
          "texts",
          "hints",
          "String",
          "multiple_choice",
          "options",
          "single_choice",
          "Boolean",
          "find",
          "el",
          "id",
          "requires_input",
          "length",
          "type"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx"],
        "sourcesContent": [
          "import type { ReactNode } from 'react';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\n\nimport { PageLoader } from '@/shared/ui';\n\nimport {\n    type SingleChoiceAnswer,\n    takeTestAgainMutation,\n    TestContainer,\n    TestModel,\n    TestMultipleQuestion,\n    TestProgress,\n    TestScaleQuestion,\n    TestSingleChoiceQuestion,\n} from '@/entities/Test';\n\nimport { RephrasingModel } from '@/features/Rephrasing';\n\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\n\nexport const TestPage = () => {\n    useGate(TestModel.TestGate);\n    const data = useUnit(TestModel.$questions);\n    const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([\n        TestModel.$currentPage,\n        TestModel.$currentQuestion,\n        TestModel.$currentProgress,\n        TestModel.$currentValue,\n        TestModel.$isSplashScreenVisible,\n        takeTestAgainMutation.$pending,\n    ]);\n\n    const onChange = useUnit(TestModel.scaleFormFieldChanged);\n\n    const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n\n    if (!data || !question) return null;\n    if (isLoading) return <PageLoader />;\n\n    const Map: Record<string, ReactNode> = {\n        scale: (\n            <TestScaleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                value={String(value)}\n                page={page}\n                onChange={onChange}\n            />\n        ),\n        multiple_choice: question.options && (\n            <TestMultipleQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                value={isArray(value) ? value : null}\n            />\n        ),\n        single_choice: question.options && (\n            <TestSingleChoiceQuestion\n                {...question}\n                text={phrases.texts[phraseIndex] ?? ''}\n                hint={phrases.hints[phraseIndex]}\n                page={page}\n                onChange={onChange}\n                showInput={Boolean(\n                    question.options.find((el) => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input\n                )}\n                value={value as SingleChoiceAnswer}\n            />\n        ),\n    };\n\n    if (isSplashScreen) return <TestSplashScreen />;\n\n    return (\n        <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>\n    );\n};\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { isArray } from \"lodash-es\";\nimport { PageLoader } from \"@/shared/ui\";\nimport { takeTestAgainMutation, TestContainer, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from \"@/entities/Test\";\nimport { RephrasingModel } from \"@/features/Rephrasing\";\nimport { Controls, SubmitTestModal, TestSplashScreen } from \"@/widgets/Test\";\nexport const TestPage = () => {\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  if (!data || !question) return null;\n  if (isLoading) return /* @__PURE__ */ jsx(PageLoader, {});\n  const Map = {\n    scale: /* @__PURE__ */ jsx(TestScaleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], value: String(value), page, onChange }),\n    multiple_choice: question.options && /* @__PURE__ */ jsx(TestMultipleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, value: isArray(value) ? value : null }),\n    single_choice: question.options && /* @__PURE__ */ jsx(TestSingleChoiceQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, showInput: Boolean(question.options.find((el) => el.id === value?.value)?.requires_input), value })\n  };\n  if (isSplashScreen) return /* @__PURE__ */ jsx(TestSplashScreen, {});\n  return /* @__PURE__ */ jsxs(TestContainer, { children: [\n    /* @__PURE__ */ jsx(TestProgress, { value: progress, page, total: data.length }),\n    Map[question?.type],\n    /* @__PURE__ */ jsx(Controls, {}),\n    /* @__PURE__ */ jsx(SubmitTestModal, {})\n  ] });\n};\n",
      "start": 1746125081656,
      "end": 1746125081706,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TestPage/index.tsx"],
        "sourcesContent": [
          "import type { ReactNode } from 'react';\nimport { useGate, useUnit } from 'effector-react';\nimport { isArray } from 'lodash-es';\nimport { PageLoader } from '@/shared/ui';\nimport { type SingleChoiceAnswer, takeTestAgainMutation, TestContainer, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from '@/entities/Test';\nimport { RephrasingModel } from '@/features/Rephrasing';\nimport { Controls, SubmitTestModal, TestSplashScreen } from '@/widgets/Test';\nexport const TestPage = () => {\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  if (!data || !question) return null;\n  if (isLoading) return <PageLoader />;\n  const Map: Record<string, ReactNode> = {\n    scale: <TestScaleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} value={String(value)} page={page} onChange={onChange} />,\n    multiple_choice: question.options && <TestMultipleQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} value={isArray(value) ? value : null} />,\n    single_choice: question.options && <TestSingleChoiceQuestion {...question} text={phrases.texts[phraseIndex] ?? ''} hint={phrases.hints[phraseIndex]} page={page} onChange={onChange} showInput={Boolean(question.options.find(el => el.id === (value as SingleChoiceAnswer)?.value)?.requires_input)} value={value as SingleChoiceAnswer} />\n  };\n  if (isSplashScreen) return <TestSplashScreen />;\n  return <TestContainer>\n            <TestProgress value={progress} page={page} total={data.length} />\n            {Map[question?.type]}\n            <Controls />\n            <SubmitTestModal />\n        </TestContainer>;\n};"
        ],
        "mappings": "AAcwB,cAOf,YAPe;AAbxB,SAAS,SAAS,eAAe;AACjC,SAAS,eAAe;AACxB,SAAS,kBAAkB;AAC3B,SAAkC,uBAAuB,eAAe,WAAW,sBAAsB,cAAc,mBAAmB,gCAAgC;AAC1K,SAAS,uBAAuB;AAChC,SAAS,UAAU,iBAAiB,wBAAwB;AACrD,aAAM,WAAW,MAAM;AAC5B,UAAQ,UAAU,QAAQ;AAC1B,QAAM,OAAO,QAAQ,UAAU,UAAU;AACzC,QAAM,CAAC,MAAM,UAAU,UAAU,OAAO,gBAAgB,SAAS,IAAI,QAAQ,CAAC,UAAU,cAAc,UAAU,kBAAkB,UAAU,kBAAkB,UAAU,eAAe,UAAU,wBAAwB,sBAAsB,QAAQ,CAAC;AACxP,QAAM,WAAW,QAAQ,UAAU,qBAAqB;AACxD,QAAM,CAAC,aAAa,OAAO,IAAI,QAAQ,CAAC,gBAAgB,qBAAqB,gBAAgB,eAAe,CAAC;AAC7G,MAAI,CAAC,QAAQ,CAAC,SAAU,QAAO;AAC/B,MAAI,UAAW,QAAO,oBAAC,cAAW;AAClC,QAAM,MAAiC;AAAA,IACrC,OAAO,oBAAC,qBAAmB,GAAG,UAAU,MAAM,QAAQ,MAAM,WAAW,KAAK,IAAI,MAAM,QAAQ,MAAM,WAAW,GAAG,OAAO,OAAO,KAAK,GAAG,MAAY,UAAoB;AAAA,IACxK,iBAAiB,SAAS,WAAW,oBAAC,wBAAsB,GAAG,UAAU,MAAM,QAAQ,MAAM,WAAW,KAAK,IAAI,MAAM,QAAQ,MAAM,WAAW,GAAG,MAAY,UAAoB,OAAO,QAAQ,KAAK,IAAI,QAAQ,MAAM;AAAA,IACzN,eAAe,SAAS,WAAW,oBAAC,4BAA0B,GAAG,UAAU,MAAM,QAAQ,MAAM,WAAW,KAAK,IAAI,MAAM,QAAQ,MAAM,WAAW,GAAG,MAAY,UAAoB,WAAW,QAAQ,SAAS,QAAQ,KAAK,QAAM,GAAG,OAAQ,OAA8B,KAAK,GAAG,cAAc,GAAG,OAAoC;AAAA,EAC5U;AACA,MAAI,eAAgB,QAAO,oBAAC,oBAAiB;AAC7C,SAAO,qBAAC,iBACE;AAAA,wBAAC,gBAAa,OAAO,UAAU,MAAY,OAAO,KAAK,QAAQ;AAAA,IAC9D,IAAI,UAAU,IAAI;AAAA,IACnB,oBAAC,YAAS;AAAA,IACV,oBAAC,mBAAgB;AAAA,KACrB;AACR;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/pages/TestPage/index.tsx [vike:pluginModuleBanner] */\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { useGate, useUnit } from \"effector-react\";\nimport { isArray } from \"lodash-es\";\nimport { PageLoader } from \"@/shared/ui\";\nimport { takeTestAgainMutation, TestContainer, TestModel, TestMultipleQuestion, TestProgress, TestScaleQuestion, TestSingleChoiceQuestion } from \"@/entities/Test\";\nimport { RephrasingModel } from \"@/features/Rephrasing\";\nimport { Controls, SubmitTestModal, TestSplashScreen } from \"@/widgets/Test\";\nexport const TestPage = () => {\n  useGate(TestModel.TestGate);\n  const data = useUnit(TestModel.$questions);\n  const [page, question, progress, value, isSplashScreen, isLoading] = useUnit([TestModel.$currentPage, TestModel.$currentQuestion, TestModel.$currentProgress, TestModel.$currentValue, TestModel.$isSplashScreenVisible, takeTestAgainMutation.$pending]);\n  const onChange = useUnit(TestModel.scaleFormFieldChanged);\n  const [phraseIndex, phrases] = useUnit([RephrasingModel.$currentPhraseIndex, RephrasingModel.$currentPhrases]);\n  if (!data || !question) return null;\n  if (isLoading) return /* @__PURE__ */ jsx(PageLoader, {});\n  const Map = {\n    scale: /* @__PURE__ */ jsx(TestScaleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], value: String(value), page, onChange }),\n    multiple_choice: question.options && /* @__PURE__ */ jsx(TestMultipleQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, value: isArray(value) ? value : null }),\n    single_choice: question.options && /* @__PURE__ */ jsx(TestSingleChoiceQuestion, { ...question, text: phrases.texts[phraseIndex] ?? \"\", hint: phrases.hints[phraseIndex], page, onChange, showInput: Boolean(question.options.find((el) => el.id === value?.value)?.requires_input), value })\n  };\n  if (isSplashScreen) return /* @__PURE__ */ jsx(TestSplashScreen, {});\n  return /* @__PURE__ */ jsxs(TestContainer, { children: [\n    /* @__PURE__ */ jsx(TestProgress, { value: progress, page, total: data.length }),\n    Map[question?.type],\n    /* @__PURE__ */ jsx(Controls, {}),\n    /* @__PURE__ */ jsx(SubmitTestModal, {})\n  ] });\n};\n",
      "start": 1746125081706,
      "end": 1746125081706,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/pages/TestPage/index.tsx"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvhH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACdlnhS,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC;"
      }
    }
  ]
}
