{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TypePage/index.tsx",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Fragment } from 'react';\nimport { Box, Container } from '@mantine/core';\nimport { useList, useUnit } from 'effector-react';\nimport { usePageContext } from 'vike-react/usePageContext';\n\nimport { InnerContainer } from '@/shared/ui';\n\nimport {\n    Banner,\n    contentResolver,\n    findBannerIndex,\n    getPersonalityTypeQuery,\n    ReportHeader,\n    ReportModel,\n    TYPE_TO_COLOR_MAP,\n} from '@/entities/Report';\n\nimport { SendReportEmail } from '@/features/SendReportEmail';\n\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { ShowFullStructure } from '@/widgets/ShowFullStructure';\n\nimport s from './TypePage.module.css';\n\nexport const TypePage = () => {\n    const { data } = useUnit(getPersonalityTypeQuery);\n    const {\n        routeParams: { type },\n    } = usePageContext();\n\n    const currentColor = TYPE_TO_COLOR_MAP[type ?? data?.mbti_type];\n\n    const beforeBannerContent = useList(ReportModel.$reportContent, ({ content }) => {\n        const end = findBannerIndex(content);\n\n        return content.slice(0, end).map((el, idx) => (\n            <div key={el.type + idx} className={s.block}>\n                {el.content.map((currentContent, idx) => (\n                    <Fragment key={currentContent.type + idx}>\n                        {contentResolver({ content: currentContent, color: currentColor })}\n                    </Fragment>\n                ))}\n            </div>\n        ));\n    });\n\n    const afterBannerContent = useList(ReportModel.$reportContent, ({ content }) => {\n        const end = findBannerIndex(content);\n\n        return content.slice(end).map((el, elIdx) => (\n            <div key={el.type + elIdx} className={s.block}>\n                {el.content.map((currentContent, idx) => (\n                    <Fragment key={currentContent.type + idx}>\n                        {contentResolver({\n                            content: currentContent,\n                            color: currentColor,\n                            slots: {\n                                subscribeEmail: <SendReportEmail type='block' />,\n                            },\n                        })}\n                    </Fragment>\n                ))}\n            </div>\n        ));\n    });\n\n    if (!data) return null;\n\n    return (\n        <Box component='section'>\n            <Container>\n                <ReportHeader\n                    name={data.title}\n                    preTitle='Тип личности'\n                    type={type ?? data.mbti_type}\n                    typeToColorMapper={TYPE_TO_COLOR_MAP}\n                />\n                <InnerContainer>\n                    <ShowFullStructure />\n                    <Box>{beforeBannerContent}</Box>\n                </InnerContainer>\n                <Banner\n                    color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]}\n                    image={`/types/circles/${type ?? data?.mbti_type}`}\n                    actionSlot={CALL_TO_ACTION['buyNowAndNavigateToFullStructure']}\n                />\n                <InnerContainer>{afterBannerContent}</InnerContainer>\n                <Banner\n                    title='Узнайте свой тип личности'\n                    description='Наш тест — это мощный инструмент для самопознания и развития, который позволит вам глубже понять свои сильные стороны, определить области для роста и осознанно двигаться вперёд. Вы сами решаете, как использовать полученные знания и рекомендации, чтобы раскрыть свой потенциал и достичь поставленных целей.'\n                    color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]}\n                    actionSlot={CALL_TO_ACTION['redirectToTest']}\n                    image={{\n                        src: `/types/circles/${type ?? data?.mbti_type}`,\n                        extra: '_2',\n                    }}\n                />\n            </Container>\n        </Box>\n    );\n};\n",
      "start": 1746125081637,
      "end": 1746125081665,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { Fragment } from 'react';\nimport { Box, Container } from '@mantine/core';\nimport { useList, useUnit } from 'effector-react';\nimport { usePageContext } from 'vike-react/usePageContext';\nimport { InnerContainer } from '@/shared/ui';\nimport { Banner, contentResolver, findBannerIndex, getPersonalityTypeQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nimport { SendReportEmail } from '@/features/SendReportEmail';\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { ShowFullStructure } from '@/widgets/ShowFullStructure';\nimport s from './TypePage.module.css';\nexport const TypePage = () => {\n  const {\n    data\n  } = useUnit(getPersonalityTypeQuery);\n  const {\n    routeParams: {\n      type\n    }\n  } = usePageContext();\n  const currentColor = TYPE_TO_COLOR_MAP[type ?? data?.mbti_type];\n  const beforeBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(0, end).map((el, idx) => <div key={el.type + idx} className={s.block}>\n                {el.content.map((currentContent, idx) => <Fragment key={currentContent.type + idx}>\n                        {contentResolver({\n          content: currentContent,\n          color: currentColor\n        })}\n                    </Fragment>)}\n            </div>);\n  });\n  const afterBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(end).map((el, elIdx) => <div key={el.type + elIdx} className={s.block}>\n                {el.content.map((currentContent, idx) => <Fragment key={currentContent.type + idx}>\n                        {contentResolver({\n          content: currentContent,\n          color: currentColor,\n          slots: {\n            subscribeEmail: <SendReportEmail type='block' />\n          }\n        })}\n                    </Fragment>)}\n            </div>);\n  });\n  if (!data) return null;\n  return <Box component='section'>\n            <Container>\n                <ReportHeader name={data.title} preTitle='Тип личности' type={type ?? data.mbti_type} typeToColorMapper={TYPE_TO_COLOR_MAP} />\n                <InnerContainer>\n                    <ShowFullStructure />\n                    <Box>{beforeBannerContent}</Box>\n                </InnerContainer>\n                <Banner color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]} image={`/types/circles/${type ?? data?.mbti_type}`} actionSlot={CALL_TO_ACTION['buyNowAndNavigateToFullStructure']} />\n                <InnerContainer>{afterBannerContent}</InnerContainer>\n                <Banner title='Узнайте свой тип личности' description='Наш тест — это мощный инструмент для самопознания и развития, который позволит вам глубже понять свои сильные стороны, определить области для роста и осознанно двигаться вперёд. Вы сами решаете, как использовать полученные знания и рекомендации, чтобы раскрыть свой потенциал и достичь поставленных целей.' color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]} actionSlot={CALL_TO_ACTION['redirectToTest']} image={{\n        src: `/types/circles/${type ?? data?.mbti_type}`,\n        extra: '_2'\n      }} />\n            </Container>\n        </Box>;\n};",
      "start": 1746125081665,
      "end": 1746125081667,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "Fragment",
          "Box",
          "Container",
          "useList",
          "useUnit",
          "usePageContext",
          "InnerContainer",
          "Banner",
          "contentResolver",
          "findBannerIndex",
          "getPersonalityTypeQuery",
          "ReportHeader",
          "ReportModel",
          "TYPE_TO_COLOR_MAP",
          "SendReportEmail",
          "CALL_TO_ACTION",
          "ShowFullStructure",
          "s",
          "TypePage",
          "data",
          "routeParams",
          "type",
          "currentColor",
          "mbti_type",
          "beforeBannerContent",
          "$reportContent",
          "content",
          "end",
          "slice",
          "map",
          "el",
          "idx",
          "block",
          "currentContent",
          "color",
          "afterBannerContent",
          "elIdx",
          "slots",
          "subscribeEmail",
          "title",
          "src",
          "extra"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TypePage/index.tsx"],
        "sourcesContent": [
          "import { Fragment } from 'react';\nimport { Box, Container } from '@mantine/core';\nimport { useList, useUnit } from 'effector-react';\nimport { usePageContext } from 'vike-react/usePageContext';\n\nimport { InnerContainer } from '@/shared/ui';\n\nimport {\n    Banner,\n    contentResolver,\n    findBannerIndex,\n    getPersonalityTypeQuery,\n    ReportHeader,\n    ReportModel,\n    TYPE_TO_COLOR_MAP,\n} from '@/entities/Report';\n\nimport { SendReportEmail } from '@/features/SendReportEmail';\n\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { ShowFullStructure } from '@/widgets/ShowFullStructure';\n\nimport s from './TypePage.module.css';\n\nexport const TypePage = () => {\n    const { data } = useUnit(getPersonalityTypeQuery);\n    const {\n        routeParams: { type },\n    } = usePageContext();\n\n    const currentColor = TYPE_TO_COLOR_MAP[type ?? data?.mbti_type];\n\n    const beforeBannerContent = useList(ReportModel.$reportContent, ({ content }) => {\n        const end = findBannerIndex(content);\n\n        return content.slice(0, end).map((el, idx) => (\n            <div key={el.type + idx} className={s.block}>\n                {el.content.map((currentContent, idx) => (\n                    <Fragment key={currentContent.type + idx}>\n                        {contentResolver({ content: currentContent, color: currentColor })}\n                    </Fragment>\n                ))}\n            </div>\n        ));\n    });\n\n    const afterBannerContent = useList(ReportModel.$reportContent, ({ content }) => {\n        const end = findBannerIndex(content);\n\n        return content.slice(end).map((el, elIdx) => (\n            <div key={el.type + elIdx} className={s.block}>\n                {el.content.map((currentContent, idx) => (\n                    <Fragment key={currentContent.type + idx}>\n                        {contentResolver({\n                            content: currentContent,\n                            color: currentColor,\n                            slots: {\n                                subscribeEmail: <SendReportEmail type='block' />,\n                            },\n                        })}\n                    </Fragment>\n                ))}\n            </div>\n        ));\n    });\n\n    if (!data) return null;\n\n    return (\n        <Box component='section'>\n            <Container>\n                <ReportHeader\n                    name={data.title}\n                    preTitle='Тип личности'\n                    type={type ?? data.mbti_type}\n                    typeToColorMapper={TYPE_TO_COLOR_MAP}\n                />\n                <InnerContainer>\n                    <ShowFullStructure />\n                    <Box>{beforeBannerContent}</Box>\n                </InnerContainer>\n                <Banner\n                    color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]}\n                    image={`/types/circles/${type ?? data?.mbti_type}`}\n                    actionSlot={CALL_TO_ACTION['buyNowAndNavigateToFullStructure']}\n                />\n                <InnerContainer>{afterBannerContent}</InnerContainer>\n                <Banner\n                    title='Узнайте свой тип личности'\n                    description='Наш тест — это мощный инструмент для самопознания и развития, который позволит вам глубже понять свои сильные стороны, определить области для роста и осознанно двигаться вперёд. Вы сами решаете, как использовать полученные знания и рекомендации, чтобы раскрыть свой потенциал и достичь поставленных целей.'\n                    color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]}\n                    actionSlot={CALL_TO_ACTION['redirectToTest']}\n                    image={{\n                        src: `/types/circles/${type ?? data?.mbti_type}`,\n                        extra: '_2',\n                    }}\n                />\n            </Container>\n        </Box>\n    );\n};\n"
        ],
        "mappings": "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",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Fragment } from \"react\";\nimport { Box, Container } from \"@mantine/core\";\nimport { useList, useUnit } from \"effector-react\";\nimport { usePageContext } from \"vike-react/usePageContext\";\nimport { InnerContainer } from \"@/shared/ui\";\nimport { Banner, contentResolver, findBannerIndex, getPersonalityTypeQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from \"@/entities/Report\";\nimport { SendReportEmail } from \"@/features/SendReportEmail\";\nimport { CALL_TO_ACTION } from \"@/widgets/CTA\";\nimport { ShowFullStructure } from \"@/widgets/ShowFullStructure\";\nimport s from \"./TypePage.module.css\";\nexport const TypePage = () => {\n  const {\n    data\n  } = useUnit(getPersonalityTypeQuery);\n  const {\n    routeParams: {\n      type\n    }\n  } = usePageContext();\n  const currentColor = TYPE_TO_COLOR_MAP[type ?? data?.mbti_type];\n  const beforeBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(0, end).map((el, idx) => /* @__PURE__ */ jsx(\"div\", { className: s.block, children: el.content.map((currentContent, idx2) => /* @__PURE__ */ jsx(Fragment, { children: contentResolver({\n      content: currentContent,\n      color: currentColor\n    }) }, currentContent.type + idx2)) }, el.type + idx));\n  });\n  const afterBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(end).map((el, elIdx) => /* @__PURE__ */ jsx(\"div\", { className: s.block, children: el.content.map((currentContent, idx) => /* @__PURE__ */ jsx(Fragment, { children: contentResolver({\n      content: currentContent,\n      color: currentColor,\n      slots: {\n        subscribeEmail: /* @__PURE__ */ jsx(SendReportEmail, { type: \"block\" })\n      }\n    }) }, currentContent.type + idx)) }, el.type + elIdx));\n  });\n  if (!data) return null;\n  return /* @__PURE__ */ jsx(Box, { component: \"section\", children: /* @__PURE__ */ jsxs(Container, { children: [\n    /* @__PURE__ */ jsx(ReportHeader, { name: data.title, preTitle: \"Тип личности\", type: type ?? data.mbti_type, typeToColorMapper: TYPE_TO_COLOR_MAP }),\n    /* @__PURE__ */ jsxs(InnerContainer, { children: [\n      /* @__PURE__ */ jsx(ShowFullStructure, {}),\n      /* @__PURE__ */ jsx(Box, { children: beforeBannerContent })\n    ] }),\n    /* @__PURE__ */ jsx(Banner, { color: TYPE_TO_COLOR_MAP[type ?? data?.mbti_type], image: `/types/circles/${type ?? data?.mbti_type}`, actionSlot: CALL_TO_ACTION[\"buyNowAndNavigateToFullStructure\"] }),\n    /* @__PURE__ */ jsx(InnerContainer, { children: afterBannerContent }),\n    /* @__PURE__ */ jsx(Banner, { title: \"Узнайте свой тип личности\", description: \"Наш тест — это мощный инструмент для самопознания и развития, который позволит вам глубже понять свои сильные стороны, определить области для роста и осознанно двигаться вперёд. Вы сами решаете, как использовать полученные знания и рекомендации, чтобы раскрыть свой потенциал и достичь поставленных целей.\", color: TYPE_TO_COLOR_MAP[type ?? data?.mbti_type], actionSlot: CALL_TO_ACTION[\"redirectToTest\"], image: {\n      src: `/types/circles/${type ?? data?.mbti_type}`,\n      extra: \"_2\"\n    } })\n  ] }) });\n};\n",
      "start": 1746125081667,
      "end": 1746125081754,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/pages/TypePage/index.tsx"],
        "sourcesContent": [
          "import { Fragment } from 'react';\nimport { Box, Container } from '@mantine/core';\nimport { useList, useUnit } from 'effector-react';\nimport { usePageContext } from 'vike-react/usePageContext';\nimport { InnerContainer } from '@/shared/ui';\nimport { Banner, contentResolver, findBannerIndex, getPersonalityTypeQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from '@/entities/Report';\nimport { SendReportEmail } from '@/features/SendReportEmail';\nimport { CALL_TO_ACTION } from '@/widgets/CTA';\nimport { ShowFullStructure } from '@/widgets/ShowFullStructure';\nimport s from './TypePage.module.css';\nexport const TypePage = () => {\n  const {\n    data\n  } = useUnit(getPersonalityTypeQuery);\n  const {\n    routeParams: {\n      type\n    }\n  } = usePageContext();\n  const currentColor = TYPE_TO_COLOR_MAP[type ?? data?.mbti_type];\n  const beforeBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(0, end).map((el, idx) => <div key={el.type + idx} className={s.block}>\n                {el.content.map((currentContent, idx) => <Fragment key={currentContent.type + idx}>\n                        {contentResolver({\n          content: currentContent,\n          color: currentColor\n        })}\n                    </Fragment>)}\n            </div>);\n  });\n  const afterBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(end).map((el, elIdx) => <div key={el.type + elIdx} className={s.block}>\n                {el.content.map((currentContent, idx) => <Fragment key={currentContent.type + idx}>\n                        {contentResolver({\n          content: currentContent,\n          color: currentColor,\n          slots: {\n            subscribeEmail: <SendReportEmail type='block' />\n          }\n        })}\n                    </Fragment>)}\n            </div>);\n  });\n  if (!data) return null;\n  return <Box component='section'>\n            <Container>\n                <ReportHeader name={data.title} preTitle='Тип личности' type={type ?? data.mbti_type} typeToColorMapper={TYPE_TO_COLOR_MAP} />\n                <InnerContainer>\n                    <ShowFullStructure />\n                    <Box>{beforeBannerContent}</Box>\n                </InnerContainer>\n                <Banner color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]} image={`/types/circles/${type ?? data?.mbti_type}`} actionSlot={CALL_TO_ACTION['buyNowAndNavigateToFullStructure']} />\n                <InnerContainer>{afterBannerContent}</InnerContainer>\n                <Banner title='Узнайте свой тип личности' description='Наш тест — это мощный инструмент для самопознания и развития, который позволит вам глубже понять свои сильные стороны, определить области для роста и осознанно двигаться вперёд. Вы сами решаете, как использовать полученные знания и рекомендации, чтобы раскрыть свой потенциал и достичь поставленных целей.' color={TYPE_TO_COLOR_MAP[type ?? data?.mbti_type]} actionSlot={CALL_TO_ACTION['redirectToTest']} image={{\n        src: `/types/circles/${type ?? data?.mbti_type}`,\n        extra: '_2'\n      }} />\n            </Container>\n        </Box>;\n};"
        ],
        "mappings": "AAyByD,cA4BzC,YA5ByC;AAzBzD,SAAS,gBAAgB;AACzB,SAAS,KAAK,iBAAiB;AAC/B,SAAS,SAAS,eAAe;AACjC,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAC/B,SAAS,QAAQ,iBAAiB,iBAAiB,yBAAyB,cAAc,aAAa,yBAAyB;AAChI,SAAS,uBAAuB;AAChC,SAAS,sBAAsB;AAC/B,SAAS,yBAAyB;AAClC,OAAO,OAAO;AACP,aAAM,WAAW,MAAM;AAC5B,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,QAAQ,uBAAuB;AACnC,QAAM;AAAA,IACJ,aAAa;AAAA,MACX;AAAA,IACF;AAAA,EACF,IAAI,eAAe;AACnB,QAAM,eAAe,kBAAkB,QAAQ,MAAM,SAAS;AAC9D,QAAM,sBAAsB,QAAQ,YAAY,gBAAgB,CAAC;AAAA,IAC/D;AAAA,EACF,MAAM;AACJ,UAAM,MAAM,gBAAgB,OAAO;AACnC,WAAO,QAAQ,MAAM,GAAG,GAAG,EAAE,IAAI,CAAC,IAAI,QAAQ,oBAAC,SAAwB,WAAW,EAAE,OACvE,aAAG,QAAQ,IAAI,CAAC,gBAAgBA,SAAQ,oBAAC,YACjC,0BAAgB;AAAA,MAC/B,SAAS;AAAA,MACT,OAAO;AAAA,IACT,CAAC,KAJ+D,eAAe,OAAOA,IAK1E,CAAW,KAN6B,GAAG,OAAO,GAO1D,CAAM;AAAA,EAChB,CAAC;AACD,QAAM,qBAAqB,QAAQ,YAAY,gBAAgB,CAAC;AAAA,IAC9D;AAAA,EACF,MAAM;AACJ,UAAM,MAAM,gBAAgB,OAAO;AACnC,WAAO,QAAQ,MAAM,GAAG,EAAE,IAAI,CAAC,IAAI,UAAU,oBAAC,SAA0B,WAAW,EAAE,OACxE,aAAG,QAAQ,IAAI,CAAC,gBAAgB,QAAQ,oBAAC,YACjC,0BAAgB;AAAA,MAC/B,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,QACL,gBAAgB,oBAAC,mBAAgB,MAAK,SAAQ;AAAA,MAChD;AAAA,IACF,CAAC,KAP+D,eAAe,OAAO,GAQ1E,CAAW,KAT4B,GAAG,OAAO,KAUzD,CAAM;AAAA,EAChB,CAAC;AACD,MAAI,CAAC,KAAM,QAAO;AAClB,SAAO,oBAAC,OAAI,WAAU,WACZ,+BAAC,aACG;AAAA,wBAAC,gBAAa,MAAM,KAAK,OAAO,UAAS,gBAAe,MAAM,QAAQ,KAAK,WAAW,mBAAmB,mBAAmB;AAAA,IAC5H,qBAAC,kBACG;AAAA,0BAAC,qBAAkB;AAAA,MACnB,oBAAC,OAAK,+BAAoB;AAAA,OAC9B;AAAA,IACA,oBAAC,UAAO,OAAO,kBAAkB,QAAQ,MAAM,SAAS,GAAG,OAAO,kBAAkB,QAAQ,MAAM,SAAS,IAAI,YAAY,eAAe,kCAAkC,GAAG;AAAA,IAC/K,oBAAC,kBAAgB,8BAAmB;AAAA,IACpC,oBAAC,UAAO,OAAM,6BAA4B,aAAY,qTAAoT,OAAO,kBAAkB,QAAQ,MAAM,SAAS,GAAG,YAAY,eAAe,gBAAgB,GAAG,OAAO;AAAA,MAC1d,KAAK,kBAAkB,QAAQ,MAAM,SAAS;AAAA,MAC9C,OAAO;AAAA,IACT,GAAG;AAAA,KACG,GACJ;AACR;",
        "names": ["idx"]
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/pages/TypePage/index.tsx [vike:pluginModuleBanner] */\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nimport { Fragment } from \"react\";\nimport { Box, Container } from \"@mantine/core\";\nimport { useList, useUnit } from \"effector-react\";\nimport { usePageContext } from \"vike-react/usePageContext\";\nimport { InnerContainer } from \"@/shared/ui\";\nimport { Banner, contentResolver, findBannerIndex, getPersonalityTypeQuery, ReportHeader, ReportModel, TYPE_TO_COLOR_MAP } from \"@/entities/Report\";\nimport { SendReportEmail } from \"@/features/SendReportEmail\";\nimport { CALL_TO_ACTION } from \"@/widgets/CTA\";\nimport { ShowFullStructure } from \"@/widgets/ShowFullStructure\";\nimport s from \"./TypePage.module.css\";\nexport const TypePage = () => {\n  const {\n    data\n  } = useUnit(getPersonalityTypeQuery);\n  const {\n    routeParams: {\n      type\n    }\n  } = usePageContext();\n  const currentColor = TYPE_TO_COLOR_MAP[type ?? data?.mbti_type];\n  const beforeBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(0, end).map((el, idx) => /* @__PURE__ */ jsx(\"div\", { className: s.block, children: el.content.map((currentContent, idx2) => /* @__PURE__ */ jsx(Fragment, { children: contentResolver({\n      content: currentContent,\n      color: currentColor\n    }) }, currentContent.type + idx2)) }, el.type + idx));\n  });\n  const afterBannerContent = useList(ReportModel.$reportContent, ({\n    content\n  }) => {\n    const end = findBannerIndex(content);\n    return content.slice(end).map((el, elIdx) => /* @__PURE__ */ jsx(\"div\", { className: s.block, children: el.content.map((currentContent, idx) => /* @__PURE__ */ jsx(Fragment, { children: contentResolver({\n      content: currentContent,\n      color: currentColor,\n      slots: {\n        subscribeEmail: /* @__PURE__ */ jsx(SendReportEmail, { type: \"block\" })\n      }\n    }) }, currentContent.type + idx)) }, el.type + elIdx));\n  });\n  if (!data) return null;\n  return /* @__PURE__ */ jsx(Box, { component: \"section\", children: /* @__PURE__ */ jsxs(Container, { children: [\n    /* @__PURE__ */ jsx(ReportHeader, { name: data.title, preTitle: \"Тип личности\", type: type ?? data.mbti_type, typeToColorMapper: TYPE_TO_COLOR_MAP }),\n    /* @__PURE__ */ jsxs(InnerContainer, { children: [\n      /* @__PURE__ */ jsx(ShowFullStructure, {}),\n      /* @__PURE__ */ jsx(Box, { children: beforeBannerContent })\n    ] }),\n    /* @__PURE__ */ jsx(Banner, { color: TYPE_TO_COLOR_MAP[type ?? data?.mbti_type], image: `/types/circles/${type ?? data?.mbti_type}`, actionSlot: CALL_TO_ACTION[\"buyNowAndNavigateToFullStructure\"] }),\n    /* @__PURE__ */ jsx(InnerContainer, { children: afterBannerContent }),\n    /* @__PURE__ */ jsx(Banner, { title: \"Узнайте свой тип личности\", description: \"Наш тест — это мощный инструмент для самопознания и развития, который позволит вам глубже понять свои сильные стороны, определить области для роста и осознанно двигаться вперёд. Вы сами решаете, как использовать полученные знания и рекомендации, чтобы раскрыть свой потенциал и достичь поставленных целей.\", color: TYPE_TO_COLOR_MAP[type ?? data?.mbti_type], actionSlot: CALL_TO_ACTION[\"redirectToTest\"], image: {\n      src: `/types/circles/${type ?? data?.mbti_type}`,\n      extra: \"_2\"\n    } })\n  ] }) });\n};\n",
      "start": 1746125081754,
      "end": 1746125081754,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/pages/TypePage/index.tsx"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjnJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxhN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACbxhH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC;"
      }
    }
  ]
}
