{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/HelpForm/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { notifications } from '@mantine/notifications';\nimport { createEffect, createEvent, createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\n\nimport { atom } from '@/shared/factories';\n\nimport { sendIssueMutation } from '../api';\nimport type { HelpFormProps } from './types';\n\nexport const HelpFormModel = atom(() => {\n    const HelpFormGate = createGate();\n    const $isFormSent = createStore(false);\n    const sentFormChanged = createEvent();\n    const submitHelpForm = createEvent<HelpFormProps>();\n    const sendHelpFormFx = createEffect(() => {\n        notifications.show({\n            title: 'Успешно!',\n            message: 'Ваш вопрос отправлен',\n        });\n    });\n\n    sample({\n        clock: sentFormChanged,\n        source: $isFormSent,\n        fn: (isFormSent) => !isFormSent,\n        target: $isFormSent,\n    });\n\n    sample({\n        clock: submitHelpForm,\n        target: [sendIssueMutation.start, sendHelpFormFx],\n    });\n\n    sample({\n        clock: sendIssueMutation.finished.success,\n        fn: () => true,\n        target: $isFormSent,\n    });\n\n    sample({\n        clock: HelpFormGate.close,\n        fn: () => false,\n        target: $isFormSent,\n    });\n\n    return {\n        HelpFormGate,\n        sendHelpFormFx,\n        $isFormSent,\n        sentFormChanged,\n        submitHelpForm,\n    };\n});\n",
      "start": 1750278467167,
      "end": 1750278467201,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { notifications } from '@mantine/notifications';\nimport { createEffect, createEvent, createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { atom } from '@/shared/factories';\nimport { sendIssueMutation } from '../api';\nimport type { HelpFormProps } from './types';\nexport const HelpFormModel = atom(() => {\n  const HelpFormGate = createGate({\n    and: [],\n    or: {\n      name: \"HelpFormGate\",\n      sid: \"qx6n9m\"\n    }\n  });\n  const $isFormSent = createStore(false, {\n    name: \"$isFormSent\",\n    sid: \"-xhd2bg\"\n  });\n  const sentFormChanged = createEvent({\n    name: \"sentFormChanged\",\n    sid: \"txb7m5\"\n  });\n  const submitHelpForm = createEvent<HelpFormProps>({\n    name: \"submitHelpForm\",\n    sid: \"-yplmlq\"\n  });\n  const sendHelpFormFx = createEffect(() => {\n    notifications.show({\n      title: 'Успешно!',\n      message: 'Ваш вопрос отправлен'\n    });\n  }, {\n    name: \"sendHelpFormFx\",\n    sid: \"-z4im3x\"\n  });\n  sample({\n    and: [{\n      clock: sentFormChanged,\n      source: $isFormSent,\n      fn: isFormSent => !isFormSent,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-5hk2xj\"\n    }\n  });\n  sample({\n    and: [{\n      clock: submitHelpForm,\n      target: [sendIssueMutation.start, sendHelpFormFx]\n    }],\n    or: {\n      sid: \"-5dpis0\"\n    }\n  });\n  sample({\n    and: [{\n      clock: sendIssueMutation.finished.success,\n      fn: () => true,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4zevcm\"\n    }\n  });\n  sample({\n    and: [{\n      clock: HelpFormGate.close,\n      fn: () => false,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4kkfbv\"\n    }\n  });\n  return {\n    HelpFormGate,\n    sendHelpFormFx,\n    $isFormSent,\n    sentFormChanged,\n    submitHelpForm\n  };\n});",
      "start": 1750278467201,
      "end": 1750278467202,
      "order": "pre-normal",
      "sourcemaps": {
        "version": 3,
        "names": [
          "notifications",
          "createEffect",
          "createEvent",
          "createStore",
          "sample",
          "createGate",
          "atom",
          "sendIssueMutation",
          "HelpFormProps",
          "HelpFormModel",
          "HelpFormGate",
          "and",
          "or",
          "name",
          "sid",
          "$isFormSent",
          "sentFormChanged",
          "submitHelpForm",
          "sendHelpFormFx",
          "show",
          "title",
          "message",
          "clock",
          "source",
          "fn",
          "isFormSent",
          "target",
          "start",
          "finished",
          "success",
          "close"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/HelpForm/model/index.ts"],
        "sourcesContent": [
          "import { notifications } from '@mantine/notifications';\nimport { createEffect, createEvent, createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\n\nimport { atom } from '@/shared/factories';\n\nimport { sendIssueMutation } from '../api';\nimport type { HelpFormProps } from './types';\n\nexport const HelpFormModel = atom(() => {\n    const HelpFormGate = createGate();\n    const $isFormSent = createStore(false);\n    const sentFormChanged = createEvent();\n    const submitHelpForm = createEvent<HelpFormProps>();\n    const sendHelpFormFx = createEffect(() => {\n        notifications.show({\n            title: 'Успешно!',\n            message: 'Ваш вопрос отправлен',\n        });\n    });\n\n    sample({\n        clock: sentFormChanged,\n        source: $isFormSent,\n        fn: (isFormSent) => !isFormSent,\n        target: $isFormSent,\n    });\n\n    sample({\n        clock: submitHelpForm,\n        target: [sendIssueMutation.start, sendHelpFormFx],\n    });\n\n    sample({\n        clock: sendIssueMutation.finished.success,\n        fn: () => true,\n        target: $isFormSent,\n    });\n\n    sample({\n        clock: HelpFormGate.close,\n        fn: () => false,\n        target: $isFormSent,\n    });\n\n    return {\n        HelpFormGate,\n        sendHelpFormFx,\n        $isFormSent,\n        sentFormChanged,\n        submitHelpForm,\n    };\n});\n"
        ],
        "mappings": "AAAA,SAASA,aAAa,QAAQ,wBAAwB;AACtD,SAASC,YAAY,EAAEC,WAAW,EAAEC,WAAW,EAAEC,MAAM,QAAQ,UAAU;AACzE,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,SAASC,IAAI,QAAQ,oBAAoB;AAEzC,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,cAAcC,aAAa,QAAQ,SAAS;AAE5C,OAAO,MAAMC,aAAa,GAAGH,IAAI,CAAC,MAAM;EACpC,MAAMI,YAAY,GAAGL,UAAU;IAAAM,GAAA;IAAAC,EAAA;MAAAC,IAAA;MAAAC,GAAA;IAAA;EAAA,CAAC,CAAC;EACjC,MAAMC,WAAW,GAAGZ,WAAW,CAAC,KAAK;IAAAU,IAAA;IAAAC,GAAA;EAAA,EAAC;EACtC,MAAME,eAAe,GAAGd,WAAW;IAAAW,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;EACrC,MAAMG,cAAc,GAAGf,WAAW,CAACM,aAAa,CAAC;IAAAK,IAAA;IAAAC,GAAA;EAAA,CAAC,CAAC;EACnD,MAAMI,cAAc,GAAGjB,YAAY,CAAC,MAAM;IACtCD,aAAa,CAACmB,IAAI,CAAC;MACfC,KAAK,EAAE,UAAU;MACjBC,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC;IAAAR,IAAA;IAAAC,GAAA;EAAA,EAAC;EAEFV,MAAM;IAAAO,GAAA,GAAC;MACHW,KAAK,EAAEN,eAAe;MACtBO,MAAM,EAAER,WAAW;MACnBS,EAAE,EAAGC,UAAU,IAAK,CAACA,UAAU;MAC/BC,MAAM,EAAEX;IACZ,CAAC;IAAAH,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;EAEFV,MAAM;IAAAO,GAAA,GAAC;MACHW,KAAK,EAAEL,cAAc;MACrBS,MAAM,EAAE,CAACnB,iBAAiB,CAACoB,KAAK,EAAET,cAAc;IACpD,CAAC;IAAAN,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;EAEFV,MAAM;IAAAO,GAAA,GAAC;MACHW,KAAK,EAAEf,iBAAiB,CAACqB,QAAQ,CAACC,OAAO;MACzCL,EAAE,EAAEA,CAAA,KAAM,IAAI;MACdE,MAAM,EAAEX;IACZ,CAAC;IAAAH,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;EAEFV,MAAM;IAAAO,GAAA,GAAC;MACHW,KAAK,EAAEZ,YAAY,CAACoB,KAAK;MACzBN,EAAE,EAAEA,CAAA,KAAM,KAAK;MACfE,MAAM,EAAEX;IACZ,CAAC;IAAAH,EAAA;MAAAE,GAAA;IAAA;EAAA,EAAC;EAEF,OAAO;IACHJ,YAAY;IACZQ,cAAc;IACdH,WAAW;IACXC,eAAe;IACfC;EACJ,CAAC;AACL,CAAC,CAAC",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { notifications } from \"@mantine/notifications\";\nimport { createEffect, createEvent, createStore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { atom } from \"@/shared/factories\";\nimport { sendIssueMutation } from \"../api\";\nexport const HelpFormModel = atom(() => {\n  const HelpFormGate = createGate({\n    and: [],\n    or: {\n      name: \"HelpFormGate\",\n      sid: \"qx6n9m\"\n    }\n  });\n  const $isFormSent = createStore(false, {\n    name: \"$isFormSent\",\n    sid: \"-xhd2bg\"\n  });\n  const sentFormChanged = createEvent({\n    name: \"sentFormChanged\",\n    sid: \"txb7m5\"\n  });\n  const submitHelpForm = createEvent({\n    name: \"submitHelpForm\",\n    sid: \"-yplmlq\"\n  });\n  const sendHelpFormFx = createEffect(() => {\n    notifications.show({\n      title: \"Успешно!\",\n      message: \"Ваш вопрос отправлен\"\n    });\n  }, {\n    name: \"sendHelpFormFx\",\n    sid: \"-z4im3x\"\n  });\n  sample({\n    and: [{\n      clock: sentFormChanged,\n      source: $isFormSent,\n      fn: (isFormSent) => !isFormSent,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-5hk2xj\"\n    }\n  });\n  sample({\n    and: [{\n      clock: submitHelpForm,\n      target: [sendIssueMutation.start, sendHelpFormFx]\n    }],\n    or: {\n      sid: \"-5dpis0\"\n    }\n  });\n  sample({\n    and: [{\n      clock: sendIssueMutation.finished.success,\n      fn: () => true,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4zevcm\"\n    }\n  });\n  sample({\n    and: [{\n      clock: HelpFormGate.close,\n      fn: () => false,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4kkfbv\"\n    }\n  });\n  return {\n    HelpFormGate,\n    sendHelpFormFx,\n    $isFormSent,\n    sentFormChanged,\n    submitHelpForm\n  };\n});\n",
      "start": 1750278467202,
      "end": 1750278467415,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/HelpForm/model/index.ts"],
        "sourcesContent": [
          "import { notifications } from '@mantine/notifications';\nimport { createEffect, createEvent, createStore, sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { atom } from '@/shared/factories';\nimport { sendIssueMutation } from '../api';\nimport type { HelpFormProps } from './types';\nexport const HelpFormModel = atom(() => {\n  const HelpFormGate = createGate({\n    and: [],\n    or: {\n      name: \"HelpFormGate\",\n      sid: \"qx6n9m\"\n    }\n  });\n  const $isFormSent = createStore(false, {\n    name: \"$isFormSent\",\n    sid: \"-xhd2bg\"\n  });\n  const sentFormChanged = createEvent({\n    name: \"sentFormChanged\",\n    sid: \"txb7m5\"\n  });\n  const submitHelpForm = createEvent<HelpFormProps>({\n    name: \"submitHelpForm\",\n    sid: \"-yplmlq\"\n  });\n  const sendHelpFormFx = createEffect(() => {\n    notifications.show({\n      title: 'Успешно!',\n      message: 'Ваш вопрос отправлен'\n    });\n  }, {\n    name: \"sendHelpFormFx\",\n    sid: \"-z4im3x\"\n  });\n  sample({\n    and: [{\n      clock: sentFormChanged,\n      source: $isFormSent,\n      fn: isFormSent => !isFormSent,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-5hk2xj\"\n    }\n  });\n  sample({\n    and: [{\n      clock: submitHelpForm,\n      target: [sendIssueMutation.start, sendHelpFormFx]\n    }],\n    or: {\n      sid: \"-5dpis0\"\n    }\n  });\n  sample({\n    and: [{\n      clock: sendIssueMutation.finished.success,\n      fn: () => true,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4zevcm\"\n    }\n  });\n  sample({\n    and: [{\n      clock: HelpFormGate.close,\n      fn: () => false,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4kkfbv\"\n    }\n  });\n  return {\n    HelpFormGate,\n    sendHelpFormFx,\n    $isFormSent,\n    sentFormChanged,\n    submitHelpForm\n  };\n});"
        ],
        "mappings": "AAAA,SAAS,qBAAqB;AAC9B,SAAS,cAAc,aAAa,aAAa,cAAc;AAC/D,SAAS,kBAAkB;AAC3B,SAAS,YAAY;AACrB,SAAS,yBAAyB;AAE3B,aAAM,gBAAgB,KAAK,MAAM;AACtC,QAAM,eAAe,WAAW;AAAA,IAC9B,KAAK,CAAC;AAAA,IACN,IAAI;AAAA,MACF,MAAM;AAAA,MACN,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,QAAM,cAAc,YAAY,OAAO;AAAA,IACrC,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AACD,QAAM,kBAAkB,YAAY;AAAA,IAClC,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AACD,QAAM,iBAAiB,YAA2B;AAAA,IAChD,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AACD,QAAM,iBAAiB,aAAa,MAAM;AACxC,kBAAc,KAAK;AAAA,MACjB,OAAO;AAAA,MACP,SAAS;AAAA,IACX,CAAC;AAAA,EACH,GAAG;AAAA,IACD,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,IAAI,gBAAc,CAAC;AAAA,MACnB,QAAQ;AAAA,IACV,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO;AAAA,MACP,QAAQ,CAAC,kBAAkB,OAAO,cAAc;AAAA,IAClD,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO,kBAAkB,SAAS;AAAA,MAClC,IAAI,MAAM;AAAA,MACV,QAAQ;AAAA,IACV,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,KAAK,CAAC;AAAA,MACJ,OAAO,aAAa;AAAA,MACpB,IAAI,MAAM;AAAA,MACV,QAAQ;AAAA,IACV,CAAC;AAAA,IACD,IAAI;AAAA,MACF,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750278467415,
      "end": 1750278467415,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750278467415,
      "end": 1750278467415,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/widgets/HelpForm/model/index.ts [vike:pluginModuleBanner] */\nimport { notifications } from \"@mantine/notifications\";\nimport { createEffect, createEvent, createStore, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { atom } from \"@/shared/factories\";\nimport { sendIssueMutation } from \"../api\";\nexport const HelpFormModel = atom(() => {\n  const HelpFormGate = createGate({\n    and: [],\n    or: {\n      name: \"HelpFormGate\",\n      sid: \"qx6n9m\"\n    }\n  });\n  const $isFormSent = createStore(false, {\n    name: \"$isFormSent\",\n    sid: \"-xhd2bg\"\n  });\n  const sentFormChanged = createEvent({\n    name: \"sentFormChanged\",\n    sid: \"txb7m5\"\n  });\n  const submitHelpForm = createEvent({\n    name: \"submitHelpForm\",\n    sid: \"-yplmlq\"\n  });\n  const sendHelpFormFx = createEffect(() => {\n    notifications.show({\n      title: \"Успешно!\",\n      message: \"Ваш вопрос отправлен\"\n    });\n  }, {\n    name: \"sendHelpFormFx\",\n    sid: \"-z4im3x\"\n  });\n  sample({\n    and: [{\n      clock: sentFormChanged,\n      source: $isFormSent,\n      fn: (isFormSent) => !isFormSent,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-5hk2xj\"\n    }\n  });\n  sample({\n    and: [{\n      clock: submitHelpForm,\n      target: [sendIssueMutation.start, sendHelpFormFx]\n    }],\n    or: {\n      sid: \"-5dpis0\"\n    }\n  });\n  sample({\n    and: [{\n      clock: sendIssueMutation.finished.success,\n      fn: () => true,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4zevcm\"\n    }\n  });\n  sample({\n    and: [{\n      clock: HelpFormGate.close,\n      fn: () => false,\n      target: $isFormSent\n    }],\n    or: {\n      sid: \"-4kkfbv\"\n    }\n  });\n  return {\n    HelpFormGate,\n    sendHelpFormFx,\n    $isFormSent,\n    sentFormChanged,\n    submitHelpForm\n  };\n});\n",
      "start": 1750278467416,
      "end": 1750278467416,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/widgets/HelpForm/model/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,C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"
      }
    }
  ]
}
