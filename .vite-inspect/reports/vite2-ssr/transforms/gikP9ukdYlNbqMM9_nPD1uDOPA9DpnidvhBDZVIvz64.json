{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/RootLayout/model/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { concurrency } from '@farfetched/core';\nimport { sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { delay } from 'patronum';\n\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\n\nimport { getPersonalityTypesWithCategoriesQuery, PersonalitiesModel } from '@/entities/Personality';\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\nimport { UserModel } from '@/entities/User';\n\nexport const RootLayoutModel = atom(() => {\n    const RootLayoutGate = createGate();\n\n    sample({\n        clock: RootLayoutGate.open,\n        target: [\n            PersonalitiesModel.PersonalitiesInitialGate.open,\n            UserModel.UserGate.open,\n            ReportModel.ReportGate.open,\n        ],\n    });\n\n    sample({\n        clock: delay(getPersonalityTypesWithCategoriesQuery.finished.success, 600),\n        fn: noop,\n        target: getSurveysInfoQuery.start,\n    });\n\n    concurrency(getSurveysInfoQuery, {\n        strategy: 'TAKE_FIRST',\n    });\n\n    return {\n        RootLayoutGate,\n    };\n});\n",
      "start": 1750239308228,
      "end": 1750239308239,
      "sourcemaps": null
    },
    {
      "name": "vite:react-swc",
      "result": "import { withFactory as _effector$factory } from 'effector';\nimport { concurrency } from '@farfetched/core';\nimport { sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\nimport { getPersonalityTypesWithCategoriesQuery, PersonalitiesModel } from '@/entities/Personality';\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\nimport { UserModel } from '@/entities/User';\nexport const RootLayoutModel = _effector$factory({\n    sid: \"ccjuplll\",\n    fn: ()=>atom(()=>{\n            const RootLayoutGate = createGate({\n                and: [],\n                or: {\n                    sid: \"84jxokni\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: RootLayoutGate.open,\n                        target: [\n                            PersonalitiesModel.PersonalitiesInitialGate.open,\n                            UserModel.UserGate.open,\n                            ReportModel.ReportGate.open\n                        ]\n                    }\n                ],\n                or: {\n                    sid: \"3uevbv88\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: _effector$factory({\n                            sid: \"d2ea7pwd\",\n                            fn: ()=>delay(getPersonalityTypesWithCategoriesQuery.finished.success, 600)\n                        }),\n                        fn: noop,\n                        target: getSurveysInfoQuery.start\n                    }\n                ],\n                or: {\n                    sid: \"2ausc9ti\"\n                }\n            });\n            _effector$factory({\n                sid: \"78l9ba03\",\n                fn: ()=>concurrency(getSurveysInfoQuery, {\n                        strategy: 'TAKE_FIRST'\n                    })\n            });\n            return {\n                RootLayoutGate\n            };\n        })\n});\n",
      "start": 1750239308239,
      "end": 1750239308264,
      "order": "pre",
      "sourcemaps": "{\"version\":3,\"sources\":[\"/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/RootLayout/model/index.ts\"],\"sourcesContent\":[\"import { concurrency } from '@farfetched/core';\\nimport { sample } from 'effector';\\nimport { createGate } from 'effector-react';\\nimport { delay } from 'patronum';\\n\\nimport { atom } from '@/shared/factories';\\nimport { noop } from '@/shared/lib';\\n\\nimport { getPersonalityTypesWithCategoriesQuery, PersonalitiesModel } from '@/entities/Personality';\\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\\nimport { UserModel } from '@/entities/User';\\n\\nexport const RootLayoutModel = atom(() => {\\n    const RootLayoutGate = createGate();\\n\\n    sample({\\n        clock: RootLayoutGate.open,\\n        target: [\\n            PersonalitiesModel.PersonalitiesInitialGate.open,\\n            UserModel.UserGate.open,\\n            ReportModel.ReportGate.open,\\n        ],\\n    });\\n\\n    sample({\\n        clock: delay(getPersonalityTypesWithCategoriesQuery.finished.success, 600),\\n        fn: noop,\\n        target: getSurveysInfoQuery.start,\\n    });\\n\\n    concurrency(getSurveysInfoQuery, {\\n        strategy: 'TAKE_FIRST',\\n    });\\n\\n    return {\\n        RootLayoutGate,\\n    };\\n});\\n\"],\"names\":[\"concurrency\",\"sample\",\"createGate\",\"delay\",\"atom\",\"noop\",\"getPersonalityTypesWithCategoriesQuery\",\"PersonalitiesModel\",\"getSurveysInfoQuery\",\"ReportModel\",\"UserModel\",\"RootLayoutModel\",\"RootLayoutGate\",\"clock\",\"open\",\"target\",\"PersonalitiesInitialGate\",\"UserGate\",\"ReportGate\",\"finished\",\"success\",\"fn\",\"start\",\"strategy\"],\"mappings\":\";AAAA,SAASA,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,KAAK,QAAQ,WAAW;AAEjC,SAASC,IAAI,QAAQ,qBAAqB;AAC1C,SAASC,IAAI,QAAQ,eAAe;AAEpC,SAASC,sCAAsC,EAAEC,kBAAkB,QAAQ,yBAAyB;AACpG,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,oBAAoB;AACrE,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,OAAO,MAAMC;;YAAkBP,KAAK;YAChC,MAAMQ,iBAAiBV;;;;;;YAEvBD;;oBAAO;wBACHY,OAAOD,eAAeE,IAAI;wBAC1BC,QAAQ;4BACJR,mBAAmBS,wBAAwB,CAACF,IAAI;4BAChDJ,UAAUO,QAAQ,CAACH,IAAI;4BACvBL,YAAYS,UAAU,CAACJ,IAAI;yBAC9B;oBACL;;;;;;YAEAb;;oBAAO;wBACHY,KAAK;;oCAAEV,MAAMG,uCAAuCa,QAAQ,CAACC,OAAO,EAAE;;wBACtEC,IAAIhB;wBACJU,QAAQP,oBAAoBc,KAAK;oBACrC;;;;;;;;wBAEAtB,YAAYQ,qBAAqB;wBAC7Be,UAAU;oBACd;;YAEA,OAAO;gBACHX;YACJ;QACJ;GAAG\"}"
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _effector$factory } from \"effector\";\nimport { concurrency } from \"@farfetched/core\";\nimport { sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { noop } from \"@/shared/lib\";\nimport { getPersonalityTypesWithCategoriesQuery, PersonalitiesModel } from \"@/entities/Personality\";\nimport { getSurveysInfoQuery, ReportModel } from \"@/entities/Report\";\nimport { UserModel } from \"@/entities/User\";\nexport const RootLayoutModel = _effector$factory({\n  sid: \"ccjuplll\",\n  fn: () => atom(() => {\n    const RootLayoutGate = createGate({\n      and: [],\n      or: {\n        sid: \"84jxokni\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: RootLayoutGate.open,\n          target: [\n            PersonalitiesModel.PersonalitiesInitialGate.open,\n            UserModel.UserGate.open,\n            ReportModel.ReportGate.open\n          ]\n        }\n      ],\n      or: {\n        sid: \"3uevbv88\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: _effector$factory({\n            sid: \"d2ea7pwd\",\n            fn: () => delay(getPersonalityTypesWithCategoriesQuery.finished.success, 600)\n          }),\n          fn: noop,\n          target: getSurveysInfoQuery.start\n        }\n      ],\n      or: {\n        sid: \"2ausc9ti\"\n      }\n    });\n    _effector$factory({\n      sid: \"78l9ba03\",\n      fn: () => concurrency(getSurveysInfoQuery, {\n        strategy: \"TAKE_FIRST\"\n      })\n    });\n    return {\n      RootLayoutGate\n    };\n  })\n});\n",
      "start": 1750239308264,
      "end": 1750239308276,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/widgets/RootLayout/model/index.ts"],
        "sourcesContent": [
          "import { withFactory as _effector$factory } from 'effector';\nimport { concurrency } from '@farfetched/core';\nimport { sample } from 'effector';\nimport { createGate } from 'effector-react';\nimport { delay } from 'patronum';\nimport { atom } from '@/shared/factories';\nimport { noop } from '@/shared/lib';\nimport { getPersonalityTypesWithCategoriesQuery, PersonalitiesModel } from '@/entities/Personality';\nimport { getSurveysInfoQuery, ReportModel } from '@/entities/Report';\nimport { UserModel } from '@/entities/User';\nexport const RootLayoutModel = _effector$factory({\n    sid: \"ccjuplll\",\n    fn: ()=>atom(()=>{\n            const RootLayoutGate = createGate({\n                and: [],\n                or: {\n                    sid: \"84jxokni\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: RootLayoutGate.open,\n                        target: [\n                            PersonalitiesModel.PersonalitiesInitialGate.open,\n                            UserModel.UserGate.open,\n                            ReportModel.ReportGate.open\n                        ]\n                    }\n                ],\n                or: {\n                    sid: \"3uevbv88\"\n                }\n            });\n            sample({\n                and: [\n                    {\n                        clock: _effector$factory({\n                            sid: \"d2ea7pwd\",\n                            fn: ()=>delay(getPersonalityTypesWithCategoriesQuery.finished.success, 600)\n                        }),\n                        fn: noop,\n                        target: getSurveysInfoQuery.start\n                    }\n                ],\n                or: {\n                    sid: \"2ausc9ti\"\n                }\n            });\n            _effector$factory({\n                sid: \"78l9ba03\",\n                fn: ()=>concurrency(getSurveysInfoQuery, {\n                        strategy: 'TAKE_FIRST'\n                    })\n            });\n            return {\n                RootLayoutGate\n            };\n        })\n});\n"
        ],
        "mappings": "AAAA,SAAS,eAAe,yBAAyB;AACjD,SAAS,mBAAmB;AAC5B,SAAS,cAAc;AACvB,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,YAAY;AACrB,SAAS,YAAY;AACrB,SAAS,wCAAwC,0BAA0B;AAC3E,SAAS,qBAAqB,mBAAmB;AACjD,SAAS,iBAAiB;AACnB,aAAM,kBAAkB,kBAAkB;AAAA,EAC7C,KAAK;AAAA,EACL,IAAI,MAAI,KAAK,MAAI;AACT,UAAM,iBAAiB,WAAW;AAAA,MAC9B,KAAK,CAAC;AAAA,MACN,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH,KAAK;AAAA,QACD;AAAA,UACI,OAAO,eAAe;AAAA,UACtB,QAAQ;AAAA,YACJ,mBAAmB,yBAAyB;AAAA,YAC5C,UAAU,SAAS;AAAA,YACnB,YAAY,WAAW;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH,KAAK;AAAA,QACD;AAAA,UACI,OAAO,kBAAkB;AAAA,YACrB,KAAK;AAAA,YACL,IAAI,MAAI,MAAM,uCAAuC,SAAS,SAAS,GAAG;AAAA,UAC9E,CAAC;AAAA,UACD,IAAI;AAAA,UACJ,QAAQ,oBAAoB;AAAA,QAChC;AAAA,MACJ;AAAA,MACA,IAAI;AAAA,QACA,KAAK;AAAA,MACT;AAAA,IACJ,CAAC;AACD,sBAAkB;AAAA,MACd,KAAK;AAAA,MACL,IAAI,MAAI,YAAY,qBAAqB;AAAA,QACjC,UAAU;AAAA,MACd,CAAC;AAAA,IACT,CAAC;AACD,WAAO;AAAA,MACH;AAAA,IACJ;AAAA,EACJ,CAAC;AACT,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/widgets/RootLayout/model/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _effector$factory } from \"effector\";\nimport { concurrency } from \"@farfetched/core\";\nimport { sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { delay } from \"patronum\";\nimport { atom } from \"@/shared/factories\";\nimport { noop } from \"@/shared/lib\";\nimport { getPersonalityTypesWithCategoriesQuery, PersonalitiesModel } from \"@/entities/Personality\";\nimport { getSurveysInfoQuery, ReportModel } from \"@/entities/Report\";\nimport { UserModel } from \"@/entities/User\";\nexport const RootLayoutModel = _effector$factory({\n  sid: \"ccjuplll\",\n  fn: () => atom(() => {\n    const RootLayoutGate = createGate({\n      and: [],\n      or: {\n        sid: \"84jxokni\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: RootLayoutGate.open,\n          target: [\n            PersonalitiesModel.PersonalitiesInitialGate.open,\n            UserModel.UserGate.open,\n            ReportModel.ReportGate.open\n          ]\n        }\n      ],\n      or: {\n        sid: \"3uevbv88\"\n      }\n    });\n    sample({\n      and: [\n        {\n          clock: _effector$factory({\n            sid: \"d2ea7pwd\",\n            fn: () => delay(getPersonalityTypesWithCategoriesQuery.finished.success, 600)\n          }),\n          fn: noop,\n          target: getSurveysInfoQuery.start\n        }\n      ],\n      or: {\n        sid: \"2ausc9ti\"\n      }\n    });\n    _effector$factory({\n      sid: \"78l9ba03\",\n      fn: () => concurrency(getSurveysInfoQuery, {\n        strategy: \"TAKE_FIRST\"\n      })\n    });\n    return {\n      RootLayoutGate\n    };\n  })\n});\n",
      "start": 1750239308276,
      "end": 1750239308276,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/widgets/RootLayout/model/index.ts"],
        "names": [],
        "mappingsjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,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"
      }
    }
  ]
}
