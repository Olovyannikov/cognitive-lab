{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/lib/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import type { PersonalityTypesResponse } from '../api/dto';\n\nexport const normalizePersonalities = (data: PersonalityTypesResponse[]) =>\n    data\n        .map((types) => types.types)\n        .flat()\n        .reduce(\n            (acc, curr) => {\n                acc[curr.code] = curr.name;\n\n                return acc;\n            },\n            {} as Record<string, string>\n        ) ?? ({} as Record<string, string>);\n",
      "start": 1746125082007,
      "end": 1746125082051,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import type { PersonalityTypesResponse } from '../api/dto';\nexport const normalizePersonalities = (data: PersonalityTypesResponse[]) => data.map(types => types.types).flat().reduce((acc, curr) => {\n  acc[curr.code] = curr.name;\n  return acc;\n}, {} as Record<string, string>) ?? {} as Record<string, string>;",
      "start": 1746125082051,
      "end": 1746125082052,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "PersonalityTypesResponse",
          "normalizePersonalities",
          "data",
          "map",
          "types",
          "flat",
          "reduce",
          "acc",
          "curr",
          "code",
          "name",
          "Record"
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/lib/index.ts"],
        "sourcesContent": [
          "import type { PersonalityTypesResponse } from '../api/dto';\n\nexport const normalizePersonalities = (data: PersonalityTypesResponse[]) =>\n    data\n        .map((types) => types.types)\n        .flat()\n        .reduce(\n            (acc, curr) => {\n                acc[curr.code] = curr.name;\n\n                return acc;\n            },\n            {} as Record<string, string>\n        ) ?? ({} as Record<string, string>);\n"
        ],
        "mappings": "AAAA,cAAcA,wBAAwB,QAAQ,YAAY;AAE1D,OAAO,MAAMC,sBAAsB,GAAGA,CAACC,IAAI,EAAEF,wBAAwB,EAAE,KACnEE,IAAI,CACCC,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACA,KAAK,CAAC,CAC3BC,IAAI,CAAC,CAAC,CACNC,MAAM,CACH,CAACC,GAAG,EAAEC,IAAI,KAAK;EACXD,GAAG,CAACC,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI,CAACE,IAAI;EAE1B,OAAOH,GAAG;AACd,CAAC,EACD,CAAC,CAAC,IAAII,MAAM,CAAC,MAAM,EAAE,MAAM,CAC/B,CAAC,IAAK,CAAC,CAAC,IAAIA,MAAM,CAAC,MAAM,EAAE,MAAM,CAAE",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "export const normalizePersonalities = (data) => data.map((types) => types.types).flat().reduce((acc, curr) => {\n  acc[curr.code] = curr.name;\n  return acc;\n}, {}) ?? {};\n",
      "start": 1746125082052,
      "end": 1746125082354,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Personality/lib/index.ts"],
        "sourcesContent": [
          "import type { PersonalityTypesResponse } from '../api/dto';\nexport const normalizePersonalities = (data: PersonalityTypesResponse[]) => data.map(types => types.types).flat().reduce((acc, curr) => {\n  acc[curr.code] = curr.name;\n  return acc;\n}, {} as Record<string, string>) ?? {} as Record<string, string>;"
        ],
        "mappings": "AACO,aAAM,yBAAyB,CAAC,SAAqC,KAAK,IAAI,WAAS,MAAM,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,SAAS;AACtI,MAAI,KAAK,IAAI,IAAI,KAAK;AACtB,SAAO;AACT,GAAG,CAAC,CAA2B,KAAK,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/entities/Personality/lib/index.ts [vike:pluginModuleBanner] */\nexport const normalizePersonalities = (data) => data.map((types) => types.types).flat().reduce((acc, curr) => {\n  acc[curr.code] = curr.name;\n  return acc;\n}, {}) ?? {};\n",
      "start": 1746125082354,
      "end": 1746125082354,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Personality/lib/index.ts"],
        "names": [],
        "mappings
      }
    }
  ]
}
