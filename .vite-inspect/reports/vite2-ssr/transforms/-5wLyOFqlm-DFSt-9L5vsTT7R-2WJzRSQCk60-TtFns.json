{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Review/api/index.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createMutation, createQuery } from '@farfetched/core';\nimport type { PageContextServer } from 'vike/types';\n\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { CreateReviewRequest, ReviewRequest, ReviewResponse } from './dto';\n\nexport const getReviewsQuery = createQuery({\n    effect: createCommonRequestFx<ReviewRequest | PageContextServer<void> | void, ReviewResponse>((params) => ({\n        url: API.surveys.comments,\n        params: params ?? {},\n    })),\n});\n\nexport const createReviewMutation = createMutation({\n    effect: createInternalRequestFx<CreateReviewRequest, void>((body) => ({\n        url: API.surveys.comments,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n",
      "start": 1750278466910,
      "end": 1750278466950,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from '@farfetched/core';\nimport type { PageContextServer } from 'vike/types';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { CreateReviewRequest, ReviewRequest, ReviewResponse } from './dto';\nexport const getReviewsQuery = _withFactory({\n  sid: \"-juon18\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<ReviewRequest | PageContextServer<void> | void, ReviewResponse>(params => ({\n      url: API.surveys.comments,\n      params: params ?? {}\n    }))\n  }),\n  name: \"getReviewsQuery\",\n  method: \"createQuery\"\n});\nexport const createReviewMutation = _withFactory({\n  sid: \"-sexnrd\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx<CreateReviewRequest, void>(body => ({\n      url: API.surveys.comments,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"createReviewMutation\",\n  method: \"createMutation\"\n});",
      "start": 1750278466950,
      "end": 1750278466952,
      "order": "pre-normal",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createMutation",
          "createQuery",
          "PageContextServer",
          "API",
          "createCommonRequestFx",
          "createInternalRequestFx",
          "HTTP_METHODS",
          "CreateReviewRequest",
          "ReviewRequest",
          "ReviewResponse",
          "getReviewsQuery",
          "_withFactory",
          "sid",
          "\"-juon18\"",
          "fn",
          "effect",
          "params",
          "url",
          "surveys",
          "comments",
          "name",
          "\"getReviewsQuery\"",
          "method",
          "\"createQuery\"",
          "createReviewMutation",
          "\"-sexnrd\"",
          "body",
          "POST",
          "\"createReviewMutation\"",
          "\"createMutation\""
        ],
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Review/api/index.ts"],
        "sourcesContent": [
          "import { createMutation, createQuery } from '@farfetched/core';\nimport type { PageContextServer } from 'vike/types';\n\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\n\nimport type { CreateReviewRequest, ReviewRequest, ReviewResponse } from './dto';\n\nexport const getReviewsQuery = createQuery({\n    effect: createCommonRequestFx<ReviewRequest | PageContextServer<void> | void, ReviewResponse>((params) => ({\n        url: API.surveys.comments,\n        params: params ?? {},\n    })),\n});\n\nexport const createReviewMutation = createMutation({\n    effect: createInternalRequestFx<CreateReviewRequest, void>((body) => ({\n        url: API.surveys.comments,\n        method: HTTP_METHODS.POST,\n        body,\n    })),\n});\n"
        ],
        "mappings": ";AAAA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,cAAcC,iBAAiB,QAAQ,YAAY;AAEnD,SAASC,GAAG,EAAEC,qBAAqB,EAAEC,uBAAuB,EAAEC,YAAY,QAAQ,cAAc;AAEhG,cAAcC,mBAAmB,EAAEC,aAAa,EAAEC,cAAc,QAAQ,OAAO;AAE/E,OAAO,MAAMC,eAAe,GAAAC,YAAA;EAAAC,GAAA,EAAAC,SAAA;EAAAC,EAAA,EAAAA,CAAA,KAAGb,WAAW,CAAC;IACvCc,MAAM,EAAEX,qBAAqB,CAACI,aAAa,GAAGN,iBAAiB,CAAC,IAAI,CAAC,GAAG,IAAI,EAAEO,cAAc,CAAC,CAAEO,MAAM,KAAM;MACvGC,GAAG,EAAEd,GAAG,CAACe,OAAO,CAACC,QAAQ;MACzBH,MAAM,EAAEA,MAAM,IAAI,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,CAAC;EAAAI,IAAA,EAAAC,iBAAA;EAAAC,MAAA,EAAAC;AAAA;AAEF,OAAO,MAAMC,oBAAoB,GAAAb,YAAA;EAAAC,GAAA,EAAAa,SAAA;EAAAX,EAAA,EAAAA,CAAA,KAAGd,cAAc,CAAC;IAC/Ce,MAAM,EAAEV,uBAAuB,CAACE,mBAAmB,EAAE,IAAI,CAAC,CAAEmB,IAAI,KAAM;MAClET,GAAG,EAAEd,GAAG,CAACe,OAAO,CAACC,QAAQ;MACzBG,MAAM,EAAEhB,YAAY,CAACqB,IAAI;MACzBD;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;EAAAN,IAAA,EAAAQ,sBAAA;EAAAN,MAAA,EAAAO;AAAA",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getReviewsQuery = _withFactory({\n  sid: \"-juon18\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx((params) => ({\n      url: API.surveys.comments,\n      params: params ?? {}\n    }))\n  }),\n  name: \"getReviewsQuery\",\n  method: \"createQuery\"\n});\nexport const createReviewMutation = _withFactory({\n  sid: \"-sexnrd\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: API.surveys.comments,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"createReviewMutation\",\n  method: \"createMutation\"\n});\n",
      "start": 1750278466952,
      "end": 1750278467071,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": ["/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/entities/Review/api/index.ts"],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from '@farfetched/core';\nimport type { PageContextServer } from 'vike/types';\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from '@/shared/api';\nimport type { CreateReviewRequest, ReviewRequest, ReviewResponse } from './dto';\nexport const getReviewsQuery = _withFactory({\n  sid: \"-juon18\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx<ReviewRequest | PageContextServer<void> | void, ReviewResponse>(params => ({\n      url: API.surveys.comments,\n      params: params ?? {}\n    }))\n  }),\n  name: \"getReviewsQuery\",\n  method: \"createQuery\"\n});\nexport const createReviewMutation = _withFactory({\n  sid: \"-sexnrd\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx<CreateReviewRequest, void>(body => ({\n      url: API.surveys.comments,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"createReviewMutation\",\n  method: \"createMutation\"\n});"
        ],
        "mappings": "AAAA,SAAS,eAAe,oBAAoB;AAC5C,SAAS,gBAAgB,mBAAmB;AAE5C,SAAS,KAAK,uBAAuB,yBAAyB,oBAAoB;AAE3E,aAAM,kBAAkB,aAAa;AAAA,EAC1C,KAAK;AAAA,EACL,IAAI,MAAM,YAAY;AAAA,IACpB,QAAQ,sBAAsF,aAAW;AAAA,MACvG,KAAK,IAAI,QAAQ;AAAA,MACjB,QAAQ,UAAU,CAAC;AAAA,IACrB,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;AACM,aAAM,uBAAuB,aAAa;AAAA,EAC/C,KAAK;AAAA,EACL,IAAI,MAAM,eAAe;AAAA,IACvB,QAAQ,wBAAmD,WAAS;AAAA,MAClE,KAAK,IAAI,QAAQ;AAAA,MACjB,QAAQ,aAAa;AAAA,MACrB;AAAA,IACF,EAAE;AAAA,EACJ,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginFileEnv",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginExtractAssets:remove-javaScript",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "post"
    },
    {
      "name": "vike:pluginExtractExportNames",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "post"
    },
    {
      "name": "vike:pluginEnvVars",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "post"
    },
    {
      "name": "vike:pluginReplaceConstants",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "normal-normal"
    },
    {
      "name": "vike:build:pluginModuleBanner",
      "result": "/*! src/entities/Review/api/index.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createMutation, createQuery } from \"@farfetched/core\";\nimport { API, createCommonRequestFx, createInternalRequestFx, HTTP_METHODS } from \"@/shared/api\";\nexport const getReviewsQuery = _withFactory({\n  sid: \"-juon18\",\n  fn: () => createQuery({\n    effect: createCommonRequestFx((params) => ({\n      url: API.surveys.comments,\n      params: params ?? {}\n    }))\n  }),\n  name: \"getReviewsQuery\",\n  method: \"createQuery\"\n});\nexport const createReviewMutation = _withFactory({\n  sid: \"-sexnrd\",\n  fn: () => createMutation({\n    effect: createInternalRequestFx((body) => ({\n      url: API.surveys.comments,\n      method: HTTP_METHODS.POST,\n      body\n    }))\n  }),\n  name: \"createReviewMutation\",\n  method: \"createMutation\"\n});\n",
      "start": 1750278467071,
      "end": 1750278467071,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": ["src/entities/Review/api/index.ts"],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACthG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChzB,CAAC,CAAC;"
      }
    }
  ]
}
