{
  "resolvedId": "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/factories/disclosure.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createFactory } from '@withease/factories';\nimport { createEvent, createStore, sample } from 'effector';\n\nexport const disclosureFactory = createFactory(({ open }: { open: boolean }) => {\n    const $open = createStore(open);\n\n    const toggle = createEvent();\n    const opened = createEvent<true>();\n    const closed = createEvent<false>();\n\n    sample({\n        clock: toggle,\n        source: $open,\n        fn: (isOpen) => !isOpen,\n        target: $open,\n    });\n\n    sample({\n        clock: [opened, closed],\n        target: $open,\n    });\n\n    return {\n        $open,\n        toggle,\n        opened,\n        closed,\n    };\n});\n",
      "start": 1750105187877,
      "end": 1750105187919,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createFactory } from '@withease/factories';\nimport { createEvent, createStore, sample } from 'effector';\nexport const disclosureFactory = _withFactory({\n  sid: \"-8zc20a\",\n  fn: () => createFactory(({\n    open\n  }: {\n    open: boolean;\n  }) => {\n    const $open = createStore(open, {\n      name: \"$open\",\n      sid: \"4dnspr\"\n    });\n    const toggle = createEvent({\n      name: \"toggle\",\n      sid: \"a3bdr6\"\n    });\n    const opened = createEvent<true>({\n      name: \"opened\",\n      sid: \"-ymylpm\"\n    });\n    const closed = createEvent<false>({\n      name: \"closed\",\n      sid: \"-hqlgzs\"\n    });\n    sample({\n      and: [{\n        clock: toggle,\n        source: $open,\n        fn: isOpen => !isOpen,\n        target: $open\n      }],\n      or: {\n        sid: \"2bhvq9\"\n      }\n    });\n    sample({\n      and: [{\n        clock: [opened, closed],\n        target: $open\n      }],\n      or: {\n        sid: \"2fcfvs\"\n      }\n    });\n    return {\n      $open,\n      toggle,\n      opened,\n      closed\n    };\n  }),\n  name: \"disclosureFactory\",\n  method: \"createFactory\"\n});",
      "start": 1750105187919,
      "end": 1750105187920,
      "order": "pre",
      "sourcemaps": {
        "version": 3,
        "names": [
          "createFactory",
          "createEvent",
          "createStore",
          "sample",
          "disclosureFactory",
          "_withFactory",
          "sid",
          "\"-8zc20a\"",
          "fn",
          "open",
          "$open",
          "name",
          "toggle",
          "opened",
          "closed",
          "and",
          "clock",
          "source",
          "isOpen",
          "target",
          "or",
          "\"disclosureFactory\"",
          "method",
          "\"createFactory\""
        ],
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/factories/disclosure.ts"
        ],
        "sourcesContent": [
          "import { createFactory } from '@withease/factories';\nimport { createEvent, createStore, sample } from 'effector';\n\nexport const disclosureFactory = createFactory(({ open }: { open: boolean }) => {\n    const $open = createStore(open);\n\n    const toggle = createEvent();\n    const opened = createEvent<true>();\n    const closed = createEvent<false>();\n\n    sample({\n        clock: toggle,\n        source: $open,\n        fn: (isOpen) => !isOpen,\n        target: $open,\n    });\n\n    sample({\n        clock: [opened, closed],\n        target: $open,\n    });\n\n    return {\n        $open,\n        toggle,\n        opened,\n        closed,\n    };\n});\n"
        ],
        "mappings": ";AAAA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,WAAW,EAAEC,WAAW,EAAEC,MAAM,QAAQ,UAAU;AAE3D,OAAO,MAAMC,iBAAiB,GAAAC,YAAA;EAAAC,GAAA,EAAAC,SAAA;EAAAC,EAAA,EAAAA,CAAA,KAAGR,aAAa,CAAC,CAAC;IAAES;EAAwB,CAAlB,EAAE;IAAEA,IAAI,EAAE,OAAO;EAAC,CAAC,KAAK;IAC5E,MAAMC,KAAK,GAAGR,WAAW,CAACO,IAAI;MAAAE,IAAA;MAAAL,GAAA;IAAA,EAAC;IAE/B,MAAMM,MAAM,GAAGX,WAAW;MAAAU,IAAA;MAAAL,GAAA;IAAA,CAAC,CAAC;IAC5B,MAAMO,MAAM,GAAGZ,WAAW,CAAC,IAAI,CAAC;MAAAU,IAAA;MAAAL,GAAA;IAAA,CAAC,CAAC;IAClC,MAAMQ,MAAM,GAAGb,WAAW,CAAC,KAAK,CAAC;MAAAU,IAAA;MAAAL,GAAA;IAAA,CAAC,CAAC;IAEnCH,MAAM;MAAAY,GAAA,GAAC;QACHC,KAAK,EAAEJ,MAAM;QACbK,MAAM,EAAEP,KAAK;QACbF,EAAE,EAAGU,MAAM,IAAK,CAACA,MAAM;QACvBC,MAAM,EAAET;MACZ,CAAC;MAAAU,EAAA;QAAAd,GAAA;MAAA;IAAA,EAAC;IAEFH,MAAM;MAAAY,GAAA,GAAC;QACHC,KAAK,EAAE,CAACH,MAAM,EAAEC,MAAM,CAAC;QACvBK,MAAM,EAAET;MACZ,CAAC;MAAAU,EAAA;QAAAd,GAAA;MAAA;IAAA,EAAC;IAEF,OAAO;MACHI,KAAK;MACLE,MAAM;MACNC,MAAM;MACNC;IACJ,CAAC;EACL,CAAC,CAAC;EAAAH,IAAA,EAAAU,mBAAA;EAAAC,MAAA,EAAAC;AAAA",
        "ignoreList": []
      }
    },
    {
      "name": "vite:esbuild",
      "result": "import { withFactory as _withFactory } from \"effector\";\nimport { createFactory } from \"@withease/factories\";\nimport { createEvent, createStore, sample } from \"effector\";\nexport const disclosureFactory = _withFactory({\n  sid: \"-8zc20a\",\n  fn: () => createFactory(({\n    open\n  }) => {\n    const $open = createStore(open, {\n      name: \"$open\",\n      sid: \"4dnspr\"\n    });\n    const toggle = createEvent({\n      name: \"toggle\",\n      sid: \"a3bdr6\"\n    });\n    const opened = createEvent({\n      name: \"opened\",\n      sid: \"-ymylpm\"\n    });\n    const closed = createEvent({\n      name: \"closed\",\n      sid: \"-hqlgzs\"\n    });\n    sample({\n      and: [{\n        clock: toggle,\n        source: $open,\n        fn: (isOpen) => !isOpen,\n        target: $open\n      }],\n      or: {\n        sid: \"2bhvq9\"\n      }\n    });\n    sample({\n      and: [{\n        clock: [opened, closed],\n        target: $open\n      }],\n      or: {\n        sid: \"2fcfvs\"\n      }\n    });\n    return {\n      $open,\n      toggle,\n      opened,\n      closed\n    };\n  }),\n  name: \"disclosureFactory\",\n  method: \"createFactory\"\n});\n",
      "start": 1750105187920,
      "end": 1750105188187,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/Users/ilaolovannikov/WebstormProjects/cognitive-lab/src/shared/factories/disclosure.ts"
        ],
        "sourcesContent": [
          "import { withFactory as _withFactory } from \"effector\";\nimport { createFactory } from '@withease/factories';\nimport { createEvent, createStore, sample } from 'effector';\nexport const disclosureFactory = _withFactory({\n  sid: \"-8zc20a\",\n  fn: () => createFactory(({\n    open\n  }: {\n    open: boolean;\n  }) => {\n    const $open = createStore(open, {\n      name: \"$open\",\n      sid: \"4dnspr\"\n    });\n    const toggle = createEvent({\n      name: \"toggle\",\n      sid: \"a3bdr6\"\n    });\n    const opened = createEvent<true>({\n      name: \"opened\",\n      sid: \"-ymylpm\"\n    });\n    const closed = createEvent<false>({\n      name: \"closed\",\n      sid: \"-hqlgzs\"\n    });\n    sample({\n      and: [{\n        clock: toggle,\n        source: $open,\n        fn: isOpen => !isOpen,\n        target: $open\n      }],\n      or: {\n        sid: \"2bhvq9\"\n      }\n    });\n    sample({\n      and: [{\n        clock: [opened, closed],\n        target: $open\n      }],\n      or: {\n        sid: \"2fcfvs\"\n      }\n    });\n    return {\n      $open,\n      toggle,\n      opened,\n      closed\n    };\n  }),\n  name: \"disclosureFactory\",\n  method: \"createFactory\"\n});"
        ],
        "mappings": "AAAA,SAAS,eAAe,oBAAoB;AAC5C,SAAS,qBAAqB;AAC9B,SAAS,aAAa,aAAa,cAAc;AAC1C,aAAM,oBAAoB,aAAa;AAAA,EAC5C,KAAK;AAAA,EACL,IAAI,MAAM,cAAc,CAAC;AAAA,IACvB;AAAA,EACF,MAEM;AACJ,UAAM,QAAQ,YAAY,MAAM;AAAA,MAC9B,MAAM;AAAA,MACN,KAAK;AAAA,IACP,CAAC;AACD,UAAM,SAAS,YAAY;AAAA,MACzB,MAAM;AAAA,MACN,KAAK;AAAA,IACP,CAAC;AACD,UAAM,SAAS,YAAkB;AAAA,MAC/B,MAAM;AAAA,MACN,KAAK;AAAA,IACP,CAAC;AACD,UAAM,SAAS,YAAmB;AAAA,MAChC,MAAM;AAAA,MACN,KAAK;AAAA,IACP,CAAC;AACD,WAAO;AAAA,MACL,KAAK,CAAC;AAAA,QACJ,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,IAAI,YAAU,CAAC;AAAA,QACf,QAAQ;AAAA,MACV,CAAC;AAAA,MACD,IAAI;AAAA,QACF,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AACD,WAAO;AAAA,MACL,KAAK,CAAC;AAAA,QACJ,OAAO,CAAC,QAAQ,MAAM;AAAA,QACtB,QAAQ;AAAA,MACV,CAAC;AAAA,MACD,IAAI;AAAA,QACF,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,CAAC;AAAA,EACD,MAAM;AAAA,EACN,QAAQ;AACV,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:worker",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal-normal"
    },
    {
      "name": "vike:fileEnv",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal-normal"
    },
    {
      "name": "vike:extractAssets:remove-javaScript",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "post"
    },
    {
      "name": "vike:extractExportNames",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "post"
    },
    {
      "name": "vike:envVars",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "normal-normal"
    },
    {
      "name": "vike:pluginModuleBanner",
      "result": "/*! src/shared/factories/disclosure.ts [vike:pluginModuleBanner] */\nimport { withFactory as _withFactory } from \"effector\";\nimport { createFactory } from \"@withease/factories\";\nimport { createEvent, createStore, sample } from \"effector\";\nexport const disclosureFactory = _withFactory({\n  sid: \"-8zc20a\",\n  fn: () => createFactory(({\n    open\n  }) => {\n    const $open = createStore(open, {\n      name: \"$open\",\n      sid: \"4dnspr\"\n    });\n    const toggle = createEvent({\n      name: \"toggle\",\n      sid: \"a3bdr6\"\n    });\n    const opened = createEvent({\n      name: \"opened\",\n      sid: \"-ymylpm\"\n    });\n    const closed = createEvent({\n      name: \"closed\",\n      sid: \"-hqlgzs\"\n    });\n    sample({\n      and: [{\n        clock: toggle,\n        source: $open,\n        fn: (isOpen) => !isOpen,\n        target: $open\n      }],\n      or: {\n        sid: \"2bhvq9\"\n      }\n    });\n    sample({\n      and: [{\n        clock: [opened, closed],\n        target: $open\n      }],\n      or: {\n        sid: \"2fcfvs\"\n      }\n    });\n    return {\n      $open,\n      toggle,\n      opened,\n      closed\n    };\n  }),\n  name: \"disclosureFactory\",\n  method: \"createFactory\"\n});\n",
      "start": 1750105188187,
      "end": 1750105188187,
      "order": "post-post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "src/shared/factories/disclosure.ts"
        ],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnhB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACN,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpxB,CAAC,CAAC;"
      }
    }
  ]
}
